// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

export interface EnumOption {
  label: string
  value: string
}

/// ////////////////////////////////////////////////////////////////////////////
// Errors
/// ////////////////////////////////////////////////////////////////////////////
export enum ErrorCode {
  CommonUnauthorized = 'backend:common:unauthorized',
  CommonForbidden = 'backend:common:forbidden',
  CommonNotFound = 'backend:common:notFound',
  CommonInternalServerError = 'backend:common:internalServerError',
  CommonInvalidRequest = 'backend:common:invalidRequest',
  CommonMalformedJSON = 'backend:common:malformedJSON',
  CommonRateLimitExceeded = 'backend:common:rateLimitExceeded',
  CommonInUse = 'backend:common:inUse',
  CommonInvalidArgument = 'backend:common:invalidArgument',
  CommonMinLength = 'backend:common:minLength',
  CommonRequired = 'backend:common:required',
  CommonRuntimeError = 'backend:common:runtimeError',
  ApiInvalidAPIPermissionTypes = 'backend:api:invalidAPIPermissionTypes',
  ExternalAPIInsufficientPermissions = 'backend:externalAPI:insufficientPermissions',
  ExternalAPIInvalidCredentials = 'backend:externalAPI:invalidCredentials',
  ExternalAPIInvalidNonce = 'backend:externalAPI:invalidNonce',
  ExternalAPIInternalServerError = 'backend:externalAPI:internalServerError',
  ExternalAPIInvalidResponse = 'backend:externalAPI:invalidResponse',
  ExternalAPILogicalError = 'backend:externalAPI:logicalError',
  ExternalAPIInvalidParameters = 'backend:externalAPI:invalidParameters',
  ExternalAPIRateLimitExceeded = 'backend:externalAPI:rateLimitExceeded',
  ExternalAPIUnknownError = 'backend:externalAPI:unknownError',
  ExternalAPINoMarginAccount = 'backend:externalAPI:noMarginAccount',
  AuthInvalidCookie = 'backend:auth:invalidCookie',
  AuthUserNotConfirmed = 'backend:auth:userNotConfirmed',
  AuthUserNotLoggedIn = 'backend:auth:userNotLoggedIn',
  AuthUserNotFound = 'backend:auth:userNotFound',
  AuthMustLoginWithBitGoOAuth = 'backend:auth:mustLoginWithBitGoOAuth',
  AuthUserInvalidCredentials = 'backend:auth:userInvalidCredentials',
  AuthPasswordRequiresNumber = 'backend:auth:passwordRequiresNumber',
  AuthPasswordRequiresSymbol = 'backend:auth:passwordRequiresSymbol',
  AuthPasswordRequiresLowerAndUpperCases = 'backend:auth:passwordRequiresLowerAndUpperCases',
  AuthOauthEmailIsNotVerified = 'backend:auth:oauthEmailIsNotVerified',
  AuthInvalidPasscode = 'backend:auth:invalidPasscode',
  AuthInvalidConfirmToken = 'backend:auth:invalidConfirmToken',
  AuthInvalidRecoverToken = 'backend:auth:invalidRecoverToken',
  AuthOauthWithNoEnterprise = 'backend:auth:oauthWithNoEnterprise',
  ChartOfAccountAccountIsAlreadyCreated = 'backend:chartOfAccount:accountIsAlreadyCreated',
  FilesFileExceededMaxSize = 'backend:files:fileExceededMaxSize',
  FilesInvalidFile = 'backend:files:invalidFile',
  FilesInvalidFileType = 'backend:files:invalidFileType',
  SyncInvalidCSV = 'backend:sync:invalidCSV',
  SyncInvalidCSVHeader = 'backend:sync:invalidCSVHeader',
  SyncInvalidNumberOfCSV = 'backend:sync:invalidNumberOfCSV',
  SyncInvalidAddress = 'backend:sync:invalidAddress',
  OrganizationMustHaveAtLeastOneAdmin = 'backend:organization:mustHaveAtLeastOneAdmin',
  PortfolioPortfolioIDMismatch = 'backend:portfolio:portfolioIDMismatch',
  TaskDuplicateTask = 'backend:task:duplicateTask',
  LineItemLineItemMustBeManualReconciliation = 'backend:lineItem:lineItemMustBeManualReconciliation',
  TransactionsInvalidLineItemCategory = 'backend:transactions:invalidLineItemCategory',
  TransactionsInvalidTrade = 'backend:transactions:invalidTrade',
  TransactionsLineItemIsAlreadyReconciled = 'backend:transactions:lineItemIsAlreadyReconciled',
  TransactionsLineItemMustHaveValue = 'backend:transactions:lineItemMustHaveValue',
  TransactionsLineItemsMinLength = 'backend:transactions:lineItemsMinLength',
  TransactionsLineItemsMustBeEmpty = 'backend:transactions:lineItemsMustBeEmpty',
  TransactionsLineItemsMustBeFunctionalCurrency = 'backend:transactions:lineItemsMustBeFunctionalCurrency',
  TransactionsLineItemsMustBeNonFunctionalCurrency = 'backend:transactions:lineItemsMustBeNonFunctionalCurrency',
  TransactionsLineItemsMustBeUniform = 'backend:transactions:lineItemsMustBeUniform',
  TransactionsNumInstrumentsMigration = 'backend:transactions:numInstrumentsMigration',
  TransactionsMustHaveSameTxid = 'backend:transactions:mustHaveSameTxid',
  SecuritymasterPricingOverrideDuplicate = 'backend:securitymaster:pricingOverrideDuplicate',
  SecuritymasterPrivateInstrumentSymbolDuplicate = 'backend:securitymaster:privateInstrumentSymbolDuplicate',
  TransactionsTransferQuantitiesMismatch = 'backend:transactions:transferQuantitiesMismatch',
  TransactionsPortfolioImportQuantitiesMismatch = 'backend:transactions:portfolioImportQuantitiesMismatch',
  TransactionsAdjustmentQuantitiesMismatch = 'backend:transactions:adjustmentQuantitiesMismatch',
  TransactionsMustBeManualReconciled = 'backend:transactions:mustBeManualReconciled',
  UserInvitationUserIsAlreadyInOrganization = 'backend:userInvitation:userIsAlreadyInOrganization',
  UserInvitationUserIsAlreadyInvited = 'backend:userInvitation:userIsAlreadyInvited',
  UserInvitationUserInvitationExpired = 'backend:userInvitation:userInvitationExpired',
  UserInvitationUserInvitationNotAllowed = 'backend:userInvitation:userInvitationNotAllowed',
  TradeTradingDisabled = 'backend:trade:tradingDisabled',
  TradeProductTradingDisabled = 'backend:trade:productTradingDisabled',
  TradeInsufficientFunds = 'backend:trade:insufficientFunds',
  TradeInvalidPrice = 'backend:trade:invalidPrice',
  TradeInvalidQuantity = 'backend:trade:invalidQuantity',
  TradeInvalidUserIntent = 'backend:trade:invalidUserIntent',
  TradeUnknownExchangeError = 'backend:trade:unknownExchangeError',
  TradeUnsupportedExchangeFeature = 'backend:trade:unsupportedExchangeFeature',
  TradeInternalError = 'backend:trade:internalError',
  TradeInternalErrorOrderSpecificationNotSupported = 'backend:trade:internalErrorOrderSpecificationNotSupported',
  TradeInvalidStrategy = 'backend:trade:invalidStrategy',
  TradeInvalidStrategyParams = 'backend:trade:invalidStrategyParams',
  TradeNoTradingAccount = 'backend:trade:noTradingAccount',
  TradeUnsupportedProduct = 'backend:trade:unsupportedProduct',
  TradeInsufficientExchangeBalance = 'backend:trade:insufficientExchangeBalance',
  TradeNoOrderBooks = 'backend:trade:noOrderBooks',
  TradeExchangeOrderNotFound = 'backend:trade:exchangeOrderNotFound',
  TradeInvalidLimitPrice = 'backend:trade:invalidLimitPrice',
  TradeInvalidTradeDuration = 'backend:trade:invalidTradeDuration',
  TradeExchangeOrderQuantityTruncation = 'backend:trade:exchangeOrderQuantityTruncation',
  TradeMarginNOPLimit = 'backend:trade:marginNOPLimit',
  TradeWillTriggerMarginCall = 'backend:trade:willTriggerMarginCall',
  TradeMarginBorrowLimit = 'backend:trade:marginBorrowLimit',
  TradeWillTriggerLiquidation = 'backend:trade:willTriggerLiquidation',
  TradeMarginPendingLiquidation = 'backend:trade:marginPendingLiquidation',
  TradeMarginCheckError = 'backend:trade:marginCheckError',
  TradeUnableToProcess = 'backend:trade:unableToProcess',
  AddressBookInstitutionAddressDuplicateSameAddress = 'backend:addressBook:institutionAddressDuplicateSameAddress',
  AddressBookInstitutionAddressDuplicateAcrossAddress = 'backend:addressBook:institutionAddressDuplicateAcrossAddress',
}
export const ErrorCodes: string[] = [
  ErrorCode.CommonUnauthorized,
  ErrorCode.CommonForbidden,
  ErrorCode.CommonNotFound,
  ErrorCode.CommonInternalServerError,
  ErrorCode.CommonInvalidRequest,
  ErrorCode.CommonMalformedJSON,
  ErrorCode.CommonRateLimitExceeded,
  ErrorCode.CommonInUse,
  ErrorCode.CommonInvalidArgument,
  ErrorCode.CommonMinLength,
  ErrorCode.CommonRequired,
  ErrorCode.CommonRuntimeError,
  ErrorCode.ApiInvalidAPIPermissionTypes,
  ErrorCode.ExternalAPIInsufficientPermissions,
  ErrorCode.ExternalAPIInvalidCredentials,
  ErrorCode.ExternalAPIInvalidNonce,
  ErrorCode.ExternalAPIInternalServerError,
  ErrorCode.ExternalAPIInvalidResponse,
  ErrorCode.ExternalAPILogicalError,
  ErrorCode.ExternalAPIInvalidParameters,
  ErrorCode.ExternalAPIRateLimitExceeded,
  ErrorCode.ExternalAPIUnknownError,
  ErrorCode.ExternalAPINoMarginAccount,
  ErrorCode.AuthInvalidCookie,
  ErrorCode.AuthUserNotConfirmed,
  ErrorCode.AuthUserNotLoggedIn,
  ErrorCode.AuthUserNotFound,
  ErrorCode.AuthMustLoginWithBitGoOAuth,
  ErrorCode.AuthUserInvalidCredentials,
  ErrorCode.AuthPasswordRequiresNumber,
  ErrorCode.AuthPasswordRequiresSymbol,
  ErrorCode.AuthPasswordRequiresLowerAndUpperCases,
  ErrorCode.AuthOauthEmailIsNotVerified,
  ErrorCode.AuthInvalidPasscode,
  ErrorCode.AuthInvalidConfirmToken,
  ErrorCode.AuthInvalidRecoverToken,
  ErrorCode.AuthOauthWithNoEnterprise,
  ErrorCode.ChartOfAccountAccountIsAlreadyCreated,
  ErrorCode.FilesFileExceededMaxSize,
  ErrorCode.FilesInvalidFile,
  ErrorCode.FilesInvalidFileType,
  ErrorCode.SyncInvalidCSV,
  ErrorCode.SyncInvalidCSVHeader,
  ErrorCode.SyncInvalidNumberOfCSV,
  ErrorCode.SyncInvalidAddress,
  ErrorCode.OrganizationMustHaveAtLeastOneAdmin,
  ErrorCode.PortfolioPortfolioIDMismatch,
  ErrorCode.TaskDuplicateTask,
  ErrorCode.LineItemLineItemMustBeManualReconciliation,
  ErrorCode.TransactionsInvalidLineItemCategory,
  ErrorCode.TransactionsInvalidTrade,
  ErrorCode.TransactionsLineItemIsAlreadyReconciled,
  ErrorCode.TransactionsLineItemMustHaveValue,
  ErrorCode.TransactionsLineItemsMinLength,
  ErrorCode.TransactionsLineItemsMustBeEmpty,
  ErrorCode.TransactionsLineItemsMustBeFunctionalCurrency,
  ErrorCode.TransactionsLineItemsMustBeNonFunctionalCurrency,
  ErrorCode.TransactionsLineItemsMustBeUniform,
  ErrorCode.TransactionsNumInstrumentsMigration,
  ErrorCode.TransactionsMustHaveSameTxid,
  ErrorCode.SecuritymasterPricingOverrideDuplicate,
  ErrorCode.SecuritymasterPrivateInstrumentSymbolDuplicate,
  ErrorCode.TransactionsTransferQuantitiesMismatch,
  ErrorCode.TransactionsPortfolioImportQuantitiesMismatch,
  ErrorCode.TransactionsAdjustmentQuantitiesMismatch,
  ErrorCode.TransactionsMustBeManualReconciled,
  ErrorCode.UserInvitationUserIsAlreadyInOrganization,
  ErrorCode.UserInvitationUserIsAlreadyInvited,
  ErrorCode.UserInvitationUserInvitationExpired,
  ErrorCode.UserInvitationUserInvitationNotAllowed,
  ErrorCode.TradeTradingDisabled,
  ErrorCode.TradeProductTradingDisabled,
  ErrorCode.TradeInsufficientFunds,
  ErrorCode.TradeInvalidPrice,
  ErrorCode.TradeInvalidQuantity,
  ErrorCode.TradeInvalidUserIntent,
  ErrorCode.TradeUnknownExchangeError,
  ErrorCode.TradeUnsupportedExchangeFeature,
  ErrorCode.TradeInternalError,
  ErrorCode.TradeInternalErrorOrderSpecificationNotSupported,
  ErrorCode.TradeInvalidStrategy,
  ErrorCode.TradeInvalidStrategyParams,
  ErrorCode.TradeNoTradingAccount,
  ErrorCode.TradeUnsupportedProduct,
  ErrorCode.TradeInsufficientExchangeBalance,
  ErrorCode.TradeNoOrderBooks,
  ErrorCode.TradeExchangeOrderNotFound,
  ErrorCode.TradeInvalidLimitPrice,
  ErrorCode.TradeInvalidTradeDuration,
  ErrorCode.TradeExchangeOrderQuantityTruncation,
  ErrorCode.TradeMarginNOPLimit,
  ErrorCode.TradeWillTriggerMarginCall,
  ErrorCode.TradeMarginBorrowLimit,
  ErrorCode.TradeWillTriggerLiquidation,
  ErrorCode.TradeMarginPendingLiquidation,
  ErrorCode.TradeMarginCheckError,
  ErrorCode.TradeUnableToProcess,
  ErrorCode.AddressBookInstitutionAddressDuplicateSameAddress,
  ErrorCode.AddressBookInstitutionAddressDuplicateAcrossAddress,
]

/// ////////////////////////////////////////////////////////////////////////////
// Enums
/// ////////////////////////////////////////////////////////////////////////////

export enum AccountingLineItemCategory {
  Adjustment = 'adjustment',
  BlockchainDistribution = 'blockchain_distribution',
  BlockchainFee = 'blockchain_fee',
  BlockchainInternalTransaction = 'blockchain_internal_transaction',
  BlockchainMigration = 'blockchain_migration',
  BlockchainMined = 'blockchain_mined',
  BlockchainTokenTransfer = 'blockchain_token_transfer',
  BlockchainTrade = 'blockchain_trade',
  BlockchainTradeFee = 'blockchain_trade_fee',
  BlockchainTransaction = 'blockchain_transaction',
  BlockchainTransactionChange = 'blockchain_transaction_change',
  Borrow = 'borrow',
  BrokerageFee = 'brokerage_fee',
  CloseMarginTrade = 'close_margin_trade',
  CompoundMint = 'compound_mint',
  CompoundRedeem = 'compound_redeem',
  ContractClose = 'contract_close',
  ContractFee = 'contract_fee',
  ContractFunding = 'contract_funding',
  ContractOpen = 'contract_open',
  ContractProfitAndLoss = 'contract_profit_and_loss',
  ContractRebate = 'contract_rebate',
  Conversion = 'conversion',
  Correction = 'correction',
  CustodianDepositFee = 'custodian_deposit_fee',
  CustodianWithdrawalFee = 'custodian_withdrawal_fee',
  Deposit = 'deposit',
  Distribution = 'distribution',
  EarnedInterest = 'earned_interest',
  ExchangeAirdrop = 'exchange_airdrop',
  ExchangeBlockTrade = 'exchange_block_trade',
  ExchangeDepositFee = 'exchange_deposit_fee',
  ExchangeListingFee = 'exchange_listing_fee',
  ExchangeReward = 'exchange_reward',
  ExchangeTradeFee = 'exchange_trade_fee',
  ExchangeTradeRebate = 'exchange_trade_rebate',
  ExchangeWithdrawalFee = 'exchange_withdrawal_fee',
  FailedBlockchainTransactionFee = 'failed_blockchain_transaction_fee',
  Fee = 'fee',
  InternalDeposit = 'internal_deposit',
  InternalWithdrawal = 'internal_withdrawal',
  Lend = 'lend',
  LendingFee = 'lending_fee',
  Liability = 'liability',
  MarginDifference = 'margin_difference',
  MarginFee = 'margin_fee',
  OpenMarginTrade = 'open_margin_trade',
  OtcFee = 'otc_fee',
  Other = 'other',
  PaidInterest = 'paid_interest',
  Rebase = 'rebase',
  ReceivePrincipal = 'receive_principal',
  ReconciledAdjustment = 'reconciled_adjustment',
  ReturnPrincipal = 'return_principal',
  Settlement = 'settlement',
  SettlementFee = 'settlement_fee',
  StakingReward = 'staking_reward',
  Theft = 'theft',
  TokenMigration = 'token_migration',
  Trade = 'trade',
  Transfer = 'transfer',
  TransferSettle = 'transfer_settle',
  Withdrawal = 'withdrawal',
}

export enum AccountingLineItemIgnoredReason {
  AccountedFor = 'accounted_for',
  UserIgnored = 'user_ignored',
}

export enum AccountingLineItemSourceType {
  API = 'api',
  Csv = 'csv',
  Manual = 'manual',
  System = 'system',
  SmartReconciliation = 'smart_reconciliation',
  ManualReconciliation = 'manual_reconciliation',
}

export enum AccountingLineItemType {
  Sent = 'sent',
  Received = 'received',
}

export enum AddressBookType {
  BlockchainAddress = 'blockchain_address',
}

export enum Aggression {
  Neutral = 'neutral',
  Aggressive = 'aggressive',
  Passive = 'passive',
  MarketPeg = 'market_peg',
}

export enum AlgoStrategy {
  SmartPost = 'smart_post',
  Sweep = 'sweep',
  Twap = 'twap',
  Limit = 'limit',
}

export enum BitgoWalletType {
  Cold = 'cold',
  Custodial = 'custodial',
  Custodialpaired = 'custodialPaired',
  Hot = 'hot',
  Trading = 'trading',
}

export enum BlockchainActionType {
  Staked = 'staked',
  Unstaked = 'unstaked',
  Unstaking = 'unstaking',
}

export enum CanceledReason {
  MarginCall = 'margin_call',
  BreachNopLimit = 'breach_nop_limit',
  BorrowLimit = 'borrow_limit',
  TriggerLiquidation = 'trigger_liquidation',
  PendingLiquidation = 'pending_liquidation',
}

export enum ChartOfAccountType {
  AccountsPayableAccountsPayable = 'accounts_payable_accounts_payable',
  AccountsPayableOutstandingDuesMicroSmallEnterprise = 'accounts_payable_outstanding_dues_micro_small_enterprise',
  AccountsPayableOutstandingDuesOtherThanMicroSmallEnterprise = 'accounts_payable_outstanding_dues_other_than_micro_small_enterprise',
  AccountsReceivableAccountsReceivable = 'accounts_receivable_accounts_receivable',
  BankCashAndCashEquivalents = 'bank_cash_and_cash_equivalents',
  BankCashOnHand = 'bank_cash_on_hand',
  BankChecking = 'bank_checking',
  BankMoneyMarket = 'bank_money_market',
  BankOtherEarMarkedBankAccounts = 'bank_other_ear_marked_bank_accounts',
  BankRentsHeldInTrust = 'bank_rents_held_in_trust',
  BankSavings = 'bank_savings',
  BankTrustAccounts = 'bank_trust_accounts',
  CostOfGoodsSoldCostOfLaborCos = 'cost_of_goods_sold_cost_of_labor_cos',
  CostOfGoodsSoldCostOfSales = 'cost_of_goods_sold_cost_of_sales',
  CostOfGoodsSoldEquipmentRentalCos = 'cost_of_goods_sold_equipment_rental_cos',
  CostOfGoodsSoldFreightAndDeliveryCost = 'cost_of_goods_sold_freight_and_delivery_cost',
  CostOfGoodsSoldOtherCostsOfServiceCos = 'cost_of_goods_sold_other_costs_of_service_cos',
  CostOfGoodsSoldShippingFreightDeliveryCos = 'cost_of_goods_sold_shipping_freight_delivery_cos',
  CostOfGoodsSoldSuppliesMaterialsCogs = 'cost_of_goods_sold_supplies_materials_cogs',
  CreditCardCreditCard = 'credit_card_credit_card',
  EquityAccumulatedAdjustment = 'equity_accumulated_adjustment',
  EquityAccumulatedOtherComprehensiveIncome = 'equity_accumulated_other_comprehensive_income',
  EquityCalledUpShareCapital = 'equity_called_up_share_capital',
  EquityCapitalReserves = 'equity_capital_reserves',
  EquityCommonStock = 'equity_common_stock',
  EquityDividendDisbursed = 'equity_dividend_disbursed',
  EquityEquityInEarningsOfSubsidiaries = 'equity_equity_in_earnings_of_subsidiaries',
  EquityEstimatedTaxes = 'equity_estimated_taxes',
  EquityFunds = 'equity_funds',
  EquityHealthcare = 'equity_healthcare',
  EquityInvestmentGrants = 'equity_investment_grants',
  EquityMoneyReceivedAgainstShareWarrants = 'equity_money_received_against_share_warrants',
  EquityOpeningBalanceEquity = 'equity_opening_balance_equity',
  EquityOtherFreeReserves = 'equity_other_free_reserves',
  EquityOwnersEquity = 'equity_owners_equity',
  EquityPaidInCapitalOrSurplus = 'equity_paid_in_capital_or_surplus',
  EquityPartnerContributions = 'equity_partner_contributions',
  EquityPartnerDistributions = 'equity_partner_distributions',
  EquityPartnersEquity = 'equity_partners_equity',
  EquityPersonalExpense = 'equity_personal_expense',
  EquityPersonalIncome = 'equity_personal_income',
  EquityPreferredStock = 'equity_preferred_stock',
  EquityRetainedEarnings = 'equity_retained_earnings',
  EquityShareApplicationMoneyPendingAllotment = 'equity_share_application_money_pending_allotment',
  EquityShareCapital = 'equity_share_capital',
  EquityTreasuryStock = 'equity_treasury_stock',
  ExpenseAdvertisingPromotional = 'expense_advertising_promotional',
  ExpenseAmortizationExpense = 'expense_amortization_expense',
  ExpenseAppropriationsToDepreciation = 'expense_appropriations_to_depreciation',
  ExpenseAuto = 'expense_auto',
  ExpenseBadDebts = 'expense_bad_debts',
  ExpenseBankCharges = 'expense_bank_charges',
  ExpenseBorrowingCost = 'expense_borrowing_cost',
  ExpenseCharitableContributions = 'expense_charitable_contributions',
  ExpenseCommissionsAndFees = 'expense_commissions_and_fees',
  ExpenseCostOfLabor = 'expense_cost_of_labor',
  ExpenseDistributionCosts = 'expense_distribution_costs',
  ExpenseDuesSubscriptions = 'expense_dues_subscriptions',
  ExpenseEntertainment = 'expense_entertainment',
  ExpenseEntertainmentMeals = 'expense_entertainment_meals',
  ExpenseEquipmentRental = 'expense_equipment_rental',
  ExpenseExternalServices = 'expense_external_services',
  ExpenseExtraordinaryCharges = 'expense_extraordinary_charges',
  ExpenseFinanceCosts = 'expense_finance_costs',
  ExpenseGlobalTaxExpense = 'expense_global_tax_expense',
  ExpenseIncomeTaxExpense = 'expense_income_tax_expense',
  ExpenseInsurance = 'expense_insurance',
  ExpenseInterestPaid = 'expense_interest_paid',
  ExpenseLegalProfessionalFees = 'expense_legal_professional_fees',
  ExpenseLossOnDiscontinuedOperationsNetOfTax = 'expense_loss_on_discontinued_operations_net_of_tax',
  ExpenseManagementCompensation = 'expense_management_compensation',
  ExpenseOfficeExpenses = 'expense_office_expenses',
  ExpenseOfficeGeneralAdministrativeExpenses = 'expense_office_general_administrative_expenses',
  ExpenseOtherBusinessExpenses = 'expense_other_business_expenses',
  ExpenseOtherCurrentOperatingCharges = 'expense_other_current_operating_charges',
  ExpenseOtherExternalServices = 'expense_other_external_services',
  ExpenseOtherMiscellaneousServiceCost = 'expense_other_miscellaneous_service_cost',
  ExpenseOtherRentalCosts = 'expense_other_rental_costs',
  ExpenseOtherSellingExpenses = 'expense_other_selling_expenses',
  ExpensePayrollExpenses = 'expense_payroll_expenses',
  ExpenseProjectStudiesSurveysAssessments = 'expense_project_studies_surveys_assessments',
  ExpensePromotionalMeals = 'expense_promotional_meals',
  ExpensePurchasesRebates = 'expense_purchases_rebates',
  ExpenseRentOrLeaseOfBuildings = 'expense_rent_or_lease_of_buildings',
  ExpenseRepairMaintenance = 'expense_repair_maintenance',
  ExpenseShippingAndDeliveryExpense = 'expense_shipping_and_delivery_expense',
  ExpenseShippingFreightDelivery = 'expense_shipping_freight_delivery',
  ExpenseStaffCosts = 'expense_staff_costs',
  ExpenseSundry = 'expense_sundry',
  ExpenseSuppliesMaterials = 'expense_supplies_materials',
  ExpenseTaxesPaid = 'expense_taxes_paid',
  ExpenseTravel = 'expense_travel',
  ExpenseTravelExpensesGeneralAndAdminExpenses = 'expense_travel_expenses_general_and_admin_expenses',
  ExpenseTravelExpensesSellingExpense = 'expense_travel_expenses_selling_expense',
  ExpenseTravelMeals = 'expense_travel_meals',
  ExpenseUnappliedCashBillPaymentExpense = 'expense_unapplied_cash_bill_payment_expense',
  ExpenseUtilities = 'expense_utilities',
  FixedAssetAccumulatedAmortization = 'fixed_asset_accumulated_amortization',
  FixedAssetAccumulatedDepletion = 'fixed_asset_accumulated_depletion',
  FixedAssetAccumulatedDepreciation = 'fixed_asset_accumulated_depreciation',
  FixedAssetAssetsInCourseOfConstruction = 'fixed_asset_assets_in_course_of_construction',
  FixedAssetBuildings = 'fixed_asset_buildings',
  FixedAssetCapitalWip = 'fixed_asset_capital_wip',
  FixedAssetCumulativeDepreciationOnIntangibleAssets = 'fixed_asset_cumulative_depreciation_on_intangible_assets',
  FixedAssetDepletableAssets = 'fixed_asset_depletable_assets',
  FixedAssetFixedAssetComputers = 'fixed_asset_fixed_asset_computers',
  FixedAssetFixedAssetCopiers = 'fixed_asset_fixed_asset_copiers',
  FixedAssetFixedAssetFurniture = 'fixed_asset_fixed_asset_furniture',
  FixedAssetFixedAssetOtherToolsEquipment = 'fixed_asset_fixed_asset_other_tools_equipment',
  FixedAssetFixedAssetPhone = 'fixed_asset_fixed_asset_phone',
  FixedAssetFixedAssetPhotoVideo = 'fixed_asset_fixed_asset_photo_video',
  FixedAssetFixedAssetSoftware = 'fixed_asset_fixed_asset_software',
  FixedAssetFurnitureAndFixtures = 'fixed_asset_furniture_and_fixtures',
  FixedAssetIntangibleAssets = 'fixed_asset_intangible_assets',
  FixedAssetIntangibleAssetsUnderDevelopment = 'fixed_asset_intangible_assets_under_development',
  FixedAssetLand = 'fixed_asset_land',
  FixedAssetLandAsset = 'fixed_asset_land_asset',
  FixedAssetLeaseholdImprovements = 'fixed_asset_leasehold_improvements',
  FixedAssetMachineryAndEquipment = 'fixed_asset_machinery_and_equipment',
  FixedAssetNonCurrentAssets = 'fixed_asset_non_current_assets',
  FixedAssetOtherFixedAssets = 'fixed_asset_other_fixed_assets',
  FixedAssetParticipatingInterests = 'fixed_asset_participating_interests',
  FixedAssetProvisionsFixedAssets = 'fixed_asset_provisions_fixed_assets',
  FixedAssetVehicles = 'fixed_asset_vehicles',
  IncomeCashReceiptIncome = 'income_cash_receipt_income',
  IncomeDiscountsRefundsGiven = 'income_discounts_refunds_given',
  IncomeNonProfitIncome = 'income_non_profit_income',
  IncomeOperatingGrants = 'income_operating_grants',
  IncomeOtherCurrentOperatingIncome = 'income_other_current_operating_income',
  IncomeOtherPrimaryIncome = 'income_other_primary_income',
  IncomeOwnWorkCapitalized = 'income_own_work_capitalized',
  IncomeRevenueGeneral = 'income_revenue_general',
  IncomeSalesOfProductIncome = 'income_sales_of_product_income',
  IncomeSalesRetail = 'income_sales_retail',
  IncomeSalesWholesale = 'income_sales_wholesale',
  IncomeSavingsByTaxScheme = 'income_savings_by_tax_scheme',
  IncomeServiceFeeIncome = 'income_service_fee_income',
  IncomeUnappliedCashPaymentIncome = 'income_unapplied_cash_payment_income',
  LongTermLiabilityAccrualsAndDeferredIncome = 'long_term_liability_accruals_and_deferred_income',
  LongTermLiabilityAccruedLongLermLiabilities = 'long_term_liability_accrued_long_lerm_liabilities',
  LongTermLiabilityAccruedVacationPayable = 'long_term_liability_accrued_vacation_payable',
  LongTermLiabilityBankLoans = 'long_term_liability_bank_loans',
  LongTermLiabilityDebtsRelatedToParticipatingInterests = 'long_term_liability_debts_related_to_participating_interests',
  LongTermLiabilityDeferredTaxLiabilities = 'long_term_liability_deferred_tax_liabilities',
  LongTermLiabilityGovernmentAndOtherPublicAuthorities = 'long_term_liability_government_and_other_public_authorities',
  LongTermLiabilityGroupAndAssociates = 'long_term_liability_group_and_associates',
  LongTermLiabilityLiabilitiesRelatedToAssetsHeldForSale = 'long_term_liability_liabilities_related_to_assets_held_for_sale',
  LongTermLiabilityLongTermBorrowings = 'long_term_liability_long_term_borrowings',
  LongTermLiabilityLongTermDebit = 'long_term_liability_long_term_debit',
  LongTermLiabilityLongTermEmployeeBenefitObligations = 'long_term_liability_long_term_employee_benefit_obligations',
  LongTermLiabilityNotesPayable = 'long_term_liability_notes_payable',
  LongTermLiabilityObligationsUnderFinanceLeases = 'long_term_liability_obligations_under_finance_leases',
  LongTermLiabilityOtherLongTermLiabilities = 'long_term_liability_other_long_term_liabilities',
  LongTermLiabilityOtherLongTermProvisions = 'long_term_liability_other_long_term_provisions',
  LongTermLiabilityProvisionForLiabilities = 'long_term_liability_provision_for_liabilities',
  LongTermLiabilityProvisionsNonCurrentLiabilities = 'long_term_liability_provisions_non_current_liabilities',
  LongTermLiabilityShareholderNotesPayable = 'long_term_liability_shareholder_notes_payable',
  LongTermLiabilityStaffAndRelatedLongTermLiabilityAccounts = 'long_term_liability_staff_and_related_long_term_liability_accounts',
  OtherAssetAccumulatedAmortizationOfOtherAssets = 'other_asset_accumulated_amortization_of_other_assets',
  OtherAssetAssetsHeldForSale = 'other_asset_assets_held_for_sale',
  OtherAssetAvailableForSaleFinancialAssets = 'other_asset_available_for_sale_financial_assets',
  OtherAssetDeferredTax = 'other_asset_deferred_tax',
  OtherAssetGoodwill = 'other_asset_goodwill',
  OtherAssetInvestments = 'other_asset_investments',
  OtherAssetLeaseBuyout = 'other_asset_lease_buyout',
  OtherAssetLicenses = 'other_asset_licenses',
  OtherAssetLongTermInvestments = 'other_asset_long_term_investments',
  OtherAssetLongTermLoansAndAdvancesToRelatedParties = 'other_asset_long_term_loans_and_advances_to_related_parties',
  OtherAssetOrganizationalCosts = 'other_asset_organizational_costs',
  OtherAssetOtherIntangibleAssets = 'other_asset_other_intangible_assets',
  OtherAssetOtherLongTermAssets = 'other_asset_other_long_term_assets',
  OtherAssetOtherLongTermInvestments = 'other_asset_other_long_term_investments',
  OtherAssetOtherLongTermLoansAndAdvances = 'other_asset_other_long_term_loans_and_advances',
  OtherAssetPrepaymentsAndAccruedIncome = 'other_asset_prepayments_and_accrued_income',
  OtherAssetProvisionsNonCurrentAssets = 'other_asset_provisions_non_current_assets',
  OtherAssetSecurityDeposits = 'other_asset_security_deposits',
  OtherCurrentAssetAllowanceForBadDebts = 'other_current_asset_allowance_for_bad_debts',
  OtherCurrentAssetAssetsAvailableForSale = 'other_current_asset_assets_available_for_sale',
  OtherCurrentAssetBalWithGovtAuthorities = 'other_current_asset_bal_with_govt_authorities',
  OtherCurrentAssetCalledUpShareCapitalNotPaid = 'other_current_asset_called_up_share_capital_not_paid',
  OtherCurrentAssetDevelopmentCosts = 'other_current_asset_development_costs',
  OtherCurrentAssetEmployeeCashAdvances = 'other_current_asset_employee_cash_advances',
  OtherCurrentAssetExpenditureAuthorizationsAndLettersOfCredit = 'other_current_asset_expenditure_authorizations_and_letters_of_credit',
  OtherCurrentAssetGlobalTaxDeferred = 'other_current_asset_global_tax_deferred',
  OtherCurrentAssetGlobalTaxRefund = 'other_current_asset_global_tax_refund',
  OtherCurrentAssetInternalTransfers = 'other_current_asset_internal_transfers',
  OtherCurrentAssetInventory = 'other_current_asset_inventory',
  OtherCurrentAssetInvestmentMortgageRealEstateLoans = 'other_current_asset_investment_mortgage_real_estate_loans',
  OtherCurrentAssetInvestmentOther = 'other_current_asset_investment_other',
  OtherCurrentAssetInvestmentTaxExemptSecurities = 'other_current_asset_investment_tax_exempt_securities',
  OtherCurrentAssetInvestmentUsGovernmentObligations = 'other_current_asset_investment_us_government_obligations',
  OtherCurrentAssetLoansToOfficers = 'other_current_asset_loans_to_officers',
  OtherCurrentAssetLoansToOthers = 'other_current_asset_loans_to_others',
  OtherCurrentAssetLoansToStockholders = 'other_current_asset_loans_to_stockholders',
  OtherCurrentAssetOtherConsumables = 'other_current_asset_other_consumables',
  OtherCurrentAssetOtherCurrentAssets = 'other_current_asset_other_current_assets',
  OtherCurrentAssetPrepaidExpenses = 'other_current_asset_prepaid_expenses',
  OtherCurrentAssetProvisionsCurrentAssets = 'other_current_asset_provisions_current_assets',
  OtherCurrentAssetRetainage = 'other_current_asset_retainage',
  OtherCurrentAssetShortTermInvestmentsInRelatedParties = 'other_current_asset_short_term_investments_in_related_parties',
  OtherCurrentAssetShortTermLoansAndAdvancesToRelatedParties = 'other_current_asset_short_term_loans_and_advances_to_related_parties',
  OtherCurrentAssetTradeAndOtherReceivables = 'other_current_asset_trade_and_other_receivables',
  OtherCurrentAssetUndepositedFunds = 'other_current_asset_undeposited_funds',
  OtherCurrentLiabilityAccruedLiabilities = 'other_current_liability_accrued_liabilities',
  OtherCurrentLiabilityCurrentLiabilities = 'other_current_liability_current_liabilities',
  OtherCurrentLiabilityCurrentPortionEmployeeBenefitsObligations = 'other_current_liability_current_portion_employee_benefits_obligations',
  OtherCurrentLiabilityCurrentPortionOfObligationsUnderFinanceLeases = 'other_current_liability_current_portion_of_obligations_under_finance_leases',
  OtherCurrentLiabilityCurrentTaxLiability = 'other_current_liability_current_tax_liability',
  OtherCurrentLiabilityDirectDepositPayable = 'other_current_liability_direct_deposit_payable',
  OtherCurrentLiabilityDividendsPayable = 'other_current_liability_dividends_payable',
  OtherCurrentLiabilityDutiesAndTaxes = 'other_current_liability_duties_and_taxes',
  OtherCurrentLiabilityFederalIncomeTaxPayable = 'other_current_liability_federal_income_tax_payable',
  OtherCurrentLiabilityGlobalTaxPayable = 'other_current_liability_global_tax_payable',
  OtherCurrentLiabilityGlobalTaxSuspense = 'other_current_liability_global_tax_suspense',
  OtherCurrentLiabilityInsurancePayable = 'other_current_liability_insurance_payable',
  OtherCurrentLiabilityInterestPayables = 'other_current_liability_interest_payables',
  OtherCurrentLiabilityLineOfCredit = 'other_current_liability_line_of_credit',
  OtherCurrentLiabilityLoanPayable = 'other_current_liability_loan_payable',
  OtherCurrentLiabilityOtherCurrentLiabilities = 'other_current_liability_other_current_liabilities',
  OtherCurrentLiabilityPayrollClearing = 'other_current_liability_payroll_clearing',
  OtherCurrentLiabilityPayrollTaxPayable = 'other_current_liability_payroll_tax_payable',
  OtherCurrentLiabilityPrepaidExpensesPayable = 'other_current_liability_prepaid_expenses_payable',
  OtherCurrentLiabilityProvisionForWarrantyObligations = 'other_current_liability_provision_for_warranty_obligations',
  OtherCurrentLiabilityProvisionsCurrentLiabilities = 'other_current_liability_provisions_current_liabilities',
  OtherCurrentLiabilityRentsInTrustLiability = 'other_current_liability_rents_in_trust_liability',
  OtherCurrentLiabilitySalesTaxPayable = 'other_current_liability_sales_tax_payable',
  OtherCurrentLiabilityShortTermBorrowings = 'other_current_liability_short_term_borrowings',
  OtherCurrentLiabilitySocialSecurityAgencies = 'other_current_liability_social_security_agencies',
  OtherCurrentLiabilityStaffAndRelatedLiabilityAccounts = 'other_current_liability_staff_and_related_liability_accounts',
  OtherCurrentLiabilityStateLocalIncomeTaxPayable = 'other_current_liability_state_local_income_tax_payable',
  OtherCurrentLiabilitySundryDebtorsAndCreditors = 'other_current_liability_sundry_debtors_and_creditors',
  OtherCurrentLiabilityTradeAndOtherPayables = 'other_current_liability_trade_and_other_payables',
  OtherCurrentLiabilityTrustAccountsLiabilities = 'other_current_liability_trust_accounts_liabilities',
  OtherExpenseAmortization = 'other_expense_amortization',
  OtherExpenseDeferredTaxExpense = 'other_expense_deferred_tax_expense',
  OtherExpenseDepletion = 'other_expense_depletion',
  OtherExpenseDepreciation = 'other_expense_depreciation',
  OtherExpenseExceptionalItems = 'other_expense_exceptional_items',
  OtherExpenseExchangeGainOrLoss = 'other_expense_exchange_gain_or_loss',
  OtherExpenseExtraordinaryItems = 'other_expense_extraordinary_items',
  OtherExpenseGasAndFuel = 'other_expense_gas_and_fuel',
  OtherExpenseHomeOffice = 'other_expense_home_office',
  OtherExpenseHomeOwnerRentalInsurance = 'other_expense_home_owner_rental_insurance',
  OtherExpenseIncomeTaxOtherExpense = 'other_expense_income_tax_other_expense',
  OtherExpenseMatCredit = 'other_expense_mat_credit',
  OtherExpenseMortgageInterest = 'other_expense_mortgage_interest',
  OtherExpenseOtherHomeOfficeExpenses = 'other_expense_other_home_office_expenses',
  OtherExpenseOtherMiscellaneousExpense = 'other_expense_other_miscellaneous_expense',
  OtherExpenseOtherVehicleExpenses = 'other_expense_other_vehicle_expenses',
  OtherExpenseParkingAndTolls = 'other_expense_parking_and_tolls',
  OtherExpensePenaltiesSettlements = 'other_expense_penalties_settlements',
  OtherExpensePriorPeriodItems = 'other_expense_prior_period_items',
  OtherExpenseRentAndLease = 'other_expense_rent_and_lease',
  OtherExpenseRepairsAndMaintenance = 'other_expense_repairs_and_maintenance',
  OtherExpenseTaxRoundoffGainOrLoss = 'other_expense_tax_roundoff_gain_or_loss',
  OtherExpenseUtilities = 'other_expense_utilities',
  OtherExpenseVehicle = 'other_expense_vehicle',
  OtherExpenseVehicleInsurance = 'other_expense_vehicle_insurance',
  OtherExpenseVehicleLease = 'other_expense_vehicle_lease',
  OtherExpenseVehicleLoan = 'other_expense_vehicle_loan',
  OtherExpenseVehicleLoanInterest = 'other_expense_vehicle_loan_interest',
  OtherExpenseVehicleRegistration = 'other_expense_vehicle_registration',
  OtherExpenseVehicleRepairs = 'other_expense_vehicle_repairs',
  OtherExpenseWashAndRoadServices = 'other_expense_wash_and_road_services',
  OtherIncomeDividendIncome = 'other_income_dividend_income',
  OtherIncomeGainLossOnSaleOfFixedAssets = 'other_income_gain_loss_on_sale_of_fixed_assets',
  OtherIncomeGainLossOnSaleOfInvestments = 'other_income_gain_loss_on_sale_of_investments',
  OtherIncomeInterestEarned = 'other_income_interest_earned',
  OtherIncomeLossOnDisposalOfAssets = 'other_income_loss_on_disposal_of_assets',
  OtherIncomeOtherInvestmentIncome = 'other_income_other_investment_income',
  OtherIncomeOtherMiscellaneousIncome = 'other_income_other_miscellaneous_income',
  OtherIncomeOtherOperatingIncome = 'other_income_other_operating_income',
  OtherIncomeTaxExemptInterest = 'other_income_tax_exempt_interest',
  OtherIncomeUnrealisedLossOnSecuritiesNetOfTax = 'other_income_unrealised_loss_on_securities_net_of_tax',
}

export enum ClientOrderUserIntent {
  Funds = 'funds',
  Quantity = 'quantity',
}

export enum CollateralType {
  Margin = 'margin',
  Funded = 'funded',
}

export enum ConversionType {
  Direct = 'direct',
  Inverse = 'inverse',
  Invert = 'invert',
  Multiply = 'multiply',
  Divide = 'divide',
  InvertMultiple = 'invert_multiple',
  InvertDivide = 'invert_divide',
}

export enum CredentialsType {
  APIKey = 'api_key',
  Oauth = 'oauth',
  Sftp = 'sftp',
  Internal = 'internal',
}

export enum DayOfWeek {
  Monday = 'Monday',
  Tuesday = 'Tuesday',
  Wednesday = 'Wednesday',
  Thursday = 'Thursday',
  Friday = 'Friday',
  Saturday = 'Saturday',
  Sunday = 'Sunday',
}

export enum EncryptionKeyType {
  AmazonKeyManagementService = 'amazon_key_management_service',
  LocalKey = 'local_key',
}

export enum EnterpriseTier {
  Basic = 'basic',
  Professional = 'professional',
  Institutional = 'institutional',
}

export enum EntityStatus {
  Deleted = 'deleted',
  Error = 'error',
  Idle = 'idle',
  Processing = 'processing',
  Archived = 'archived',
  Deleting = 'deleting',
}

export enum EntityType {
  AccountingLineItem = 'accounting_line_item',
  ClientOrder = 'client_order',
  ExchangeOrder = 'exchange_order',
  FinancialAccount = 'financial_account',
  FinancialAccountConnection = 'financial_account_connection',
  FinancialTransaction = 'financial_transaction',
  Instrument = 'instrument',
  InvestorProfile = 'investor_profile',
  LuminaUser = 'lumina_user',
  Organization = 'organization',
  Portfolio = 'portfolio',
  UserAccount = 'user_account',
  UserInvitation = 'user_invitation',
}

export enum EventName {
  AcceptInvitation = 'accept_invitation',
  Add = 'add',
  AddFile = 'add_file',
  ComputeTax = 'compute_tax',
  Delete = 'delete',
  DeleteFile = 'delete_file',
  DisableTwoFactorAuthentication = 'disable_two_factor_authentication',
  EnableTwoFactorAuthentication = 'enable_two_factor_authentication',
  Left = 'left',
  LogIn = 'log_in',
  LogOut = 'log_out',
  Reset = 'reset',
  ResetPassword = 'reset_password',
  Sync = 'sync',
  Update = 'update',
  UpdatePassword = 'update_password',
}

export enum ExchangeOrderQuantityType {
  Base = 'base',
  Quote = 'quote',
}

export enum FileStorageType {
  Local = 'local',
  AmazonSimpleStorageService = 'amazon_simple_storage_service',
  GoogleCloudStorage = 'google_cloud_storage',
}

export enum FinancialAccountConnectionSyncStatus {
  Idle = 'idle',
  Scheduled = 'scheduled',
  Processing = 'processing',
  Error = 'error',
}

export enum FinancialAccountType {
  Checking = 'checking',
  Exchange = 'exchange',
  Savings = 'savings',
  BlockchainWallet = 'blockchain_wallet',
  CustodialWallet = 'custodial_wallet',
  UnaccountedAssets = 'unaccounted_assets',
  BlockchainHdWallet = 'blockchain_hd_wallet',
  Custom = 'custom',
  Broker = 'broker',
  BlockchainMultisigWallet = 'blockchain_multisig_wallet',
  TradingWallet = 'trading_wallet',
  Collateral = 'collateral',
  Margin = 'margin',
}

export enum FinancialConnectionCredentialsType {
  APIKey = 'api_key',
  Oauth = 'oauth',
  Blockchain = 'blockchain',
  None = 'none',
  PublicAddress = 'public_address',
  Sftp = 'sftp',
  Internal = 'internal',
}

export enum FinancialConnectionType {
  API = 'api',
  Manual = 'manual',
  System = 'system',
  Unsupported = 'unsupported',
}

export enum FinancialTransactionSourceType {
  Manual = 'manual',
  Csv = 'csv',
  AutoResolution = 'auto_resolution',
  SmartResolution = 'smart_resolution',
}

export enum FinancialTransactionSubtype {
  BlockchainMigration = 'blockchain_migration',
  Borrow = 'borrow',
  Buy = 'buy',
  BuyCloseContract = 'buy_close_contract',
  BuyCloseShort = 'buy_close_short',
  BuyCorrection = 'buy_correction',
  BuyOpenContract = 'buy_open_contract',
  BuySettleContract = 'buy_settle_contract',
  BuySettleShort = 'buy_settle_short',
  CashReceiveCollateral = 'cash_receive_collateral',
  CashSendCollateral = 'cash_send_collateral',
  ContractSettlementLoss = 'contract_settlement_loss',
  ContractSettlementProfit = 'contract_settlement_profit',
  Conversion = 'conversion',
  Deposit = 'deposit',
  InitialTransferIn = 'initial_transfer_in',
  InterestEarned = 'interest_earned',
  InterestPaid = 'interest_paid',
  Lend = 'lend',
  ReceiveAirdrop = 'receive_airdrop',
  ReceiveContractFunding = 'receive_contract_funding',
  ReceiveEarned = 'receive_earned',
  ReceiveFork = 'receive_fork',
  ReceiveGift = 'receive_gift',
  ReceiveMined = 'receive_mined',
  ReceivePrincipal = 'receive_principal',
  ReceiveReward = 'receive_reward',
  Restaked = 'restaked',
  ReturnPrincipal = 'return_principal',
  Sell = 'sell',
  SellCloseContract = 'sell_close_contract',
  SellCorrection = 'sell_correction',
  SellOpenContract = 'sell_open_contract',
  SellOpenShort = 'sell_open_short',
  SellSendTransferOut = 'sell_send_transfer_out',
  SellSettleContract = 'sell_settle_contract',
  SendContractFunding = 'send_contract_funding',
  SendGift = 'send_gift',
  SendPaid = 'send_paid',
  SendTheft = 'send_theft',
  Staked = 'staked',
  StakingReward = 'staking_reward',
  TokenMigration = 'token_migration',
  Transfer = 'transfer',
  TransferIn = 'transfer_in',
  TransferOut = 'transfer_out',
  TransferRedemption = 'transfer_redemption',
  TransferSubscription = 'transfer_subscription',
  Unstaked = 'unstaked',
  Unstaking = 'unstaking',
  Withdraw = 'withdraw',
}

export enum FinancialTransactionType {
  Buy = 'buy',
  Cash = 'cash',
  DividendsInterestFees = 'dividends_interest_fees',
  Pending = 'pending',
  Sell = 'sell',
  Transfer = 'transfer',
  Cancel = 'cancel',
  BlockchainAction = 'blockchain_action',
}

export enum GraphqlRole {
  Admin = 'admin',
  Member = 'member',
  ReadOnly = 'read_only',
  LuminaUser = 'lumina_user',
}

export enum HistoricalPriceType {
  Day = 'day',
  Hour = 'hour',
  Minute = 'minute',
}

export enum InstitutionType {
  Blockchain = 'blockchain',
  Custodian = 'custodian',
  Exchange = 'exchange',
  System = 'system',
  BankIntegration = 'bank_integration',
  Bank = 'bank',
  OtcDesk = 'otc_desk',
  InvestmentVehicle = 'investment_vehicle',
  Custom = 'custom',
  DataProvider = 'data_provider',
  DecentralizedExchange = 'decentralized_exchange',
  Broker = 'broker',
  HardwareWallet = 'hardware_wallet',
  Individual = 'individual',
  Entity = 'entity',
}

export enum InstrumentDigitalAssetType {
  Blockchain = 'blockchain',
  Token = 'token',
}

export enum InstrumentType {
  Currency = 'currency',
  DigitalAsset = 'digital_asset',
  Derivative = 'derivative',
  Index = 'index',
  Commodity = 'commodity',
}

export enum IntegrationType {
  Sftp = 'sftp',
}

export enum Interval {
  Minute = 'minute',
  Hour = 'hour',
  Day = 'day',
  Month = 'month',
}

export enum InvestorProfileType {
  Individual = 'individual',
  Business = 'business',
  Trust = 'trust',
}

export enum LastSyncResult {
  Success = 'success',
  Discrepancies = 'discrepancies',
  Maintenance = 'maintenance',
  CsvRequired = 'csv_required',
  InvalidCredential = 'invalid_credential',
  UnknownErr = 'unknown_err',
  APIDown = 'API_down',
  APIRateLimitExceeded = 'api_rate_limit_exceeded',
}

export enum LegacyUserAccountRole {
  Admin = 'admin',
  Member = 'member',
  ReadOnly = 'read_only',
}

export enum LuminaLedgerType {
  ExchangeTrade = 'exchange_trade',
  ExchangeDeposit = 'exchange_deposit',
  ExchangeWithdrawal = 'exchange_withdrawal',
  ExchangeTradeFee = 'exchange_trade_fee',
  ExchangeWithdrawalFee = 'exchange_withdrawal_fee',
}

export enum MarginTransferType {
  Collateral = 'collateral',
  Position = 'position',
}

export enum MetadataMigrationType {
  BitgoTradeProduct = 'bitgo_trade_product',
  CustomProduct = 'custom_product',
  ExchangeTradeProduct = 'exchange_trade_product',
  PortfolioProduct = 'portfolio_product',
  TestBitgoTradeProduct = 'test_bitgo_trade_product',
  TestExchangeTradeProduct = 'test_exchange_trade_product',
  CustomInstrument = 'custom_instrument',
  DefaultInstrument = 'default_instrument',
  Institution = 'institution',
}

export enum OS {
  Mac = 'mac',
  Ios = 'ios',
  Windows = 'windows',
  WindowsMobile = 'windows_mobile',
  Linux = 'linux',
  Android = 'android',
  Chrome = 'chrome',
  Web = 'web',
  Blackberry = 'blackberry',
  Palm = 'palm',
  Kindle = 'kindle',
  Xbox = 'xbox',
  Nintendo = 'nintendo',
  Playstation = 'playstation',
  Unknown = 'unknown',
}

export enum OrderBy {
  Asc = 'asc',
  AscIgnoreCase = 'asc_ignore_case',
  Desc = 'desc',
  DescIgnoreCase = 'desc_ignore_case',
}

export enum OrderSide {
  Buy = 'buy',
  Sell = 'sell',
}

export enum OrderStatus {
  Open = 'open',
  Canceled = 'canceled',
  Completed = 'completed',
  Error = 'error',
  PendingOpen = 'pending_open',
  PendingCancel = 'pending_cancel',
  Scheduled = 'scheduled',
}

export enum OrderType {
  Limit = 'limit',
  Market = 'market',
  Stop = 'stop',
  StopLimit = 'stop_limit',
}

export enum OrganizationStatus {
  Waitlisted = 'waitlisted',
  Onboarding = 'onboarding',
  Active = 'active',
  Suspended = 'suspended',
}

export enum PortfolioPricingSourceType {
  CryptoCompare = 'crypto_compare',
  Lumina = 'lumina',
}

export enum PortfolioReportingFallbackPricingSourceType {
  CryptoCompare = 'crypto_compare',
  Lumina = 'lumina',
}

export enum PortfolioReportingPricingSourceType {
  CryptoCompare = 'crypto_compare',
  CoinMarketCap = 'coin_market_cap',
  Binance = 'binance',
  BinanceUs = 'binance_us',
}

export enum PortfolioTaxLotIDByType {
  Connection = 'connection',
  Portfolio = 'portfolio',
  Account = 'account',
}

export enum PortfolioTaxLotIDMethodType {
  Fifo = 'fifo',
  Lifo = 'lifo',
  Hifo = 'hifo',
  Lofo = 'lofo',
  AverageCost = 'average_cost',
}

export enum PortfolioTransactionCryptoFiatPricingSourceType {
  CryptoCompare = 'crypto_compare',
  CoinbasePrime = 'coinbase_prime',
  BinanceUs = 'binance_us',
}

export enum PortfolioTransactionFallbackPricingSourceType {
  CryptoCompare = 'crypto_compare',
  Binance = 'binance',
  BinanceUs = 'binance_us',
}

export enum PortfolioTransactionPricingSourceType {
  CryptoCompare = 'crypto_compare',
  Exchange = 'exchange',
}

export enum PositionComputationStatusType {
  Processed = 'processed',
  Processing = 'processing',
  Scheduled = 'scheduled',
  NotReconciled = 'not_reconciled',
  HasDiscrepancies = 'has_discrepancies',
  Error = 'error',
  Empty = 'empty',
}

export enum PositionTermType {
  Long = 'long',
  Short = 'short',
  Undetermined = 'undetermined',
}

export enum PositionType {
  Opened = 'opened',
  Closed = 'closed',
  ClosedTransferred = 'closed_transferred',
  Split = 'split',
  Invalidated = 'invalidated',
}

export enum PriceIntervalType {
  Day = 'day',
  Hour = 'hour',
  Minute = 'minute',
  Point = 'point',
}

export enum ProcessingStatus {
  Pending = 'pending',
  Processing = 'processing',
  Completed = 'completed',
}

export enum ReportType {
  Form8949 = 'form_8949',
  ExchangeBalancesReport = 'exchange_balances_report',
  HoldingsReport = 'holdings_report',
  HoldingsByAccountReport = 'holdings_by_account_report',
  HoldingsByAccountAndBlockchainAddressReport = 'holdings_by_account_and_blockchain_address_report',
  LineItemsReport = 'line_items_report',
  DetailLineItemsReport = 'detail_line_items_report',
  OpenPositionsReport = 'open_positions_report',
  OpenPositionsByInstrumentReport = 'open_positions_by_instrument_report',
  OpenPositionsByInstrumentAndAccountReport = 'open_positions_by_instrument_and_account_report',
  PositionsReport = 'positions_report',
  PurchaseSalesJournalReport = 'purchase_sales_journal_report',
  RealizedReport = 'realized_report',
  AggregatePricingReport = 'aggregate_pricing_report',
  AtwebTransactionsReport = 'atweb_transactions_report',
  AtwebPricingReport = 'atweb_pricing_report',
  AdventGenevaTransactionsReport = 'advent_geneva_transactions_report',
  AdventGenevaPricingReport = 'advent_geneva_pricing_report',
  AdventGenevaTransfersReport = 'advent_geneva_transfers_report',
  TransactionsReport = 'transactions_report',
  TransferTransactionsReport = 'transfer_transactions_report',
  BalanceSheet = 'balance_sheet',
  IncomeStatement = 'income_statement',
  TrialBalance = 'trial_balance',
  InternalClientOrdersReport = 'internal_client_orders_report',
  InternalDetailLineItemsReport = 'internal_detail_line_items_report',
  InternalExchangeOrdersReport = 'internal_exchange_orders_report',
  InternalExchangeFillsReport = 'internal_exchange_fills_report',
  InternalHistoricalOrderBookReport = 'internal_historical_order_book_report',
  InternalTradeblockInboundOrdersReport = 'internal_tradeblock_inbound_orders_report',
  InternalTradeblockOutboundOrdersReport = 'internal_tradeblock_outbound_orders_report',
  InternalTransactionsReport = 'internal_transactions_report',
  ManualReconciledTransactionsExport = 'manual_reconciled_transactions_export',
  PortfolioExport = 'portfolio_export',
  InternalPortfolioExport = 'internal_portfolio_export',
  InternalTasksExport = 'internal_tasks_export',
  InternalInstrumentsExport = 'internal_instruments_export',
  InternalExchangeProductsExport = 'internal_exchange_products_export',
  InternalInstitutionsExport = 'internal_institutions_export',
}

export enum ScopeEntity {
  BitgoOrganization = 'bitgo_organization',
  BitgoEnterprise = 'bitgo_enterprise',
  BitgoWallet = 'bitgo_wallet',
}

export enum SettlementStatus {
  Staged = 'staged',
  Canceled = 'canceled',
  Settled = 'settled',
}

export enum SourceType {
  Webapp = 'webapp',
  APIRest = 'api_rest',
  APIFix = 'api_fix',
}

export enum SyncFrequencyType {
  Daily = 'daily',
  Hourly = 'hourly',
}

export enum TaskPriority {
  High = 'high',
  Default = 'default',
  Low = 'low',
}

export enum TaskSource {
  User = 'user',
  CronJobHourlySync = 'cron_job_hourly_sync',
  CronJobDailySync = 'cron_job_daily_sync',
  CronJobBalanceSync = 'cron_job_balance_sync',
  CronJobPortfolioCleanup = 'cron_job_portfolio_cleanup',
  EventService = 'event_service',
}

export enum TaskStatus {
  Scheduled = 'scheduled',
  Processing = 'processing',
  Success = 'success',
  Failure = 'failure',
}

export enum TimeInForce {
  Gtc = 'GTC',
  Gtt = 'GTT',
  Ioc = 'IOC',
  Fok = 'FOK',
}

export enum TradeblockInboundOrderStatus {
  InProgress = 'in_progress',
  Completed = 'completed',
}

export enum TradeblockOrderDataType {
  Fill = 'fill',
  Trade = 'trade',
}

export enum TradeblockOutboundOrderStatus {
  Pending = 'pending',
  Completed = 'completed',
  Error = 'error',
}

export enum TransferStatus {
  Signed = 'signed',
  Unconfirmed = 'unconfirmed',
  Confirmed = 'confirmed',
  PendingApproval = 'pending_approval',
  Removed = 'removed',
  Failed = 'failed',
  Rejected = 'rejected',
}

export enum UserAuthenticatorType {
  Otp = 'otp',
}

export enum UserIdentityType {
  Email = 'email',
  Phone = 'phone',
  Oauth = 'oauth',
}

export enum UserSessionType {
  Custom = 'custom',
  Oauth = 'oauth',
}

export enum WebBrowser {
  App = 'app',
  Ie = 'ie',
  Edge = 'edge',
  Opera = 'opera',
  Firefox = 'firefox',
  Chrome = 'chrome',
  Safari = 'safari',
  Silk = 'silk',
  Qq = 'qq',
  Samsung = 'samsung',
  Yandex = 'yandex',
  Nintendo = 'nintendo',
  Spotify = 'spotify',
  Bot = 'bot',
  Unknown = 'unknown',
}

/// ////////////////////////////////////////////////////////////////////////////
// EnumOptions
/// ////////////////////////////////////////////////////////////////////////////

export const AccountingLineItemCategoryOptions: EnumOption[] = [
  {
    label: 'Adjustment',
    value: AccountingLineItemCategory.Adjustment,
  },
  {
    label: 'Blockchain Distribution',
    value: AccountingLineItemCategory.BlockchainDistribution,
  },
  {
    label: 'Blockchain Fee',
    value: AccountingLineItemCategory.BlockchainFee,
  },
  {
    label: 'Internal Transaction',
    value: AccountingLineItemCategory.BlockchainInternalTransaction,
  },
  {
    label: 'Blockchain Migration',
    value: AccountingLineItemCategory.BlockchainMigration,
  },
  {
    label: 'Mined',
    value: AccountingLineItemCategory.BlockchainMined,
  },
  {
    label: 'Token Transfer',
    value: AccountingLineItemCategory.BlockchainTokenTransfer,
  },
  {
    label: 'Blockchain Trade',
    value: AccountingLineItemCategory.BlockchainTrade,
  },
  {
    label: 'Blockchain Trade Fee',
    value: AccountingLineItemCategory.BlockchainTradeFee,
  },
  {
    label: 'Blockchain Transaction',
    value: AccountingLineItemCategory.BlockchainTransaction,
  },
  {
    label: 'Transaction Change',
    value: AccountingLineItemCategory.BlockchainTransactionChange,
  },
  {
    label: 'Borrow',
    value: AccountingLineItemCategory.Borrow,
  },
  {
    label: 'Brokerage Fee',
    value: AccountingLineItemCategory.BrokerageFee,
  },
  {
    label: 'Close Margin Trade',
    value: AccountingLineItemCategory.CloseMarginTrade,
  },
  {
    label: 'Mint',
    value: AccountingLineItemCategory.CompoundMint,
  },
  {
    label: 'Redeem',
    value: AccountingLineItemCategory.CompoundRedeem,
  },
  {
    label: 'Close Contract',
    value: AccountingLineItemCategory.ContractClose,
  },
  {
    label: 'Contract Fee',
    value: AccountingLineItemCategory.ContractFee,
  },
  {
    label: 'Contract Funding',
    value: AccountingLineItemCategory.ContractFunding,
  },
  {
    label: 'Open Contract',
    value: AccountingLineItemCategory.ContractOpen,
  },
  {
    label: 'Contract Profit and Loss',
    value: AccountingLineItemCategory.ContractProfitAndLoss,
  },
  {
    label: 'Contract Rebate',
    value: AccountingLineItemCategory.ContractRebate,
  },
  {
    label: 'Conversion',
    value: AccountingLineItemCategory.Conversion,
  },
  {
    label: 'Correction',
    value: AccountingLineItemCategory.Correction,
  },
  {
    label: 'Custodian Deposit Fee',
    value: AccountingLineItemCategory.CustodianDepositFee,
  },
  {
    label: 'Custodian Withdrawal Fee',
    value: AccountingLineItemCategory.CustodianWithdrawalFee,
  },
  {
    label: 'Deposit',
    value: AccountingLineItemCategory.Deposit,
  },
  {
    label: 'Distribution',
    value: AccountingLineItemCategory.Distribution,
  },
  {
    label: 'Earned Interest',
    value: AccountingLineItemCategory.EarnedInterest,
  },
  {
    label: 'Exchange Airdrop',
    value: AccountingLineItemCategory.ExchangeAirdrop,
  },
  {
    label: 'Block Trade',
    value: AccountingLineItemCategory.ExchangeBlockTrade,
  },
  {
    label: 'Exchange Deposit Fee',
    value: AccountingLineItemCategory.ExchangeDepositFee,
  },
  {
    label: 'Exchange Listing Fee',
    value: AccountingLineItemCategory.ExchangeListingFee,
  },
  {
    label: 'Exchange Reward',
    value: AccountingLineItemCategory.ExchangeReward,
  },
  {
    label: 'Exchange Trade Fee',
    value: AccountingLineItemCategory.ExchangeTradeFee,
  },
  {
    label: 'Exchange Rebate',
    value: AccountingLineItemCategory.ExchangeTradeRebate,
  },
  {
    label: 'Exchange Withdrawal Fee',
    value: AccountingLineItemCategory.ExchangeWithdrawalFee,
  },
  {
    label: 'Failed Blockchain Transaction Fee',
    value: AccountingLineItemCategory.FailedBlockchainTransactionFee,
  },
  {
    label: 'Fee',
    value: AccountingLineItemCategory.Fee,
  },
  {
    label: 'Internal Deposit',
    value: AccountingLineItemCategory.InternalDeposit,
  },
  {
    label: 'Internal Withdrawal',
    value: AccountingLineItemCategory.InternalWithdrawal,
  },
  {
    label: 'Lend',
    value: AccountingLineItemCategory.Lend,
  },
  {
    label: 'Lending Fee',
    value: AccountingLineItemCategory.LendingFee,
  },
  {
    label: 'Liability',
    value: AccountingLineItemCategory.Liability,
  },
  {
    label: 'Margin Difference',
    value: AccountingLineItemCategory.MarginDifference,
  },
  {
    label: 'Margin Fee',
    value: AccountingLineItemCategory.MarginFee,
  },
  {
    label: 'Open Margin Trade',
    value: AccountingLineItemCategory.OpenMarginTrade,
  },
  {
    label: 'OTC Fee',
    value: AccountingLineItemCategory.OtcFee,
  },
  {
    label: 'Other',
    value: AccountingLineItemCategory.Other,
  },
  {
    label: 'Paid Interest',
    value: AccountingLineItemCategory.PaidInterest,
  },
  {
    label: 'Rebase',
    value: AccountingLineItemCategory.Rebase,
  },
  {
    label: 'Receive Principal',
    value: AccountingLineItemCategory.ReceivePrincipal,
  },
  {
    label: 'Reconciled Adjustment',
    value: AccountingLineItemCategory.ReconciledAdjustment,
  },
  {
    label: 'Return Principal',
    value: AccountingLineItemCategory.ReturnPrincipal,
  },
  {
    label: 'Settlement',
    value: AccountingLineItemCategory.Settlement,
  },
  {
    label: 'Settlement Fee',
    value: AccountingLineItemCategory.SettlementFee,
  },
  {
    label: 'Staking Reward',
    value: AccountingLineItemCategory.StakingReward,
  },
  {
    label: 'Theft',
    value: AccountingLineItemCategory.Theft,
  },
  {
    label: 'Token Migration',
    value: AccountingLineItemCategory.TokenMigration,
  },
  {
    label: 'Trade',
    value: AccountingLineItemCategory.Trade,
  },
  {
    label: 'Transfer',
    value: AccountingLineItemCategory.Transfer,
  },
  {
    label: 'Transfer Settle',
    value: AccountingLineItemCategory.TransferSettle,
  },
  {
    label: 'Withdrawal',
    value: AccountingLineItemCategory.Withdrawal,
  },
]

export const AccountingLineItemIgnoredReasonOptions: EnumOption[] = [
  {
    label: 'Accounted For',
    value: AccountingLineItemIgnoredReason.AccountedFor,
  },
  {
    label: 'User Ignored',
    value: AccountingLineItemIgnoredReason.UserIgnored,
  },
]

export const AccountingLineItemSourceTypeOptions: EnumOption[] = [
  {
    label: 'API',
    value: AccountingLineItemSourceType.API,
  },
  {
    label: 'CSV',
    value: AccountingLineItemSourceType.Csv,
  },
  {
    label: 'Manual',
    value: AccountingLineItemSourceType.Manual,
  },
  {
    label: 'System',
    value: AccountingLineItemSourceType.System,
  },
  {
    label: 'Smart Reconciliation',
    value: AccountingLineItemSourceType.SmartReconciliation,
  },
  {
    label: 'Manual Reconciliation',
    value: AccountingLineItemSourceType.ManualReconciliation,
  },
]

export const AccountingLineItemTypeOptions: EnumOption[] = [
  {
    label: 'Sent',
    value: AccountingLineItemType.Sent,
  },
  {
    label: 'Received',
    value: AccountingLineItemType.Received,
  },
]

export const AddressBookTypeOptions: EnumOption[] = [
  {
    label: 'Blockchain Address',
    value: AddressBookType.BlockchainAddress,
  },
]

export const AggressionOptions: EnumOption[] = [
  {
    label: 'Neutral',
    value: Aggression.Neutral,
  },
  {
    label: 'Aggressive',
    value: Aggression.Aggressive,
  },
  {
    label: 'Passive',
    value: Aggression.Passive,
  },
  {
    label: 'Market Peg',
    value: Aggression.MarketPeg,
  },
]

export const AlgoStrategyOptions: EnumOption[] = [
  {
    label: 'Smart Post',
    value: AlgoStrategy.SmartPost,
  },
  {
    label: 'Market',
    value: AlgoStrategy.Sweep,
  },
  {
    label: 'TWAP',
    value: AlgoStrategy.Twap,
  },
  {
    label: 'Limit',
    value: AlgoStrategy.Limit,
  },
]

export const BitgoWalletTypeOptions: EnumOption[] = [
  {
    label: 'Self-Managed Cold',
    value: BitgoWalletType.Cold,
  },
  {
    label: 'Custody',
    value: BitgoWalletType.Custodial,
  },
  {
    label: 'Custodial Paired',
    value: BitgoWalletType.Custodialpaired,
  },
  {
    label: 'Self-Managed Hot',
    value: BitgoWalletType.Hot,
  },
  {
    label: 'Trading',
    value: BitgoWalletType.Trading,
  },
]

export const BlockchainActionTypeOptions: EnumOption[] = [
  {
    label: 'staked',
    value: BlockchainActionType.Staked,
  },
  {
    label: 'unstaked',
    value: BlockchainActionType.Unstaked,
  },
  {
    label: 'unstaking',
    value: BlockchainActionType.Unstaking,
  },
]

export const CanceledReasonOptions: EnumOption[] = [
  {
    label: 'Margin Call',
    value: CanceledReason.MarginCall,
  },
  {
    label: 'Breach NOP Limit',
    value: CanceledReason.BreachNopLimit,
  },
  {
    label: 'Borrow Limit',
    value: CanceledReason.BorrowLimit,
  },
  {
    label: 'Trigger Liquidation',
    value: CanceledReason.TriggerLiquidation,
  },
  {
    label: 'Pending Liquidation',
    value: CanceledReason.PendingLiquidation,
  },
]

export const ChartOfAccountTypeOptions: EnumOption[] = [
  {
    label: 'Accounts Payable Accounts Payable',
    value: ChartOfAccountType.AccountsPayableAccountsPayable,
  },
  {
    label: 'Accounts Payable Outstanding Dues Micro Small Enterprise',
    value: ChartOfAccountType.AccountsPayableOutstandingDuesMicroSmallEnterprise,
  },
  {
    label: 'Accounts Payable Outstanding Dues Other Than Micro Small Enterprise',
    value: ChartOfAccountType.AccountsPayableOutstandingDuesOtherThanMicroSmallEnterprise,
  },
  {
    label: 'Accounts Receivable Accounts Receivable',
    value: ChartOfAccountType.AccountsReceivableAccountsReceivable,
  },
  {
    label: 'Bank Cash And Cash Equivalents',
    value: ChartOfAccountType.BankCashAndCashEquivalents,
  },
  {
    label: 'Bank Cash On Hand',
    value: ChartOfAccountType.BankCashOnHand,
  },
  {
    label: 'Bank Checking',
    value: ChartOfAccountType.BankChecking,
  },
  {
    label: 'Bank Money Market',
    value: ChartOfAccountType.BankMoneyMarket,
  },
  {
    label: 'Bank Other Ear Marked Bank Accounts',
    value: ChartOfAccountType.BankOtherEarMarkedBankAccounts,
  },
  {
    label: 'Bank Rents Held In Trust',
    value: ChartOfAccountType.BankRentsHeldInTrust,
  },
  {
    label: 'Bank Savings',
    value: ChartOfAccountType.BankSavings,
  },
  {
    label: 'Bank Trust Accounts',
    value: ChartOfAccountType.BankTrustAccounts,
  },
  {
    label: 'Cost Of Goods Sold Cost Of Labor Cos',
    value: ChartOfAccountType.CostOfGoodsSoldCostOfLaborCos,
  },
  {
    label: 'Cost Of Goods Sold Cost Of Sales',
    value: ChartOfAccountType.CostOfGoodsSoldCostOfSales,
  },
  {
    label: 'Cost Of Goods Sold Equipment Rental Cos',
    value: ChartOfAccountType.CostOfGoodsSoldEquipmentRentalCos,
  },
  {
    label: 'Cost Of Goods Sold Freight And Delivery Cost',
    value: ChartOfAccountType.CostOfGoodsSoldFreightAndDeliveryCost,
  },
  {
    label: 'Cost Of Goods Sold Other Costs Of Service Cos',
    value: ChartOfAccountType.CostOfGoodsSoldOtherCostsOfServiceCos,
  },
  {
    label: 'Cost Of Goods Sold Shipping Freight Delivery Cos',
    value: ChartOfAccountType.CostOfGoodsSoldShippingFreightDeliveryCos,
  },
  {
    label: 'Cost Of Goods Sold Supplies Materials Cogs',
    value: ChartOfAccountType.CostOfGoodsSoldSuppliesMaterialsCogs,
  },
  {
    label: 'Credit Card Credit Card',
    value: ChartOfAccountType.CreditCardCreditCard,
  },
  {
    label: 'Equity Accumulated Adjustment',
    value: ChartOfAccountType.EquityAccumulatedAdjustment,
  },
  {
    label: 'Equity Accumulated Other Comprehensive Income',
    value: ChartOfAccountType.EquityAccumulatedOtherComprehensiveIncome,
  },
  {
    label: 'Equity Called Up Share Capital',
    value: ChartOfAccountType.EquityCalledUpShareCapital,
  },
  {
    label: 'Equity Capital Reserves',
    value: ChartOfAccountType.EquityCapitalReserves,
  },
  {
    label: 'Equity Common Stock',
    value: ChartOfAccountType.EquityCommonStock,
  },
  {
    label: 'Equity Dividend Disbursed',
    value: ChartOfAccountType.EquityDividendDisbursed,
  },
  {
    label: 'Equity Equity In Earnings Of Subsidiaries',
    value: ChartOfAccountType.EquityEquityInEarningsOfSubsidiaries,
  },
  {
    label: 'Equity Estimated Taxes',
    value: ChartOfAccountType.EquityEstimatedTaxes,
  },
  {
    label: 'Equity Funds',
    value: ChartOfAccountType.EquityFunds,
  },
  {
    label: 'Equity Healthcare',
    value: ChartOfAccountType.EquityHealthcare,
  },
  {
    label: 'Equity Investment Grants',
    value: ChartOfAccountType.EquityInvestmentGrants,
  },
  {
    label: 'Equity Money Received Against Share Warrants',
    value: ChartOfAccountType.EquityMoneyReceivedAgainstShareWarrants,
  },
  {
    label: 'Equity Opening Balance Equity',
    value: ChartOfAccountType.EquityOpeningBalanceEquity,
  },
  {
    label: 'Equity Other Free Reserves',
    value: ChartOfAccountType.EquityOtherFreeReserves,
  },
  {
    label: 'Equity Owners Equity',
    value: ChartOfAccountType.EquityOwnersEquity,
  },
  {
    label: 'Equity Paid In Capital Or Surplus',
    value: ChartOfAccountType.EquityPaidInCapitalOrSurplus,
  },
  {
    label: 'Equity Partner Contributions',
    value: ChartOfAccountType.EquityPartnerContributions,
  },
  {
    label: 'Equity Partner Distributions',
    value: ChartOfAccountType.EquityPartnerDistributions,
  },
  {
    label: 'Equity Partners Equity',
    value: ChartOfAccountType.EquityPartnersEquity,
  },
  {
    label: 'Equity Personal Expense',
    value: ChartOfAccountType.EquityPersonalExpense,
  },
  {
    label: 'Equity Personal Income',
    value: ChartOfAccountType.EquityPersonalIncome,
  },
  {
    label: 'Equity Preferred Stock',
    value: ChartOfAccountType.EquityPreferredStock,
  },
  {
    label: 'Equity Retained Earnings',
    value: ChartOfAccountType.EquityRetainedEarnings,
  },
  {
    label: 'Equity Share Application Money Pending Allotment',
    value: ChartOfAccountType.EquityShareApplicationMoneyPendingAllotment,
  },
  {
    label: 'Equity Share Capital',
    value: ChartOfAccountType.EquityShareCapital,
  },
  {
    label: 'Equity Treasury Stock',
    value: ChartOfAccountType.EquityTreasuryStock,
  },
  {
    label: 'Expense Advertising Promotional',
    value: ChartOfAccountType.ExpenseAdvertisingPromotional,
  },
  {
    label: 'Expense Amortization Expense',
    value: ChartOfAccountType.ExpenseAmortizationExpense,
  },
  {
    label: 'Expense Appropriations To Depreciation',
    value: ChartOfAccountType.ExpenseAppropriationsToDepreciation,
  },
  {
    label: 'Expense Auto',
    value: ChartOfAccountType.ExpenseAuto,
  },
  {
    label: 'Expense Bad Debts',
    value: ChartOfAccountType.ExpenseBadDebts,
  },
  {
    label: 'Expense Bank Charges',
    value: ChartOfAccountType.ExpenseBankCharges,
  },
  {
    label: 'Expense Borrowing Cost',
    value: ChartOfAccountType.ExpenseBorrowingCost,
  },
  {
    label: 'Expense Charitable Contributions',
    value: ChartOfAccountType.ExpenseCharitableContributions,
  },
  {
    label: 'Expense Commissions And Fees',
    value: ChartOfAccountType.ExpenseCommissionsAndFees,
  },
  {
    label: 'Expense Cost Of Labor',
    value: ChartOfAccountType.ExpenseCostOfLabor,
  },
  {
    label: 'Expense Distribution Costs',
    value: ChartOfAccountType.ExpenseDistributionCosts,
  },
  {
    label: 'Expense Dues Subscriptions',
    value: ChartOfAccountType.ExpenseDuesSubscriptions,
  },
  {
    label: 'Expense Entertainment',
    value: ChartOfAccountType.ExpenseEntertainment,
  },
  {
    label: 'Expense Entertainment Meals',
    value: ChartOfAccountType.ExpenseEntertainmentMeals,
  },
  {
    label: 'Expense Equipment Rental',
    value: ChartOfAccountType.ExpenseEquipmentRental,
  },
  {
    label: 'Expense External Services',
    value: ChartOfAccountType.ExpenseExternalServices,
  },
  {
    label: 'Expense Extraordinary Charges',
    value: ChartOfAccountType.ExpenseExtraordinaryCharges,
  },
  {
    label: 'Expense Finance Costs',
    value: ChartOfAccountType.ExpenseFinanceCosts,
  },
  {
    label: 'Expense Global Tax Expense',
    value: ChartOfAccountType.ExpenseGlobalTaxExpense,
  },
  {
    label: 'Expense Income Tax Expense',
    value: ChartOfAccountType.ExpenseIncomeTaxExpense,
  },
  {
    label: 'Expense Insurance',
    value: ChartOfAccountType.ExpenseInsurance,
  },
  {
    label: 'Expense Interest Paid',
    value: ChartOfAccountType.ExpenseInterestPaid,
  },
  {
    label: 'Expense Legal Professional Fees',
    value: ChartOfAccountType.ExpenseLegalProfessionalFees,
  },
  {
    label: 'Expense Loss On Discontinued Operations Net Of Tax',
    value: ChartOfAccountType.ExpenseLossOnDiscontinuedOperationsNetOfTax,
  },
  {
    label: 'Expense Management Compensation',
    value: ChartOfAccountType.ExpenseManagementCompensation,
  },
  {
    label: 'Expense Office Expenses',
    value: ChartOfAccountType.ExpenseOfficeExpenses,
  },
  {
    label: 'Expense Office General Administrative Expenses',
    value: ChartOfAccountType.ExpenseOfficeGeneralAdministrativeExpenses,
  },
  {
    label: 'Expense Other Business Expenses',
    value: ChartOfAccountType.ExpenseOtherBusinessExpenses,
  },
  {
    label: 'Expense Other Current Operating Charges',
    value: ChartOfAccountType.ExpenseOtherCurrentOperatingCharges,
  },
  {
    label: 'Expense Other External Services',
    value: ChartOfAccountType.ExpenseOtherExternalServices,
  },
  {
    label: 'Expense Other Miscellaneous Service Cost',
    value: ChartOfAccountType.ExpenseOtherMiscellaneousServiceCost,
  },
  {
    label: 'Expense Other Rental Costs',
    value: ChartOfAccountType.ExpenseOtherRentalCosts,
  },
  {
    label: 'Expense Other Selling Expenses',
    value: ChartOfAccountType.ExpenseOtherSellingExpenses,
  },
  {
    label: 'Expense Payroll Expenses',
    value: ChartOfAccountType.ExpensePayrollExpenses,
  },
  {
    label: 'Expense Project Studies Surveys Assessments',
    value: ChartOfAccountType.ExpenseProjectStudiesSurveysAssessments,
  },
  {
    label: 'Expense Promotional Meals',
    value: ChartOfAccountType.ExpensePromotionalMeals,
  },
  {
    label: 'Expense Purchases Rebates',
    value: ChartOfAccountType.ExpensePurchasesRebates,
  },
  {
    label: 'Expense Rent Or Lease Of Buildings',
    value: ChartOfAccountType.ExpenseRentOrLeaseOfBuildings,
  },
  {
    label: 'Expense Repair Maintenance',
    value: ChartOfAccountType.ExpenseRepairMaintenance,
  },
  {
    label: 'Expense Shipping And Delivery Expense',
    value: ChartOfAccountType.ExpenseShippingAndDeliveryExpense,
  },
  {
    label: 'Expense Shipping Freight Delivery',
    value: ChartOfAccountType.ExpenseShippingFreightDelivery,
  },
  {
    label: 'Expense Staff Costs',
    value: ChartOfAccountType.ExpenseStaffCosts,
  },
  {
    label: 'Expense Sundry',
    value: ChartOfAccountType.ExpenseSundry,
  },
  {
    label: 'Expense Supplies Materials',
    value: ChartOfAccountType.ExpenseSuppliesMaterials,
  },
  {
    label: 'Expense Taxes Paid',
    value: ChartOfAccountType.ExpenseTaxesPaid,
  },
  {
    label: 'Expense Travel',
    value: ChartOfAccountType.ExpenseTravel,
  },
  {
    label: 'Expense Travel Expenses General And Admin Expenses',
    value: ChartOfAccountType.ExpenseTravelExpensesGeneralAndAdminExpenses,
  },
  {
    label: 'Expense Travel Expenses Selling Expense',
    value: ChartOfAccountType.ExpenseTravelExpensesSellingExpense,
  },
  {
    label: 'Expense Travel Meals',
    value: ChartOfAccountType.ExpenseTravelMeals,
  },
  {
    label: 'Expense Unapplied Cash Bill Payment Expense',
    value: ChartOfAccountType.ExpenseUnappliedCashBillPaymentExpense,
  },
  {
    label: 'Expense Utilities',
    value: ChartOfAccountType.ExpenseUtilities,
  },
  {
    label: 'Fixed Asset Accumulated Amortization',
    value: ChartOfAccountType.FixedAssetAccumulatedAmortization,
  },
  {
    label: 'Fixed Asset Accumulated Depletion',
    value: ChartOfAccountType.FixedAssetAccumulatedDepletion,
  },
  {
    label: 'Fixed Asset Accumulated Depreciation',
    value: ChartOfAccountType.FixedAssetAccumulatedDepreciation,
  },
  {
    label: 'Fixed Asset Assets In Course Of Construction',
    value: ChartOfAccountType.FixedAssetAssetsInCourseOfConstruction,
  },
  {
    label: 'Fixed Asset Buildings',
    value: ChartOfAccountType.FixedAssetBuildings,
  },
  {
    label: 'Fixed Asset Capital Wip',
    value: ChartOfAccountType.FixedAssetCapitalWip,
  },
  {
    label: 'Fixed Asset Cumulative Depreciation On Intangible Assets',
    value: ChartOfAccountType.FixedAssetCumulativeDepreciationOnIntangibleAssets,
  },
  {
    label: 'Fixed Asset Depletable Assets',
    value: ChartOfAccountType.FixedAssetDepletableAssets,
  },
  {
    label: 'Fixed Asset Fixed Asset Computers',
    value: ChartOfAccountType.FixedAssetFixedAssetComputers,
  },
  {
    label: 'Fixed Asset Fixed Asset Copiers',
    value: ChartOfAccountType.FixedAssetFixedAssetCopiers,
  },
  {
    label: 'Fixed Asset Fixed Asset Furniture',
    value: ChartOfAccountType.FixedAssetFixedAssetFurniture,
  },
  {
    label: 'Fixed Asset Fixed Asset Other Tools Equipment',
    value: ChartOfAccountType.FixedAssetFixedAssetOtherToolsEquipment,
  },
  {
    label: 'Fixed Asset Fixed Asset Phone',
    value: ChartOfAccountType.FixedAssetFixedAssetPhone,
  },
  {
    label: 'Fixed Asset Fixed Asset Photo Video',
    value: ChartOfAccountType.FixedAssetFixedAssetPhotoVideo,
  },
  {
    label: 'Fixed Asset Fixed Asset Software',
    value: ChartOfAccountType.FixedAssetFixedAssetSoftware,
  },
  {
    label: 'Fixed Asset Furniture And Fixtures',
    value: ChartOfAccountType.FixedAssetFurnitureAndFixtures,
  },
  {
    label: 'Fixed Asset Intangible Assets',
    value: ChartOfAccountType.FixedAssetIntangibleAssets,
  },
  {
    label: 'Fixed Asset Intangible Assets Under Development',
    value: ChartOfAccountType.FixedAssetIntangibleAssetsUnderDevelopment,
  },
  {
    label: 'Fixed Asset Land',
    value: ChartOfAccountType.FixedAssetLand,
  },
  {
    label: 'Fixed Asset Land Asset',
    value: ChartOfAccountType.FixedAssetLandAsset,
  },
  {
    label: 'Fixed Asset Leasehold Improvements',
    value: ChartOfAccountType.FixedAssetLeaseholdImprovements,
  },
  {
    label: 'Fixed Asset Machinery And Equipment',
    value: ChartOfAccountType.FixedAssetMachineryAndEquipment,
  },
  {
    label: 'Fixed Asset Non Current Assets',
    value: ChartOfAccountType.FixedAssetNonCurrentAssets,
  },
  {
    label: 'Fixed Asset Other Fixed Assets',
    value: ChartOfAccountType.FixedAssetOtherFixedAssets,
  },
  {
    label: 'Fixed Asset Participating Interests',
    value: ChartOfAccountType.FixedAssetParticipatingInterests,
  },
  {
    label: 'Fixed Asset Provisions Fixed Assets',
    value: ChartOfAccountType.FixedAssetProvisionsFixedAssets,
  },
  {
    label: 'Fixed Asset Vehicles',
    value: ChartOfAccountType.FixedAssetVehicles,
  },
  {
    label: 'Income Cash Receipt Income',
    value: ChartOfAccountType.IncomeCashReceiptIncome,
  },
  {
    label: 'Income Discounts Refunds Given',
    value: ChartOfAccountType.IncomeDiscountsRefundsGiven,
  },
  {
    label: 'Income Non Profit Income',
    value: ChartOfAccountType.IncomeNonProfitIncome,
  },
  {
    label: 'Income Operating Grants',
    value: ChartOfAccountType.IncomeOperatingGrants,
  },
  {
    label: 'Income Other Current Operating Income',
    value: ChartOfAccountType.IncomeOtherCurrentOperatingIncome,
  },
  {
    label: 'Income Other Primary Income',
    value: ChartOfAccountType.IncomeOtherPrimaryIncome,
  },
  {
    label: 'Income Own Work Capitalized',
    value: ChartOfAccountType.IncomeOwnWorkCapitalized,
  },
  {
    label: 'Income Revenue General',
    value: ChartOfAccountType.IncomeRevenueGeneral,
  },
  {
    label: 'Income Sales Of Product Income',
    value: ChartOfAccountType.IncomeSalesOfProductIncome,
  },
  {
    label: 'Income Sales Retail',
    value: ChartOfAccountType.IncomeSalesRetail,
  },
  {
    label: 'Income Sales Wholesale',
    value: ChartOfAccountType.IncomeSalesWholesale,
  },
  {
    label: 'Income Savings By Tax Scheme',
    value: ChartOfAccountType.IncomeSavingsByTaxScheme,
  },
  {
    label: 'Income Service Fee Income',
    value: ChartOfAccountType.IncomeServiceFeeIncome,
  },
  {
    label: 'Income Unapplied Cash Payment Income',
    value: ChartOfAccountType.IncomeUnappliedCashPaymentIncome,
  },
  {
    label: 'Long Term Liability Accruals And Deferred Income',
    value: ChartOfAccountType.LongTermLiabilityAccrualsAndDeferredIncome,
  },
  {
    label: 'Long Term Liability Accrued Long Lerm Liabilities',
    value: ChartOfAccountType.LongTermLiabilityAccruedLongLermLiabilities,
  },
  {
    label: 'Long Term Liability Accrued Vacation Payable',
    value: ChartOfAccountType.LongTermLiabilityAccruedVacationPayable,
  },
  {
    label: 'Long Term Liability Bank Loans',
    value: ChartOfAccountType.LongTermLiabilityBankLoans,
  },
  {
    label: 'Long Term Liability Debts Related To Participating Interests',
    value: ChartOfAccountType.LongTermLiabilityDebtsRelatedToParticipatingInterests,
  },
  {
    label: 'Long Term Liability Deferred Tax Liabilities',
    value: ChartOfAccountType.LongTermLiabilityDeferredTaxLiabilities,
  },
  {
    label: 'Long Term Liability Government And Other Public Authorities',
    value: ChartOfAccountType.LongTermLiabilityGovernmentAndOtherPublicAuthorities,
  },
  {
    label: 'Long Term Liability Group And Associates',
    value: ChartOfAccountType.LongTermLiabilityGroupAndAssociates,
  },
  {
    label: 'Long Term Liability Liabilities Related To Assets Held For Sale',
    value: ChartOfAccountType.LongTermLiabilityLiabilitiesRelatedToAssetsHeldForSale,
  },
  {
    label: 'Long Term Liability Long Term Borrowings',
    value: ChartOfAccountType.LongTermLiabilityLongTermBorrowings,
  },
  {
    label: 'Long Term Liability Long Term Debit',
    value: ChartOfAccountType.LongTermLiabilityLongTermDebit,
  },
  {
    label: 'Long Term Liability Long Term Employee Benefit Obligations',
    value: ChartOfAccountType.LongTermLiabilityLongTermEmployeeBenefitObligations,
  },
  {
    label: 'Long Term Liability Notes Payable',
    value: ChartOfAccountType.LongTermLiabilityNotesPayable,
  },
  {
    label: 'Long Term Liability Obligations Under Finance Leases',
    value: ChartOfAccountType.LongTermLiabilityObligationsUnderFinanceLeases,
  },
  {
    label: 'Long Term Liability Other Long Term Liabilities',
    value: ChartOfAccountType.LongTermLiabilityOtherLongTermLiabilities,
  },
  {
    label: 'Long Term Liability Other Long Term Provisions',
    value: ChartOfAccountType.LongTermLiabilityOtherLongTermProvisions,
  },
  {
    label: 'Long Term Liability Provision For Liabilities',
    value: ChartOfAccountType.LongTermLiabilityProvisionForLiabilities,
  },
  {
    label: 'Long Term Liability Provisions Non Current Liabilities',
    value: ChartOfAccountType.LongTermLiabilityProvisionsNonCurrentLiabilities,
  },
  {
    label: 'Long Term Liability Shareholder Notes Payable',
    value: ChartOfAccountType.LongTermLiabilityShareholderNotesPayable,
  },
  {
    label: 'Long Term Liability Staff And Related Long Term Liability Accounts',
    value: ChartOfAccountType.LongTermLiabilityStaffAndRelatedLongTermLiabilityAccounts,
  },
  {
    label: 'Other Asset Accumulated Amortization Of Other Assets',
    value: ChartOfAccountType.OtherAssetAccumulatedAmortizationOfOtherAssets,
  },
  {
    label: 'Other Asset Assets Held For Sale',
    value: ChartOfAccountType.OtherAssetAssetsHeldForSale,
  },
  {
    label: 'Other Asset Available For Sale Financial Assets',
    value: ChartOfAccountType.OtherAssetAvailableForSaleFinancialAssets,
  },
  {
    label: 'Other Asset Deferred Tax',
    value: ChartOfAccountType.OtherAssetDeferredTax,
  },
  {
    label: 'Other Asset Goodwill',
    value: ChartOfAccountType.OtherAssetGoodwill,
  },
  {
    label: 'Other Asset Investments',
    value: ChartOfAccountType.OtherAssetInvestments,
  },
  {
    label: 'Other Asset Lease Buyout',
    value: ChartOfAccountType.OtherAssetLeaseBuyout,
  },
  {
    label: 'Other Asset Licenses',
    value: ChartOfAccountType.OtherAssetLicenses,
  },
  {
    label: 'Other Asset Long Term Investments',
    value: ChartOfAccountType.OtherAssetLongTermInvestments,
  },
  {
    label: 'Other Asset Long Term Loans And Advances To Related Parties',
    value: ChartOfAccountType.OtherAssetLongTermLoansAndAdvancesToRelatedParties,
  },
  {
    label: 'Other Asset Organizational Costs',
    value: ChartOfAccountType.OtherAssetOrganizationalCosts,
  },
  {
    label: 'Other Asset Other Intangible Assets',
    value: ChartOfAccountType.OtherAssetOtherIntangibleAssets,
  },
  {
    label: 'Other Asset Other Long Term Assets',
    value: ChartOfAccountType.OtherAssetOtherLongTermAssets,
  },
  {
    label: 'Other Asset Other Long Term Investments',
    value: ChartOfAccountType.OtherAssetOtherLongTermInvestments,
  },
  {
    label: 'Other Asset Other Long Term Loans And Advances',
    value: ChartOfAccountType.OtherAssetOtherLongTermLoansAndAdvances,
  },
  {
    label: 'Other Asset Prepayments And Accrued Income',
    value: ChartOfAccountType.OtherAssetPrepaymentsAndAccruedIncome,
  },
  {
    label: 'Other Asset Provisions Non Current Assets',
    value: ChartOfAccountType.OtherAssetProvisionsNonCurrentAssets,
  },
  {
    label: 'Other Asset Security Deposits',
    value: ChartOfAccountType.OtherAssetSecurityDeposits,
  },
  {
    label: 'Other Current Asset Allowance For Bad Debts',
    value: ChartOfAccountType.OtherCurrentAssetAllowanceForBadDebts,
  },
  {
    label: 'Other Current Asset Assets Available For Sale',
    value: ChartOfAccountType.OtherCurrentAssetAssetsAvailableForSale,
  },
  {
    label: 'Other Current Asset Bal With Govt Authorities',
    value: ChartOfAccountType.OtherCurrentAssetBalWithGovtAuthorities,
  },
  {
    label: 'Other Current Asset Called Up Share Capital Not Paid',
    value: ChartOfAccountType.OtherCurrentAssetCalledUpShareCapitalNotPaid,
  },
  {
    label: 'Other Current Asset Development Costs',
    value: ChartOfAccountType.OtherCurrentAssetDevelopmentCosts,
  },
  {
    label: 'Other Current Asset Employee Cash Advances',
    value: ChartOfAccountType.OtherCurrentAssetEmployeeCashAdvances,
  },
  {
    label: 'Other Current Asset Expenditure Authorizations And Letters Of Credit',
    value: ChartOfAccountType.OtherCurrentAssetExpenditureAuthorizationsAndLettersOfCredit,
  },
  {
    label: 'Other Current Asset Global Tax Deferred',
    value: ChartOfAccountType.OtherCurrentAssetGlobalTaxDeferred,
  },
  {
    label: 'Other Current Asset Global Tax Refund',
    value: ChartOfAccountType.OtherCurrentAssetGlobalTaxRefund,
  },
  {
    label: 'Other Current Asset Internal Transfers',
    value: ChartOfAccountType.OtherCurrentAssetInternalTransfers,
  },
  {
    label: 'Other Current Asset Inventory',
    value: ChartOfAccountType.OtherCurrentAssetInventory,
  },
  {
    label: 'Other Current Asset Investment Mortgage Real Estate Loans',
    value: ChartOfAccountType.OtherCurrentAssetInvestmentMortgageRealEstateLoans,
  },
  {
    label: 'Other Current Asset Investment Other',
    value: ChartOfAccountType.OtherCurrentAssetInvestmentOther,
  },
  {
    label: 'Other Current Asset Investment Tax Exempt Securities',
    value: ChartOfAccountType.OtherCurrentAssetInvestmentTaxExemptSecurities,
  },
  {
    label: 'Other Current Asset Investment Us Government Obligations',
    value: ChartOfAccountType.OtherCurrentAssetInvestmentUsGovernmentObligations,
  },
  {
    label: 'Other Current Asset Loans To Officers',
    value: ChartOfAccountType.OtherCurrentAssetLoansToOfficers,
  },
  {
    label: 'Other Current Asset Loans To Others',
    value: ChartOfAccountType.OtherCurrentAssetLoansToOthers,
  },
  {
    label: 'Other Current Asset Loans To Stockholders',
    value: ChartOfAccountType.OtherCurrentAssetLoansToStockholders,
  },
  {
    label: 'Other Current Asset Other Consumables',
    value: ChartOfAccountType.OtherCurrentAssetOtherConsumables,
  },
  {
    label: 'Other Current Asset Other Current Assets',
    value: ChartOfAccountType.OtherCurrentAssetOtherCurrentAssets,
  },
  {
    label: 'Other Current Asset Prepaid Expenses',
    value: ChartOfAccountType.OtherCurrentAssetPrepaidExpenses,
  },
  {
    label: 'Other Current Asset Provisions Current Assets',
    value: ChartOfAccountType.OtherCurrentAssetProvisionsCurrentAssets,
  },
  {
    label: 'Other Current Asset Retainage',
    value: ChartOfAccountType.OtherCurrentAssetRetainage,
  },
  {
    label: 'Other Current Asset Short Term Investments In Related Parties',
    value: ChartOfAccountType.OtherCurrentAssetShortTermInvestmentsInRelatedParties,
  },
  {
    label: 'Other Current Asset Short Term Loans And Advances To Related Parties',
    value: ChartOfAccountType.OtherCurrentAssetShortTermLoansAndAdvancesToRelatedParties,
  },
  {
    label: 'Other Current Asset Trade And Other Receivables',
    value: ChartOfAccountType.OtherCurrentAssetTradeAndOtherReceivables,
  },
  {
    label: 'Other Current Asset Undeposited Funds',
    value: ChartOfAccountType.OtherCurrentAssetUndepositedFunds,
  },
  {
    label: 'Other Current Liability Accrued Liabilities',
    value: ChartOfAccountType.OtherCurrentLiabilityAccruedLiabilities,
  },
  {
    label: 'Other Current Liability Current Liabilities',
    value: ChartOfAccountType.OtherCurrentLiabilityCurrentLiabilities,
  },
  {
    label: 'Other Current Liability Current Portion Employee Benefits Obligations',
    value: ChartOfAccountType.OtherCurrentLiabilityCurrentPortionEmployeeBenefitsObligations,
  },
  {
    label: 'Other Current Liability Current Portion Of Obligations Under Finance Leases',
    value: ChartOfAccountType.OtherCurrentLiabilityCurrentPortionOfObligationsUnderFinanceLeases,
  },
  {
    label: 'Other Current Liability Current Tax Liability',
    value: ChartOfAccountType.OtherCurrentLiabilityCurrentTaxLiability,
  },
  {
    label: 'Other Current Liability Direct Deposit Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityDirectDepositPayable,
  },
  {
    label: 'Other Current Liability Dividends Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityDividendsPayable,
  },
  {
    label: 'Other Current Liability Duties And Taxes',
    value: ChartOfAccountType.OtherCurrentLiabilityDutiesAndTaxes,
  },
  {
    label: 'Other Current Liability Federal Income Tax Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityFederalIncomeTaxPayable,
  },
  {
    label: 'Other Current Liability Global Tax Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityGlobalTaxPayable,
  },
  {
    label: 'Other Current Liability Global Tax Suspense',
    value: ChartOfAccountType.OtherCurrentLiabilityGlobalTaxSuspense,
  },
  {
    label: 'Other Current Liability Insurance Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityInsurancePayable,
  },
  {
    label: 'Other Current Liability Interest Payables',
    value: ChartOfAccountType.OtherCurrentLiabilityInterestPayables,
  },
  {
    label: 'Other Current Liability Line Of Credit',
    value: ChartOfAccountType.OtherCurrentLiabilityLineOfCredit,
  },
  {
    label: 'Other Current Liability Loan Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityLoanPayable,
  },
  {
    label: 'Other Current Liability Other Current Liabilities',
    value: ChartOfAccountType.OtherCurrentLiabilityOtherCurrentLiabilities,
  },
  {
    label: 'Other Current Liability Payroll Clearing',
    value: ChartOfAccountType.OtherCurrentLiabilityPayrollClearing,
  },
  {
    label: 'Other Current Liability Payroll Tax Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityPayrollTaxPayable,
  },
  {
    label: 'Other Current Liability Prepaid Expenses Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityPrepaidExpensesPayable,
  },
  {
    label: 'Other Current Liability Provision For Warranty Obligations',
    value: ChartOfAccountType.OtherCurrentLiabilityProvisionForWarrantyObligations,
  },
  {
    label: 'Other Current Liability Provisions Current Liabilities',
    value: ChartOfAccountType.OtherCurrentLiabilityProvisionsCurrentLiabilities,
  },
  {
    label: 'Other Current Liability Rents In Trust Liability',
    value: ChartOfAccountType.OtherCurrentLiabilityRentsInTrustLiability,
  },
  {
    label: 'Other Current Liability Sales Tax Payable',
    value: ChartOfAccountType.OtherCurrentLiabilitySalesTaxPayable,
  },
  {
    label: 'Other Current Liability Short Term Borrowings',
    value: ChartOfAccountType.OtherCurrentLiabilityShortTermBorrowings,
  },
  {
    label: 'Other Current Liability Social Security Agencies',
    value: ChartOfAccountType.OtherCurrentLiabilitySocialSecurityAgencies,
  },
  {
    label: 'Other Current Liability Staff And Related Liability Accounts',
    value: ChartOfAccountType.OtherCurrentLiabilityStaffAndRelatedLiabilityAccounts,
  },
  {
    label: 'Other Current Liability State Local Income Tax Payable',
    value: ChartOfAccountType.OtherCurrentLiabilityStateLocalIncomeTaxPayable,
  },
  {
    label: 'Other Current Liability Sundry Debtors And Creditors',
    value: ChartOfAccountType.OtherCurrentLiabilitySundryDebtorsAndCreditors,
  },
  {
    label: 'Other Current Liability Trade And Other Payables',
    value: ChartOfAccountType.OtherCurrentLiabilityTradeAndOtherPayables,
  },
  {
    label: 'Other Current Liability Trust Accounts Liabilities',
    value: ChartOfAccountType.OtherCurrentLiabilityTrustAccountsLiabilities,
  },
  {
    label: 'Other Expense Amortization',
    value: ChartOfAccountType.OtherExpenseAmortization,
  },
  {
    label: 'Other Expense Deferred Tax Expense',
    value: ChartOfAccountType.OtherExpenseDeferredTaxExpense,
  },
  {
    label: 'Other Expense Depletion',
    value: ChartOfAccountType.OtherExpenseDepletion,
  },
  {
    label: 'Other Expense Depreciation',
    value: ChartOfAccountType.OtherExpenseDepreciation,
  },
  {
    label: 'Other Expense Exceptional Items',
    value: ChartOfAccountType.OtherExpenseExceptionalItems,
  },
  {
    label: 'Other Expense Exchange Gain Or Loss',
    value: ChartOfAccountType.OtherExpenseExchangeGainOrLoss,
  },
  {
    label: 'Other Expense Extraordinary Items',
    value: ChartOfAccountType.OtherExpenseExtraordinaryItems,
  },
  {
    label: 'Other Expense Gas And Fuel',
    value: ChartOfAccountType.OtherExpenseGasAndFuel,
  },
  {
    label: 'Other Expense Home Office',
    value: ChartOfAccountType.OtherExpenseHomeOffice,
  },
  {
    label: 'Other Expense Home Owner Rental Insurance',
    value: ChartOfAccountType.OtherExpenseHomeOwnerRentalInsurance,
  },
  {
    label: 'Other Expense Income Tax Other Expense',
    value: ChartOfAccountType.OtherExpenseIncomeTaxOtherExpense,
  },
  {
    label: 'Other Expense Mat Credit',
    value: ChartOfAccountType.OtherExpenseMatCredit,
  },
  {
    label: 'Other Expense Mortgage Interest',
    value: ChartOfAccountType.OtherExpenseMortgageInterest,
  },
  {
    label: 'Other Expense Other Home Office Expenses',
    value: ChartOfAccountType.OtherExpenseOtherHomeOfficeExpenses,
  },
  {
    label: 'Other Expense Other Miscellaneous Expense',
    value: ChartOfAccountType.OtherExpenseOtherMiscellaneousExpense,
  },
  {
    label: 'Other Expense Other Vehicle Expenses',
    value: ChartOfAccountType.OtherExpenseOtherVehicleExpenses,
  },
  {
    label: 'Other Expense Parking And Tolls',
    value: ChartOfAccountType.OtherExpenseParkingAndTolls,
  },
  {
    label: 'Other Expense Penalties Settlements',
    value: ChartOfAccountType.OtherExpensePenaltiesSettlements,
  },
  {
    label: 'Other Expense Prior Period Items',
    value: ChartOfAccountType.OtherExpensePriorPeriodItems,
  },
  {
    label: 'Other Expense Rent And Lease',
    value: ChartOfAccountType.OtherExpenseRentAndLease,
  },
  {
    label: 'Other Expense Repairs And Maintenance',
    value: ChartOfAccountType.OtherExpenseRepairsAndMaintenance,
  },
  {
    label: 'Other Expense Tax Roundoff Gain Or Loss',
    value: ChartOfAccountType.OtherExpenseTaxRoundoffGainOrLoss,
  },
  {
    label: 'Other Expense Utilities',
    value: ChartOfAccountType.OtherExpenseUtilities,
  },
  {
    label: 'Other Expense Vehicle',
    value: ChartOfAccountType.OtherExpenseVehicle,
  },
  {
    label: 'Other Expense Vehicle Insurance',
    value: ChartOfAccountType.OtherExpenseVehicleInsurance,
  },
  {
    label: 'Other Expense Vehicle Lease',
    value: ChartOfAccountType.OtherExpenseVehicleLease,
  },
  {
    label: 'Other Expense Vehicle Loan',
    value: ChartOfAccountType.OtherExpenseVehicleLoan,
  },
  {
    label: 'Other Expense Vehicle Loan Interest',
    value: ChartOfAccountType.OtherExpenseVehicleLoanInterest,
  },
  {
    label: 'Other Expense Vehicle Registration',
    value: ChartOfAccountType.OtherExpenseVehicleRegistration,
  },
  {
    label: 'Other Expense Vehicle Repairs',
    value: ChartOfAccountType.OtherExpenseVehicleRepairs,
  },
  {
    label: 'Other Expense Wash And Road Services',
    value: ChartOfAccountType.OtherExpenseWashAndRoadServices,
  },
  {
    label: 'Other Income Dividend Income',
    value: ChartOfAccountType.OtherIncomeDividendIncome,
  },
  {
    label: 'Other Income Gain Loss On Sale Of Fixed Assets',
    value: ChartOfAccountType.OtherIncomeGainLossOnSaleOfFixedAssets,
  },
  {
    label: 'Other Income Gain Loss On Sale Of Investments',
    value: ChartOfAccountType.OtherIncomeGainLossOnSaleOfInvestments,
  },
  {
    label: 'Other Income Interest Earned',
    value: ChartOfAccountType.OtherIncomeInterestEarned,
  },
  {
    label: 'Other Income Loss On Disposal Of Assets',
    value: ChartOfAccountType.OtherIncomeLossOnDisposalOfAssets,
  },
  {
    label: 'Other Income Other Investment Income',
    value: ChartOfAccountType.OtherIncomeOtherInvestmentIncome,
  },
  {
    label: 'Other Income Other Miscellaneous Income',
    value: ChartOfAccountType.OtherIncomeOtherMiscellaneousIncome,
  },
  {
    label: 'Other Income Other Operating Income',
    value: ChartOfAccountType.OtherIncomeOtherOperatingIncome,
  },
  {
    label: 'Other Income Tax Exempt Interest',
    value: ChartOfAccountType.OtherIncomeTaxExemptInterest,
  },
  {
    label: 'Other Income Unrealised Loss On Securities Net Of Tax',
    value: ChartOfAccountType.OtherIncomeUnrealisedLossOnSecuritiesNetOfTax,
  },
]

export const ClientOrderUserIntentOptions: EnumOption[] = [
  {
    label: 'Funds',
    value: ClientOrderUserIntent.Funds,
  },
  {
    label: 'Quantity',
    value: ClientOrderUserIntent.Quantity,
  },
]

export const CollateralTypeOptions: EnumOption[] = [
  {
    label: 'Margin',
    value: CollateralType.Margin,
  },
  {
    label: 'Funded',
    value: CollateralType.Funded,
  },
]

export const ConversionTypeOptions: EnumOption[] = [
  {
    label: 'direct',
    value: ConversionType.Direct,
  },
  {
    label: 'inverse',
    value: ConversionType.Inverse,
  },
  {
    label: 'invert',
    value: ConversionType.Invert,
  },
  {
    label: 'multiply',
    value: ConversionType.Multiply,
  },
  {
    label: 'divide',
    value: ConversionType.Divide,
  },
  {
    label: 'invert multiple',
    value: ConversionType.InvertMultiple,
  },
  {
    label: 'invert divide',
    value: ConversionType.InvertDivide,
  },
]

export const CredentialsTypeOptions: EnumOption[] = [
  {
    label: 'API Key',
    value: CredentialsType.APIKey,
  },
  {
    label: 'OAuth',
    value: CredentialsType.Oauth,
  },
  {
    label: 'SFTP',
    value: CredentialsType.Sftp,
  },
  {
    label: 'Internal',
    value: CredentialsType.Internal,
  },
]

export const DayOfWeekOptions: EnumOption[] = [
  {
    label: 'Monday',
    value: DayOfWeek.Monday,
  },
  {
    label: 'Tuesday',
    value: DayOfWeek.Tuesday,
  },
  {
    label: 'Wednesday',
    value: DayOfWeek.Wednesday,
  },
  {
    label: 'Thursday',
    value: DayOfWeek.Thursday,
  },
  {
    label: 'Friday',
    value: DayOfWeek.Friday,
  },
  {
    label: 'Saturday',
    value: DayOfWeek.Saturday,
  },
  {
    label: 'Sunday',
    value: DayOfWeek.Sunday,
  },
]

export const EncryptionKeyTypeOptions: EnumOption[] = [
  {
    label: 'Amazon Key Management Service',
    value: EncryptionKeyType.AmazonKeyManagementService,
  },
  {
    label: 'Local Key',
    value: EncryptionKeyType.LocalKey,
  },
]

export const EnterpriseTierOptions: EnumOption[] = [
  {
    label: 'Basic',
    value: EnterpriseTier.Basic,
  },
  {
    label: 'Professional',
    value: EnterpriseTier.Professional,
  },
  {
    label: 'Institutional',
    value: EnterpriseTier.Institutional,
  },
]

export const EntityStatusOptions: EnumOption[] = [
  {
    label: 'Deleted',
    value: EntityStatus.Deleted,
  },
  {
    label: 'Error',
    value: EntityStatus.Error,
  },
  {
    label: 'Idle',
    value: EntityStatus.Idle,
  },
  {
    label: 'Processing',
    value: EntityStatus.Processing,
  },
  {
    label: 'Archived',
    value: EntityStatus.Archived,
  },
  {
    label: 'Deleting',
    value: EntityStatus.Deleting,
  },
]

export const EntityTypeOptions: EnumOption[] = [
  {
    label: 'Account Line Item',
    value: EntityType.AccountingLineItem,
  },
  {
    label: 'Order',
    value: EntityType.ClientOrder,
  },
  {
    label: 'Exchange Order',
    value: EntityType.ExchangeOrder,
  },
  {
    label: 'Financial Account',
    value: EntityType.FinancialAccount,
  },
  {
    label: 'Financial Account Connection',
    value: EntityType.FinancialAccountConnection,
  },
  {
    label: 'Financial Transaction',
    value: EntityType.FinancialTransaction,
  },
  {
    label: 'Instrument',
    value: EntityType.Instrument,
  },
  {
    label: 'Investor Profile',
    value: EntityType.InvestorProfile,
  },
  {
    label: 'user',
    value: EntityType.LuminaUser,
  },
  {
    label: 'Organization',
    value: EntityType.Organization,
  },
  {
    label: 'Portfolio',
    value: EntityType.Portfolio,
  },
  {
    label: 'User Account',
    value: EntityType.UserAccount,
  },
  {
    label: 'User Invitation',
    value: EntityType.UserInvitation,
  },
]

export const EventNameOptions: EnumOption[] = [
  {
    label: 'accept invitation',
    value: EventName.AcceptInvitation,
  },
  {
    label: 'add',
    value: EventName.Add,
  },
  {
    label: 'add file',
    value: EventName.AddFile,
  },
  {
    label: 'compute tax',
    value: EventName.ComputeTax,
  },
  {
    label: 'delete',
    value: EventName.Delete,
  },
  {
    label: 'delete file',
    value: EventName.DeleteFile,
  },
  {
    label: 'disable two-factor authentication',
    value: EventName.DisableTwoFactorAuthentication,
  },
  {
    label: 'enable two-factor authentication',
    value: EventName.EnableTwoFactorAuthentication,
  },
  {
    label: 'leave organization',
    value: EventName.Left,
  },
  {
    label: 'log in',
    value: EventName.LogIn,
  },
  {
    label: 'log out',
    value: EventName.LogOut,
  },
  {
    label: 'reset',
    value: EventName.Reset,
  },
  {
    label: 'reset password',
    value: EventName.ResetPassword,
  },
  {
    label: 'sync',
    value: EventName.Sync,
  },
  {
    label: 'update',
    value: EventName.Update,
  },
  {
    label: 'update password',
    value: EventName.UpdatePassword,
  },
]

export const ExchangeOrderQuantityTypeOptions: EnumOption[] = [
  {
    label: 'Base',
    value: ExchangeOrderQuantityType.Base,
  },
  {
    label: 'Quote',
    value: ExchangeOrderQuantityType.Quote,
  },
]

export const FileStorageTypeOptions: EnumOption[] = [
  {
    label: 'Local',
    value: FileStorageType.Local,
  },
  {
    label: 'Amazon Simle Storage Service',
    value: FileStorageType.AmazonSimpleStorageService,
  },
  {
    label: 'Google Cloud Storage',
    value: FileStorageType.GoogleCloudStorage,
  },
]

export const FinancialAccountConnectionSyncStatusOptions: EnumOption[] = [
  {
    label: 'Idle',
    value: FinancialAccountConnectionSyncStatus.Idle,
  },
  {
    label: 'Scheduled',
    value: FinancialAccountConnectionSyncStatus.Scheduled,
  },
  {
    label: 'Processing',
    value: FinancialAccountConnectionSyncStatus.Processing,
  },
  {
    label: 'Error',
    value: FinancialAccountConnectionSyncStatus.Error,
  },
]

export const FinancialAccountTypeOptions: EnumOption[] = [
  {
    label: 'Checking',
    value: FinancialAccountType.Checking,
  },
  {
    label: 'Exchange',
    value: FinancialAccountType.Exchange,
  },
  {
    label: 'Savings',
    value: FinancialAccountType.Savings,
  },
  {
    label: 'Blockchain Wallet',
    value: FinancialAccountType.BlockchainWallet,
  },
  {
    label: 'Custodial Wallet',
    value: FinancialAccountType.CustodialWallet,
  },
  {
    label: 'Unaccounted Assets',
    value: FinancialAccountType.UnaccountedAssets,
  },
  {
    label: 'Blockchain HD Wallet',
    value: FinancialAccountType.BlockchainHdWallet,
  },
  {
    label: 'Custom',
    value: FinancialAccountType.Custom,
  },
  {
    label: 'Broker',
    value: FinancialAccountType.Broker,
  },
  {
    label: 'Blockchain Multisig Wallet',
    value: FinancialAccountType.BlockchainMultisigWallet,
  },
  {
    label: 'Trading Wallet',
    value: FinancialAccountType.TradingWallet,
  },
  {
    label: 'Collateral',
    value: FinancialAccountType.Collateral,
  },
  {
    label: 'Margin',
    value: FinancialAccountType.Margin,
  },
]

export const FinancialConnectionCredentialsTypeOptions: EnumOption[] = [
  {
    label: 'API Key',
    value: FinancialConnectionCredentialsType.APIKey,
  },
  {
    label: 'OAuth',
    value: FinancialConnectionCredentialsType.Oauth,
  },
  {
    label: 'Blockchain',
    value: FinancialConnectionCredentialsType.Blockchain,
  },
  {
    label: 'None',
    value: FinancialConnectionCredentialsType.None,
  },
  {
    label: 'Public Address',
    value: FinancialConnectionCredentialsType.PublicAddress,
  },
  {
    label: 'SFTP',
    value: FinancialConnectionCredentialsType.Sftp,
  },
  {
    label: 'Internal',
    value: FinancialConnectionCredentialsType.Internal,
  },
]

export const FinancialConnectionTypeOptions: EnumOption[] = [
  {
    label: 'API',
    value: FinancialConnectionType.API,
  },
  {
    label: 'Manual',
    value: FinancialConnectionType.Manual,
  },
  {
    label: 'System',
    value: FinancialConnectionType.System,
  },
  {
    label: 'Unsupported',
    value: FinancialConnectionType.Unsupported,
  },
]

export const FinancialTransactionSourceTypeOptions: EnumOption[] = [
  {
    label: 'Manual',
    value: FinancialTransactionSourceType.Manual,
  },
  {
    label: 'CSV',
    value: FinancialTransactionSourceType.Csv,
  },
  {
    label: 'Auto Resolution',
    value: FinancialTransactionSourceType.AutoResolution,
  },
  {
    label: 'Smart Resolution',
    value: FinancialTransactionSourceType.SmartResolution,
  },
]

export const FinancialTransactionSubtypeOptions: EnumOption[] = [
  {
    label: 'Blockchain Migration',
    value: FinancialTransactionSubtype.BlockchainMigration,
  },
  {
    label: 'Borrow',
    value: FinancialTransactionSubtype.Borrow,
  },
  {
    label: 'Buy',
    value: FinancialTransactionSubtype.Buy,
  },
  {
    label: 'Close Buy Contract',
    value: FinancialTransactionSubtype.BuyCloseContract,
  },
  {
    label: 'Close Short',
    value: FinancialTransactionSubtype.BuyCloseShort,
  },
  {
    label: 'Buy Correction',
    value: FinancialTransactionSubtype.BuyCorrection,
  },
  {
    label: 'Open Buy Contract',
    value: FinancialTransactionSubtype.BuyOpenContract,
  },
  {
    label: 'Settle Buy Contract',
    value: FinancialTransactionSubtype.BuySettleContract,
  },
  {
    label: 'Settle Short',
    value: FinancialTransactionSubtype.BuySettleShort,
  },
  {
    label: 'Receive Collateral',
    value: FinancialTransactionSubtype.CashReceiveCollateral,
  },
  {
    label: 'Send Collateral',
    value: FinancialTransactionSubtype.CashSendCollateral,
  },
  {
    label: 'Contract Settlement Loss',
    value: FinancialTransactionSubtype.ContractSettlementLoss,
  },
  {
    label: 'Contract Settlement Profit',
    value: FinancialTransactionSubtype.ContractSettlementProfit,
  },
  {
    label: 'Conversion',
    value: FinancialTransactionSubtype.Conversion,
  },
  {
    label: 'Deposit',
    value: FinancialTransactionSubtype.Deposit,
  },
  {
    label: 'Initial Transfer In',
    value: FinancialTransactionSubtype.InitialTransferIn,
  },
  {
    label: 'Interest Earned',
    value: FinancialTransactionSubtype.InterestEarned,
  },
  {
    label: 'Interest Paid',
    value: FinancialTransactionSubtype.InterestPaid,
  },
  {
    label: 'Lend',
    value: FinancialTransactionSubtype.Lend,
  },
  {
    label: 'Airdrop',
    value: FinancialTransactionSubtype.ReceiveAirdrop,
  },
  {
    label: 'Receive Contract Funding',
    value: FinancialTransactionSubtype.ReceiveContractFunding,
  },
  {
    label: 'Earned',
    value: FinancialTransactionSubtype.ReceiveEarned,
  },
  {
    label: 'Fork',
    value: FinancialTransactionSubtype.ReceiveFork,
  },
  {
    label: 'Gift',
    value: FinancialTransactionSubtype.ReceiveGift,
  },
  {
    label: 'Mined',
    value: FinancialTransactionSubtype.ReceiveMined,
  },
  {
    label: 'Receive Principal',
    value: FinancialTransactionSubtype.ReceivePrincipal,
  },
  {
    label: 'Receive Reward',
    value: FinancialTransactionSubtype.ReceiveReward,
  },
  {
    label: 'Restaked',
    value: FinancialTransactionSubtype.Restaked,
  },
  {
    label: 'Return Principal',
    value: FinancialTransactionSubtype.ReturnPrincipal,
  },
  {
    label: 'Sell',
    value: FinancialTransactionSubtype.Sell,
  },
  {
    label: 'Close Sell Contract',
    value: FinancialTransactionSubtype.SellCloseContract,
  },
  {
    label: 'Sell Correction',
    value: FinancialTransactionSubtype.SellCorrection,
  },
  {
    label: 'Open Sell Contract',
    value: FinancialTransactionSubtype.SellOpenContract,
  },
  {
    label: 'Open Short',
    value: FinancialTransactionSubtype.SellOpenShort,
  },
  {
    label: 'sell send transfer out',
    value: FinancialTransactionSubtype.SellSendTransferOut,
  },
  {
    label: 'Settle Sell Contract',
    value: FinancialTransactionSubtype.SellSettleContract,
  },
  {
    label: 'Send Contract Funding',
    value: FinancialTransactionSubtype.SendContractFunding,
  },
  {
    label: 'Send Gift',
    value: FinancialTransactionSubtype.SendGift,
  },
  {
    label: 'Send Paid',
    value: FinancialTransactionSubtype.SendPaid,
  },
  {
    label: 'Send Theft',
    value: FinancialTransactionSubtype.SendTheft,
  },
  {
    label: 'Staked',
    value: FinancialTransactionSubtype.Staked,
  },
  {
    label: 'Staking Reward',
    value: FinancialTransactionSubtype.StakingReward,
  },
  {
    label: 'Token Migration',
    value: FinancialTransactionSubtype.TokenMigration,
  },
  {
    label: 'Transfer',
    value: FinancialTransactionSubtype.Transfer,
  },
  {
    label: 'Transfer In',
    value: FinancialTransactionSubtype.TransferIn,
  },
  {
    label: 'Transfer Out & Untrack',
    value: FinancialTransactionSubtype.TransferOut,
  },
  {
    label: 'Redemption',
    value: FinancialTransactionSubtype.TransferRedemption,
  },
  {
    label: 'Subscription',
    value: FinancialTransactionSubtype.TransferSubscription,
  },
  {
    label: 'Unstaked',
    value: FinancialTransactionSubtype.Unstaked,
  },
  {
    label: 'Unstaking',
    value: FinancialTransactionSubtype.Unstaking,
  },
  {
    label: 'Withdraw',
    value: FinancialTransactionSubtype.Withdraw,
  },
]

export const FinancialTransactionTypeOptions: EnumOption[] = [
  {
    label: 'Buy',
    value: FinancialTransactionType.Buy,
  },
  {
    label: 'Cash',
    value: FinancialTransactionType.Cash,
  },
  {
    label: 'Dividends',
    value: FinancialTransactionType.DividendsInterestFees,
  },
  {
    label: 'Pending',
    value: FinancialTransactionType.Pending,
  },
  {
    label: 'Sell',
    value: FinancialTransactionType.Sell,
  },
  {
    label: 'Transfer',
    value: FinancialTransactionType.Transfer,
  },
  {
    label: 'Cancel',
    value: FinancialTransactionType.Cancel,
  },
  {
    label: 'Blockchain Action',
    value: FinancialTransactionType.BlockchainAction,
  },
]

export const GraphqlRoleOptions: EnumOption[] = [
  {
    label: 'Admin',
    value: GraphqlRole.Admin,
  },
  {
    label: 'Member',
    value: GraphqlRole.Member,
  },
  {
    label: 'Read Only',
    value: GraphqlRole.ReadOnly,
  },
  {
    label: 'Lumina User',
    value: GraphqlRole.LuminaUser,
  },
]

export const HistoricalPriceTypeOptions: EnumOption[] = [
  {
    label: 'Day',
    value: HistoricalPriceType.Day,
  },
  {
    label: 'Hour',
    value: HistoricalPriceType.Hour,
  },
  {
    label: 'Minute',
    value: HistoricalPriceType.Minute,
  },
]

export const InstitutionTypeOptions: EnumOption[] = [
  {
    label: 'Blockchain',
    value: InstitutionType.Blockchain,
  },
  {
    label: 'Custodian',
    value: InstitutionType.Custodian,
  },
  {
    label: 'Exchange',
    value: InstitutionType.Exchange,
  },
  {
    label: 'System',
    value: InstitutionType.System,
  },
  {
    label: 'Bank Integration',
    value: InstitutionType.BankIntegration,
  },
  {
    label: 'Bank',
    value: InstitutionType.Bank,
  },
  {
    label: 'OTC Desk',
    value: InstitutionType.OtcDesk,
  },
  {
    label: 'Investment Vehicle',
    value: InstitutionType.InvestmentVehicle,
  },
  {
    label: 'Custom',
    value: InstitutionType.Custom,
  },
  {
    label: 'Data Povider',
    value: InstitutionType.DataProvider,
  },
  {
    label: 'DeFi',
    value: InstitutionType.DecentralizedExchange,
  },
  {
    label: 'Broker',
    value: InstitutionType.Broker,
  },
  {
    label: 'Hardware Wallet',
    value: InstitutionType.HardwareWallet,
  },
  {
    label: 'Individual',
    value: InstitutionType.Individual,
  },
  {
    label: 'Entity',
    value: InstitutionType.Entity,
  },
]

export const InstrumentDigitalAssetTypeOptions: EnumOption[] = [
  {
    label: 'Blockchain',
    value: InstrumentDigitalAssetType.Blockchain,
  },
  {
    label: 'Token',
    value: InstrumentDigitalAssetType.Token,
  },
]

export const InstrumentTypeOptions: EnumOption[] = [
  {
    label: 'Currency',
    value: InstrumentType.Currency,
  },
  {
    label: 'Digital Asset',
    value: InstrumentType.DigitalAsset,
  },
  {
    label: 'Derivative',
    value: InstrumentType.Derivative,
  },
  {
    label: 'Index',
    value: InstrumentType.Index,
  },
  {
    label: 'Commodity',
    value: InstrumentType.Commodity,
  },
]

export const IntegrationTypeOptions: EnumOption[] = [
  {
    label: 'SFTP',
    value: IntegrationType.Sftp,
  },
]

export const IntervalOptions: EnumOption[] = [
  {
    label: 'Minute',
    value: Interval.Minute,
  },
  {
    label: 'Hour',
    value: Interval.Hour,
  },
  {
    label: 'Day',
    value: Interval.Day,
  },
  {
    label: 'Month',
    value: Interval.Month,
  },
]

export const InvestorProfileTypeOptions: EnumOption[] = [
  {
    label: 'Individual',
    value: InvestorProfileType.Individual,
  },
  {
    label: 'Business (LLC, Partnership, Corporation, or Foreign Equivalent)',
    value: InvestorProfileType.Business,
  },
  {
    label: 'Trust',
    value: InvestorProfileType.Trust,
  },
]

export const LastSyncResultOptions: EnumOption[] = [
  {
    label: 'Synced',
    value: LastSyncResult.Success,
  },
  {
    label: 'Discrepancies',
    value: LastSyncResult.Discrepancies,
  },
  {
    label: 'Maintenance',
    value: LastSyncResult.Maintenance,
  },
  {
    label: 'CSV upload required',
    value: LastSyncResult.CsvRequired,
  },
  {
    label: 'Invalid credentials',
    value: LastSyncResult.InvalidCredential,
  },
  {
    label: 'Unknown Error',
    value: LastSyncResult.UnknownErr,
  },
  {
    label: 'API Down',
    value: LastSyncResult.APIDown,
  },
  {
    label: 'API Rate Limit Exceeded',
    value: LastSyncResult.APIRateLimitExceeded,
  },
]

export const LegacyUserAccountRoleOptions: EnumOption[] = [
  {
    label: 'Admin',
    value: LegacyUserAccountRole.Admin,
  },
  {
    label: 'Member',
    value: LegacyUserAccountRole.Member,
  },
  {
    label: 'Read Only',
    value: LegacyUserAccountRole.ReadOnly,
  },
]

export const LuminaLedgerTypeOptions: EnumOption[] = [
  {
    label: 'Exchange Trade',
    value: LuminaLedgerType.ExchangeTrade,
  },
  {
    label: 'Exchange Deposit',
    value: LuminaLedgerType.ExchangeDeposit,
  },
  {
    label: 'Exchange Withdrawal',
    value: LuminaLedgerType.ExchangeWithdrawal,
  },
  {
    label: 'Exchange Trade Fee',
    value: LuminaLedgerType.ExchangeTradeFee,
  },
  {
    label: 'Exchange Withdrawal Fee',
    value: LuminaLedgerType.ExchangeWithdrawalFee,
  },
]

export const MarginTransferTypeOptions: EnumOption[] = [
  {
    label: 'Collateral',
    value: MarginTransferType.Collateral,
  },
  {
    label: 'Position',
    value: MarginTransferType.Position,
  },
]

export const MetadataMigrationTypeOptions: EnumOption[] = [
  {
    label: 'Bitgo Trade Product',
    value: MetadataMigrationType.BitgoTradeProduct,
  },
  {
    label: 'Custom Product',
    value: MetadataMigrationType.CustomProduct,
  },
  {
    label: 'Exchange Trade Product',
    value: MetadataMigrationType.ExchangeTradeProduct,
  },
  {
    label: 'Portfolio Product',
    value: MetadataMigrationType.PortfolioProduct,
  },
  {
    label: 'Test Bitgo Trade Product',
    value: MetadataMigrationType.TestBitgoTradeProduct,
  },
  {
    label: 'Test Exchange Trade Product',
    value: MetadataMigrationType.TestExchangeTradeProduct,
  },
  {
    label: 'Custom Instrument',
    value: MetadataMigrationType.CustomInstrument,
  },
  {
    label: 'Default Instrument',
    value: MetadataMigrationType.DefaultInstrument,
  },
  {
    label: 'Institution',
    value: MetadataMigrationType.Institution,
  },
]

export const OSOptions: EnumOption[] = [
  {
    label: 'Mac',
    value: OS.Mac,
  },
  {
    label: 'iOS',
    value: OS.Ios,
  },
  {
    label: 'Windows',
    value: OS.Windows,
  },
  {
    label: 'Windows Mobile',
    value: OS.WindowsMobile,
  },
  {
    label: 'Linux',
    value: OS.Linux,
  },
  {
    label: 'Android',
    value: OS.Android,
  },
  {
    label: 'Chrome',
    value: OS.Chrome,
  },
  {
    label: 'Web',
    value: OS.Web,
  },
  {
    label: 'Blackberry',
    value: OS.Blackberry,
  },
  {
    label: 'Palm',
    value: OS.Palm,
  },
  {
    label: 'Kindle',
    value: OS.Kindle,
  },
  {
    label: 'Xbox',
    value: OS.Xbox,
  },
  {
    label: 'Nintendo',
    value: OS.Nintendo,
  },
  {
    label: 'Playstation',
    value: OS.Playstation,
  },
  {
    label: 'Unknown',
    value: OS.Unknown,
  },
]

export const OrderByOptions: EnumOption[] = [
  {
    label: 'asc',
    value: OrderBy.Asc,
  },
  {
    label: 'asc ignore case',
    value: OrderBy.AscIgnoreCase,
  },
  {
    label: 'desc',
    value: OrderBy.Desc,
  },
  {
    label: 'desc ignore case',
    value: OrderBy.DescIgnoreCase,
  },
]

export const OrderSideOptions: EnumOption[] = [
  {
    label: 'Buy',
    value: OrderSide.Buy,
  },
  {
    label: 'Sell',
    value: OrderSide.Sell,
  },
]

export const OrderStatusOptions: EnumOption[] = [
  {
    label: 'Open',
    value: OrderStatus.Open,
  },
  {
    label: 'Canceled',
    value: OrderStatus.Canceled,
  },
  {
    label: 'Completed',
    value: OrderStatus.Completed,
  },
  {
    label: 'Error',
    value: OrderStatus.Error,
  },
  {
    label: 'Pending Open',
    value: OrderStatus.PendingOpen,
  },
  {
    label: 'Pending Cancel',
    value: OrderStatus.PendingCancel,
  },
  {
    label: 'Scheduled',
    value: OrderStatus.Scheduled,
  },
]

export const OrderTypeOptions: EnumOption[] = [
  {
    label: 'Limit',
    value: OrderType.Limit,
  },
  {
    label: 'Market',
    value: OrderType.Market,
  },
  {
    label: 'Stop',
    value: OrderType.Stop,
  },
  {
    label: 'Stop Limit',
    value: OrderType.StopLimit,
  },
]

export const OrganizationStatusOptions: EnumOption[] = [
  {
    label: 'Waitlisted',
    value: OrganizationStatus.Waitlisted,
  },
  {
    label: 'Onboarding',
    value: OrganizationStatus.Onboarding,
  },
  {
    label: 'Active',
    value: OrganizationStatus.Active,
  },
  {
    label: 'Suspended',
    value: OrganizationStatus.Suspended,
  },
]

export const PortfolioPricingSourceTypeOptions: EnumOption[] = [
  {
    label: 'CryptoCompare',
    value: PortfolioPricingSourceType.CryptoCompare,
  },
  {
    label: 'Lumina',
    value: PortfolioPricingSourceType.Lumina,
  },
]

export const PortfolioReportingFallbackPricingSourceTypeOptions: EnumOption[] = [
  {
    label: 'CryptoCompare',
    value: PortfolioReportingFallbackPricingSourceType.CryptoCompare,
  },
  {
    label: 'Lumina',
    value: PortfolioReportingFallbackPricingSourceType.Lumina,
  },
]

export const PortfolioReportingPricingSourceTypeOptions: EnumOption[] = [
  {
    label: 'CryptoCompare',
    value: PortfolioReportingPricingSourceType.CryptoCompare,
  },
  {
    label: 'CoinMarketCap',
    value: PortfolioReportingPricingSourceType.CoinMarketCap,
  },
  {
    label: 'Binance',
    value: PortfolioReportingPricingSourceType.Binance,
  },
  {
    label: 'Binance US',
    value: PortfolioReportingPricingSourceType.BinanceUs,
  },
]

export const PortfolioTaxLotIDByTypeOptions: EnumOption[] = [
  {
    label: 'Per Wallet/Connection',
    value: PortfolioTaxLotIDByType.Connection,
  },
  {
    label: 'Universal',
    value: PortfolioTaxLotIDByType.Portfolio,
  },
  {
    label: 'Per Account',
    value: PortfolioTaxLotIDByType.Account,
  },
]

export const PortfolioTaxLotIDMethodTypeOptions: EnumOption[] = [
  {
    label: 'First In First Out',
    value: PortfolioTaxLotIDMethodType.Fifo,
  },
  {
    label: 'Last In First Out',
    value: PortfolioTaxLotIDMethodType.Lifo,
  },
  {
    label: 'High Cost First Out',
    value: PortfolioTaxLotIDMethodType.Hifo,
  },
  {
    label: 'Low Cost First Out',
    value: PortfolioTaxLotIDMethodType.Lofo,
  },
  {
    label: 'Average Cost',
    value: PortfolioTaxLotIDMethodType.AverageCost,
  },
]

export const PortfolioTransactionCryptoFiatPricingSourceTypeOptions: EnumOption[] = [
  {
    label: 'CryptoCompare',
    value: PortfolioTransactionCryptoFiatPricingSourceType.CryptoCompare,
  },
  {
    label: 'Coinbase Prime',
    value: PortfolioTransactionCryptoFiatPricingSourceType.CoinbasePrime,
  },
  {
    label: 'Binance US',
    value: PortfolioTransactionCryptoFiatPricingSourceType.BinanceUs,
  },
]

export const PortfolioTransactionFallbackPricingSourceTypeOptions: EnumOption[] = [
  {
    label: 'CryptoCompare',
    value: PortfolioTransactionFallbackPricingSourceType.CryptoCompare,
  },
  {
    label: 'Binance',
    value: PortfolioTransactionFallbackPricingSourceType.Binance,
  },
  {
    label: 'Binance US',
    value: PortfolioTransactionFallbackPricingSourceType.BinanceUs,
  },
]

export const PortfolioTransactionPricingSourceTypeOptions: EnumOption[] = [
  {
    label: 'CryptoCompare',
    value: PortfolioTransactionPricingSourceType.CryptoCompare,
  },
  {
    label: 'Respective Exchanges',
    value: PortfolioTransactionPricingSourceType.Exchange,
  },
]

export const PositionComputationStatusTypeOptions: EnumOption[] = [
  {
    label: 'Processed',
    value: PositionComputationStatusType.Processed,
  },
  {
    label: 'Processing',
    value: PositionComputationStatusType.Processing,
  },
  {
    label: 'Scheduled',
    value: PositionComputationStatusType.Scheduled,
  },
  {
    label: 'Not reconciled',
    value: PositionComputationStatusType.NotReconciled,
  },
  {
    label: 'Has discrepancies',
    value: PositionComputationStatusType.HasDiscrepancies,
  },
  {
    label: 'Error',
    value: PositionComputationStatusType.Error,
  },
  {
    label: 'No positions',
    value: PositionComputationStatusType.Empty,
  },
]

export const PositionTermTypeOptions: EnumOption[] = [
  {
    label: 'Long',
    value: PositionTermType.Long,
  },
  {
    label: 'Short',
    value: PositionTermType.Short,
  },
  {
    label: 'Undetermined',
    value: PositionTermType.Undetermined,
  },
]

export const PositionTypeOptions: EnumOption[] = [
  {
    label: 'Opened',
    value: PositionType.Opened,
  },
  {
    label: 'Closed',
    value: PositionType.Closed,
  },
  {
    label: 'Closed Transferred',
    value: PositionType.ClosedTransferred,
  },
  {
    label: 'Split',
    value: PositionType.Split,
  },
  {
    label: 'Invalidated',
    value: PositionType.Invalidated,
  },
]

export const PriceIntervalTypeOptions: EnumOption[] = [
  {
    label: 'Day',
    value: PriceIntervalType.Day,
  },
  {
    label: 'Hour',
    value: PriceIntervalType.Hour,
  },
  {
    label: 'Minute',
    value: PriceIntervalType.Minute,
  },
  {
    label: 'Point',
    value: PriceIntervalType.Point,
  },
]

export const ProcessingStatusOptions: EnumOption[] = [
  {
    label: 'Pending',
    value: ProcessingStatus.Pending,
  },
  {
    label: 'Processing',
    value: ProcessingStatus.Processing,
  },
  {
    label: 'Completed',
    value: ProcessingStatus.Completed,
  },
]

export const ReportTypeOptions: EnumOption[] = [
  {
    label: 'form 8949',
    value: ReportType.Form8949,
  },
  {
    label: 'exchange balances report',
    value: ReportType.ExchangeBalancesReport,
  },
  {
    label: 'holdings report',
    value: ReportType.HoldingsReport,
  },
  {
    label: 'holdings by account report',
    value: ReportType.HoldingsByAccountReport,
  },
  {
    label: 'holdings by account and blockchain address report',
    value: ReportType.HoldingsByAccountAndBlockchainAddressReport,
  },
  {
    label: 'line items report',
    value: ReportType.LineItemsReport,
  },
  {
    label: 'detail line items report',
    value: ReportType.DetailLineItemsReport,
  },
  {
    label: 'open positions report',
    value: ReportType.OpenPositionsReport,
  },
  {
    label: 'open positions by instrument report',
    value: ReportType.OpenPositionsByInstrumentReport,
  },
  {
    label: 'open positions by instrument and account report',
    value: ReportType.OpenPositionsByInstrumentAndAccountReport,
  },
  {
    label: 'positions report',
    value: ReportType.PositionsReport,
  },
  {
    label: 'purchase sales journal report',
    value: ReportType.PurchaseSalesJournalReport,
  },
  {
    label: 'realized report',
    value: ReportType.RealizedReport,
  },
  {
    label: 'aggregate pricing report',
    value: ReportType.AggregatePricingReport,
  },
  {
    label: 'atweb transactions report',
    value: ReportType.AtwebTransactionsReport,
  },
  {
    label: 'atweb pricing report',
    value: ReportType.AtwebPricingReport,
  },
  {
    label: 'advent geneva transactions report',
    value: ReportType.AdventGenevaTransactionsReport,
  },
  {
    label: 'advent geneva pricing report',
    value: ReportType.AdventGenevaPricingReport,
  },
  {
    label: 'advent geneva transfers report',
    value: ReportType.AdventGenevaTransfersReport,
  },
  {
    label: 'transactions report',
    value: ReportType.TransactionsReport,
  },
  {
    label: 'transfer transactions report',
    value: ReportType.TransferTransactionsReport,
  },
  {
    label: 'balance sheet',
    value: ReportType.BalanceSheet,
  },
  {
    label: 'income statement',
    value: ReportType.IncomeStatement,
  },
  {
    label: 'trial balance',
    value: ReportType.TrialBalance,
  },
  {
    label: 'internal client orders report',
    value: ReportType.InternalClientOrdersReport,
  },
  {
    label: 'internal detail line items report',
    value: ReportType.InternalDetailLineItemsReport,
  },
  {
    label: 'internal exchange orders report',
    value: ReportType.InternalExchangeOrdersReport,
  },
  {
    label: 'internal exchange fills report',
    value: ReportType.InternalExchangeFillsReport,
  },
  {
    label: 'internal historical order book report',
    value: ReportType.InternalHistoricalOrderBookReport,
  },
  {
    label: 'internal tradeblock inbound orders report',
    value: ReportType.InternalTradeblockInboundOrdersReport,
  },
  {
    label: 'internal tradeblock outbound orders report',
    value: ReportType.InternalTradeblockOutboundOrdersReport,
  },
  {
    label: 'internal transactions report',
    value: ReportType.InternalTransactionsReport,
  },
  {
    label: 'manual reconciled transactions export',
    value: ReportType.ManualReconciledTransactionsExport,
  },
  {
    label: 'portfolio export',
    value: ReportType.PortfolioExport,
  },
  {
    label: 'internal portfolio export',
    value: ReportType.InternalPortfolioExport,
  },
  {
    label: 'internal tasks export',
    value: ReportType.InternalTasksExport,
  },
  {
    label: 'internal instruments export',
    value: ReportType.InternalInstrumentsExport,
  },
  {
    label: 'internal exchange products export',
    value: ReportType.InternalExchangeProductsExport,
  },
  {
    label: 'internal institutions export',
    value: ReportType.InternalInstitutionsExport,
  },
]

export const ScopeEntityOptions: EnumOption[] = [
  {
    label: 'BitGo Organization',
    value: ScopeEntity.BitgoOrganization,
  },
  {
    label: 'BitGo Enterprise',
    value: ScopeEntity.BitgoEnterprise,
  },
  {
    label: 'BitGo Wallet',
    value: ScopeEntity.BitgoWallet,
  },
]

export const SettlementStatusOptions: EnumOption[] = [
  {
    label: 'Staged',
    value: SettlementStatus.Staged,
  },
  {
    label: 'Canceled',
    value: SettlementStatus.Canceled,
  },
  {
    label: 'Settled',
    value: SettlementStatus.Settled,
  },
]

export const SourceTypeOptions: EnumOption[] = [
  {
    label: 'Webapp',
    value: SourceType.Webapp,
  },
  {
    label: 'API REST',
    value: SourceType.APIRest,
  },
  {
    label: 'API FIX',
    value: SourceType.APIFix,
  },
]

export const SyncFrequencyTypeOptions: EnumOption[] = [
  {
    label: 'Daily',
    value: SyncFrequencyType.Daily,
  },
  {
    label: 'Hourly',
    value: SyncFrequencyType.Hourly,
  },
]

export const TaskPriorityOptions: EnumOption[] = [
  {
    label: 'High',
    value: TaskPriority.High,
  },
  {
    label: 'Default',
    value: TaskPriority.Default,
  },
  {
    label: 'Low',
    value: TaskPriority.Low,
  },
]

export const TaskSourceOptions: EnumOption[] = [
  {
    label: 'User',
    value: TaskSource.User,
  },
  {
    label: 'Hourly Sync',
    value: TaskSource.CronJobHourlySync,
  },
  {
    label: 'Daily Sync',
    value: TaskSource.CronJobDailySync,
  },
  {
    label: 'Balance Sync',
    value: TaskSource.CronJobBalanceSync,
  },
  {
    label: 'Portfolio Cleanup',
    value: TaskSource.CronJobPortfolioCleanup,
  },
  {
    label: 'Event Service',
    value: TaskSource.EventService,
  },
]

export const TaskStatusOptions: EnumOption[] = [
  {
    label: 'Scheduled',
    value: TaskStatus.Scheduled,
  },
  {
    label: 'Processing',
    value: TaskStatus.Processing,
  },
  {
    label: 'Success',
    value: TaskStatus.Success,
  },
  {
    label: 'Failure',
    value: TaskStatus.Failure,
  },
]

export const TimeInForceOptions: EnumOption[] = [
  {
    label: 'GTC',
    value: TimeInForce.Gtc,
  },
  {
    label: 'GTT',
    value: TimeInForce.Gtt,
  },
  {
    label: 'IOC',
    value: TimeInForce.Ioc,
  },
  {
    label: 'FOK',
    value: TimeInForce.Fok,
  },
]

export const TradeblockInboundOrderStatusOptions: EnumOption[] = [
  {
    label: 'In Progress',
    value: TradeblockInboundOrderStatus.InProgress,
  },
  {
    label: 'Completed',
    value: TradeblockInboundOrderStatus.Completed,
  },
]

export const TradeblockOrderDataTypeOptions: EnumOption[] = [
  {
    label: 'Fill',
    value: TradeblockOrderDataType.Fill,
  },
  {
    label: 'Trade',
    value: TradeblockOrderDataType.Trade,
  },
]

export const TradeblockOutboundOrderStatusOptions: EnumOption[] = [
  {
    label: 'Pending',
    value: TradeblockOutboundOrderStatus.Pending,
  },
  {
    label: 'Completed',
    value: TradeblockOutboundOrderStatus.Completed,
  },
  {
    label: 'Error',
    value: TradeblockOutboundOrderStatus.Error,
  },
]

export const TransferStatusOptions: EnumOption[] = [
  {
    label: 'Signed',
    value: TransferStatus.Signed,
  },
  {
    label: 'Unconfirm',
    value: TransferStatus.Unconfirmed,
  },
  {
    label: 'Confirmed',
    value: TransferStatus.Confirmed,
  },
  {
    label: 'Pending Approval',
    value: TransferStatus.PendingApproval,
  },
  {
    label: 'Removed',
    value: TransferStatus.Removed,
  },
  {
    label: 'Failed',
    value: TransferStatus.Failed,
  },
  {
    label: 'Rejected',
    value: TransferStatus.Rejected,
  },
]

export const UserAuthenticatorTypeOptions: EnumOption[] = [
  {
    label: 'OTP',
    value: UserAuthenticatorType.Otp,
  },
]

export const UserIdentityTypeOptions: EnumOption[] = [
  {
    label: 'Email',
    value: UserIdentityType.Email,
  },
  {
    label: 'Phone',
    value: UserIdentityType.Phone,
  },
  {
    label: 'OAuth',
    value: UserIdentityType.Oauth,
  },
]

export const UserSessionTypeOptions: EnumOption[] = [
  {
    label: 'Custom',
    value: UserSessionType.Custom,
  },
  {
    label: 'OAuth',
    value: UserSessionType.Oauth,
  },
]

export const WebBrowserOptions: EnumOption[] = [
  {
    label: 'App',
    value: WebBrowser.App,
  },
  {
    label: 'IE',
    value: WebBrowser.Ie,
  },
  {
    label: 'Edge',
    value: WebBrowser.Edge,
  },
  {
    label: 'Opera',
    value: WebBrowser.Opera,
  },
  {
    label: 'Firefox',
    value: WebBrowser.Firefox,
  },
  {
    label: 'Chrome',
    value: WebBrowser.Chrome,
  },
  {
    label: 'Safari',
    value: WebBrowser.Safari,
  },
  {
    label: 'Silk',
    value: WebBrowser.Silk,
  },
  {
    label: 'QQ',
    value: WebBrowser.Qq,
  },
  {
    label: 'Samsung',
    value: WebBrowser.Samsung,
  },
  {
    label: 'Yandex',
    value: WebBrowser.Yandex,
  },
  {
    label: 'Nintendo',
    value: WebBrowser.Nintendo,
  },
  {
    label: 'Spotify',
    value: WebBrowser.Spotify,
  },
  {
    label: 'Bot',
    value: WebBrowser.Bot,
  },
  {
    label: 'Unknown',
    value: WebBrowser.Unknown,
  },
]

/// ////////////////////////////////////////////////////////////////////////////
// Objects
/// ////////////////////////////////////////////////////////////////////////////

export interface AccountingLineItem {
  id: string
  organization: Organization
  createdBy: UserAccount
  creationDate: string
  financialAccount: FinancialAccount
  financialAccountConnection: FinancialAccountConnection
  instrument: Instrument
  financialTransaction?: FinancialTransaction
  financialTransactionID: string
  type: AccountingLineItemType
  category?: AccountingLineItemCategory
  isIgnored: boolean
  isResolved: boolean
  ignoredReason?: AccountingLineItemIgnoredReason
  description: string
  quantity: number
  unitPrice?: number
  value?: number
  exchangeProductID: string
  exchangeOrderID: string
  exchangeTradeID: string
  transactionDate: string
  transactionHash: string
  sentAddress: string
  receivedAddress: string
  source: AccountingLineItemSourceType
  transactionDateMarketPrice: number
  bitgoTransferID: string
  bitgoPendingApprovalID: string
  assetChartOfAccount?: ChartOfAccount
  liabilityChartOfAccount?: ChartOfAccount
  equityChartOfAccount?: ChartOfAccount
  expenseChartOfAccount?: ChartOfAccount
  revenueChartOfAccount?: ChartOfAccount
  sentAddressBook?: AddressBook
  receivedAddressBook?: AddressBook
}

export interface AccountingLineItemAggregations {
  financialAccount: Array<FinancialAccountAggregationResult>
  financialAccountConnection: Array<FinancialAccountConnectionAggregationResult>
  instrument: Array<InstrumentAggregationResult>
  type: Array<StringAggregationResult>
  category: Array<StringAggregationResult>
  source: Array<StringAggregationResult>
}

export interface AccountingLineItemResponse {
  affectedRows: number
  returning: Array<AccountingLineItem>
}

export interface AccountingLineItemsAggregationResponse {
  results?: Array<AccountingLineItemsResult>
  totalCount: number
}

export interface AccountingLineItemsQueryResponse {
  aggregations?: AccountingLineItemAggregations
  results: Array<AccountingLineItem>
  totalCount: number
}

export interface AccountingLineItemsResult {
  aggregate?: Aggregate
  group: AccountingLineItem
}

export interface AddressBook {
  institution: Institution
  blockchainInstrument: Instrument
  blockchainAddress: string
  type: AddressBookType
}

export interface AdventGenevaPricingEntry {
  recordAction: string
  price: number
  priceDate: string
  priceList: string
  priceDenomination: string
  investment: string
}

export interface AdventGenevaTransactionsAggregations {
  financialAccountConnection: Array<FinancialAccountConnectionAggregationResult>
}

export interface AdventGenevaTransactionsEntry {
  recordAction: string
  keyValue: string
  recordType: string
  portfolio: string
  fundStructure: string
  strategy: string
  eventDate: string
  settleDate: string
  actualSettleDate: string
  brokerName: string
  locationAccount: string
  investment: string
  counterInvestment: string
  quantity: number
  price: number
  tradeExpensesExpenseNumber: string
  tradeExpensesExpenseCode: string
  tradeExpensesExpenseAmt: string
  totCommission: string
  netInvestmentAmount: number
  netCounterAmount: number
  tradeFX: string
  priceDenomination: string
  counterFXDenomination: string
}

export interface AdventGenevaTransactionsQueryResponse {
  aggregations?: AdventGenevaTransactionsAggregations
  results: Array<AdventGenevaTransactionsEntry>
  totalCount: number
}

export interface AdventGenevaTransfersEntry {
  portfolio: string
  investment: string
  eventDate: string
  settleDate: string
  actualSettleDate: string
  quantity: number
  locationAccount: string
  strategy: string
  oldFundStructure: string
  transferType: string
  newLocationAccount: string
  newStrategy: string
  fundStructure: string
}

export interface AdventGenevaTransfersQueryResponse {
  results: Array<AdventGenevaTransfersEntry>
  totalCount: number
}

export interface Aggregate {
  count: number
}

export interface AggregatePricingEntry {
  time: string
  source: string
  instrumentSymbol: string
  marketPrice: number
}

export interface AssociateFileWithPortfolioConversionResponse {
  affectedRows: number
  fileID: string
}

export interface AtwebTransactionsEntry {
  sequence: number
  date: string
  buySell: string
  type: string
  primaryID: string
  quantity: number
  unitPrice: number
  totalCost: number
  portfolioID: string
  settlementDate: string
}

export interface AtwebTransactionsQueryResponse {
  results: Array<AtwebTransactionsEntry>
  totalCount: number
}

export interface ChartOfAccount {
  id: string
  type: ChartOfAccountTypeReference
  name: string
  description: string
  accountNumber: string
}

export interface ChartOfAccountTypeReference {
  value: string
  classification: string
  type: string
  subtype: string
  typeLabel: string
  subtypeLabel: string
}

export interface ClientOrder {
  id: string
  clientOrderID?: string
  creationDate: string
  modifiedDate: string
  scheduledDate?: string
  startDate?: string
  completionDate?: string
  tradeDate?: string
  postDate?: string
  settlementId?: string
  settlementDate?: string
  settlementStatus: SettlementStatus
  organization: Organization
  createdBy: UserAccount
  product: ExchangeProduct
  baseInstrumentID: string
  baseInstrument: Instrument
  quoteInstrumentID: string
  quoteInstrument: Instrument
  algoStrategy: string
  side: OrderSide
  quantity: number
  funds: number
  userIntent: ClientOrderUserIntent
  limitPrice?: number
  params: ClientOrderParams
  status: OrderStatus
  fillBaseQuantities?: number
  fillQuoteQuantitiesAdjusted?: number
  averageFillPriceAdjusted?: number
  transaction?: FinancialTransaction
  isDelayed: boolean
  isInterrupted: boolean
  source: SourceType
  collateralType: CollateralType
  canceledReason?: CanceledReason
  canceledBy?: UserAccount
  errorCode?: string
  exchangeOrders: ExchangeOrdersAggregationResponse
}

export interface ClientOrderParams {
  aggression?: Aggression
  movePercentage?: number
  percentLimitPrice?: number
  maxPostSize?: number
  orderDuration?: number
  intervalLength?: number
  tolerancePct?: number
  sweepPct?: number
  repriceSeconds?: number
  repriceRandomizationPct?: number
  postExchangeCount?: number
  maxOrderCount?: number
}

export interface ClientOrderResponse {
  affectedRows: number
  returning: Array<ClientOrder>
}

export interface ClientOrdersAggregationResponse {
  results?: Array<ClientOrdersResult>
  totalCount: number
}

export interface ClientOrdersResult {
  aggregate?: Aggregate
  group: ClientOrder
}

export interface CollateralQuantityValue {
  quantity: string
  value: string
}

export interface CreateFileURLResponse {
  returning: string
}

export interface Credentials {
  id: string
  type: CredentialsType
  hostname: string
  port: number
  userID: string
}

export interface DefaultMarginRequirements {
  marginCallPercentage: string
  liquidationPercentage: string
  netOpenPositionLimit: string
}

export interface DeletePortfolioConversionFileResponse {
  affectedRows: number
}

export interface ExchangeFill {
  id: string
  creationDate: string
  createdBy: UserAccount
  organization: Organization
  clientOrder: ClientOrder
  exchangeOrder: ExchangeOrder
  side: OrderSide
  baseQuantity: number
  quoteQuantity: number
  adjustedPrice: number
  fillQuoteQuantityAdjusted: number
  fillQuoteQuantityAdjustedRounded: number
  aggressorSide: boolean
  baseInstrument: Instrument
  quoteInstrument: Instrument
  spreadInstrument: Instrument
  exchangeTradeDate: string
  postDate?: string
}

export interface ExchangeFillsAggregationResponse {
  results?: Array<ExchangeFillsResult>
  totalCount: number
}

export interface ExchangeFillsResult {
  aggregate?: Aggregate
  group: ExchangeFill
}

export interface ExchangeOrder {
  id: string
  creationDate: string
  modifiedDate: string
  tradeDate?: string
  postDate?: string
  organization: Organization
  clientOrder: ClientOrder
  createdBy: UserAccount
  baseInstrument: Instrument
  quoteInstrument: Instrument
  side: OrderSide
  type: OrderType
  quantity: number
  limitPrice?: number
  timeInForce: TimeInForce
  status: OrderStatus
  fillBaseQuantities?: number
  fillQuoteQuantitiesAdjusted?: number
  averageFillPriceAdjusted?: number
  errorCode?: string
  transaction?: FinancialTransaction
  fills: ExchangeFillsAggregationResponse
}

export interface ExchangeOrdersAggregationResponse {
  results?: Array<ExchangeOrdersResult>
  totalCount: number
}

export interface ExchangeOrdersResult {
  aggregate?: Aggregate
  group: ExchangeOrder
}

export interface ExchangeProduct {
  id: string
  identifier: string
  websocketIdentifier: string
  institution: Institution
  baseInstrument: Instrument
  quoteInstrument: Instrument
  baseMinSize: string
  baseMaxSize: string
  quoteIncrement: string
  quoteMinSize: string
  baseIncrement: string
  conversionSymbol: string
  isTradeDisabled: boolean
  isInactive: boolean
  isTestProduct: boolean
  ingestionReferenceId: string
}

export interface ExchangeProductResponse {
  affectedRows: number
  returning: Array<ExchangeProduct>
}

export interface File {
  id: string
  entityStatus: EntityStatus
  organization: Organization
  createdBy: UserAccount
  creationDate: string
  contentType: string
  name: string
  size: number
  associatedEntityID: string
  associatedEntityType?: EntityType
  associatedEntityName?: string
  associatedFinancialAccountConnection?: FinancialAccountConnection
  numAssociatedLineItems: number
  numAssociatedTransactions: number
  numAssociatedPricingOverrides: number
  isIngestedIntoAssociatedEntity: boolean
  zipMetadata?: any
  error: string
}

export interface FilesQueryResponse {
  results: Array<File>
  totalCount: number
}

export interface FinancialAccount {
  id: string
  type?: FinancialAccountType
  bitgoWalletType?: BitgoWalletType
  bitgoWalletStartDate: string
  organization: Organization
  createdBy: UserAccount
  creationDate: string
  connection: FinancialAccountConnection
  instrument?: Instrument
  institution: Institution
  blockchainAddress: string
  isDisabled: boolean
  isManagedByConnection: boolean
  lastBalancedSyncTime?: string
  lastBalancedSyncBlockheight: number
  name: string
  referenceID: string
  referenceName: string
  shouldHideCSVUploadPrompt: boolean
  syncVersion: number
  lineItems: AccountingLineItemsQueryResponse
  positions: Array<PortfolioPosition>
  balances: Array<FinancialAccountBalance>
  files: Array<File>
  adventGenevaName: string
  isBitgoPaygWallet: boolean
  roles: Array<UserAccountRole>
  numAssociatedLineItems: number
  numAssociatedTransactions: number
}

export interface FinancialAccountAggregationResult {
  result: FinancialAccount
  count: number
}

export interface FinancialAccountAggregations {
  instrument: Array<InstrumentAggregationResult>
  bitgoWalletType: Array<StringAggregationResult>
}

export interface FinancialAccountBalance {
  instrument: Instrument
  adjustedQuantity: number
  luminaQuantity: number
  availableQuantity: number
  withdrawableQuantity: number
  totalQuantity: number
  heldQuantity: number
  tradableQuantity: number
  numAdjustments: number
  numEntries: number
  firstTransactionDate: string
  lastTransactionDate: string
  stakedQuantity: number
  unstakedQuantity: number
  unstakingQuantity: number
  borrowQuantity: number
  supplyQuantity: number
  numBorrowEntries: number
  numSupplyEntries: number
  totalMarketValue: number
  availableMarketValue: number
  adjustedMarketValue: number
}

export interface FinancialAccountBalanceSnapshot {
  financialAccountConnection: FinancialAccountConnection
  financialAccount?: FinancialAccount
  instrument: Instrument
  time: string
  available: number
  balance: number
}

export interface FinancialAccountBalanceSnapshotAggregationResult {
  financialAccount: Array<FinancialAccountAggregationResult>
  financialAccountConnection: Array<FinancialAccountConnectionAggregationResult>
  instrument: Array<InstrumentAggregationResult>
}

export interface FinancialAccountBalanceSnapshotQueryResponse {
  aggregations?: FinancialAccountBalanceSnapshotAggregationResult
  results: Array<FinancialAccountBalanceSnapshot>
  totalCount: number
}

export interface FinancialAccountConnection {
  id: string
  entityStatus: EntityStatus
  type?: FinancialConnectionType
  credentialsType?: FinancialConnectionCredentialsType
  organization: Organization
  createdBy: UserAccount
  creationDate: string
  institution: Institution
  name: string
  syncStatus?: FinancialAccountConnectionSyncStatus
  autoUpdates: boolean
  isInitialized: boolean
  isManagedByBitgo: boolean
  lastGoodSync?: string
  lastSync?: string
  apiKey: string
  publicAddress: string
  userID: string
  financialAccounts: Array<FinancialAccount>
  isSubAccount: boolean
  parentFinancialAccountConnection?: FinancialAccountConnection
  lastSyncResult: LastSyncResult
  numAssociatedLineItems: number
  numAssociatedTransactions: number
  isAutoUpdateEnabled: boolean
  isTradeEnabled: boolean
  isBlockchainFeeLineItemEnabled: boolean
  files: Array<File>
}

export interface FinancialAccountConnectionAggregationResult {
  result: FinancialAccountConnection
  count: number
}

export interface FinancialAccountConnectionResponse {
  affectedRows: number
  returning: Array<FinancialAccountConnection>
}

export interface FinancialAccountConnectionsQueryResponse {
  results: Array<FinancialAccountConnection>
  totalCount: number
}

export interface FinancialAccountResponse {
  affectedRows: number
  returning: Array<FinancialAccount>
}

export interface FinancialAccountsQueryResponse {
  aggregations?: FinancialAccountAggregations
  results: Array<FinancialAccount>
  totalCount: number
}

export interface FinancialStatementEntry {
  classification: string
  type: string
  subtype: string
  typeLabel: string
  subtypeLabel: string
  name: string
  value: number
}

export interface FinancialTransaction {
  id: string
  organization: Organization
  createdBy: UserAccount
  creationDate: string
  modifiedBy: UserAccount
  modifiedDate: string
  type?: FinancialTransactionType
  subtype?: FinancialTransactionSubtype
  source: FinancialTransactionSourceType
  referenceId: string
  notes: string
  fees: number
  institution?: Institution
  instrument: Instrument
  quantity: number
  totalAmount: number
  unitPrice: number
  tradeDate: string
  settlementDate: string
  productID: string
  transactionHash: string
  accountingLineItem: AccountingLineItem
  lineItems: AccountingLineItemsQueryResponse
  isTruncatedForLite: boolean
  openedPositions: Array<Position>
  closedPositions: Array<Position>
  attachments: Array<File>
  exchangeOrder?: ExchangeOrder
  clientOrder?: ClientOrder
  acquisitionDate?: string
  blockchainMigrationFromAccount?: FinancialAccount
  costBasisAmount: number
  isCostBasisSetToMarketPrice: boolean
  isPending: boolean
}

export interface FinancialTransactionAggregations {
  institution: Array<InstitutionAggregationResult>
  instrument: Array<InstrumentAggregationResult>
  subtype: Array<StringAggregationResult>
  type: Array<StringAggregationResult>
  source: Array<StringAggregationResult>
}

export interface FinancialTransactionResponse {
  affectedRows: number
  returning: Array<FinancialTransaction>
}

export interface FinancialTransactionsAggregationResponse {
  results?: Array<FinancialTransactionsResult>
  totalCount: number
}

export interface FinancialTransactionsQueryResponse {
  aggregations?: FinancialTransactionAggregations
  results: Array<FinancialTransaction>
  totalCount: number
}

export interface FinancialTransactionsResult {
  aggregate?: Aggregate
  group: FinancialTransaction
}

export interface FormData {
  id: string
  data: any
}

export interface HistoricalEquity {
  time: string
  marketPrice: number
  marketValue: number
  marketValueWithoutAdjustment: number
}

export interface HistoricalOrderBookAggregations {
  exchange: Array<StringAggregationResult>
  product: Array<StringAggregationResult>
}

export interface HistoricalOrderBookReport {
  aggregations?: HistoricalOrderBookAggregations
  results?: Array<HistoricalOrderBookReportRow>
  totalCount: number
}

export interface HistoricalOrderBookReportRow {
  time: string
  level: number
  product: string
  exchange: string
  bid?: number
  bidSize?: number
  ask?: number
  askSize?: number
  spread?: number
}

export interface HoldingsByAccountAndBlockchainAddressReportQueryResponse {
  results: Array<HoldingsReportEntry>
  totalCount: number
}

export interface HoldingsByAccountReportQueryResponse {
  results: Array<HoldingsReportEntry>
  totalCount: number
}

export interface HoldingsReportEntry {
  financialAccountConnection?: FinancialAccountConnection
  financialAccount?: FinancialAccount
  blockchainAddress: string
  instrumentID: string
  instrumentSymbol: string
  instrumentName: string
  quantity: number
  marketPrice: number
  marketValue: number
}

export interface HoldingsReportQueryResponse {
  results: Array<HoldingsReportEntry>
  totalCount: number
}

export interface Institution {
  id: string
  type?: InstitutionType
  identifier: string
  name: string
  hasAPIKey: boolean
  hasAPISecret: boolean
  hasPassphrase: boolean
  hasUserID: boolean
  isSupported: boolean
  isTradeCSVUploadSupported: boolean
  logoURL: string
  websiteURL: string
  digitalAssetExplorerAddressURLPattern: string
  notes: string
  addressBook: Array<AddressBook>
  creationDate: string
}

export interface InstitutionAggregationResult {
  result: Institution
  count: number
}

export interface InstitutionResponse {
  affectedRows: number
  returning: Array<Institution>
}

export interface InstitutionsQueryResponse {
  results: Array<Institution>
  totalCount: number
}

export interface Instrument {
  id: string
  type: InstrumentType
  symbol: string
  identifier: string
  coinMarketCapID: number
  cryptoCompareID: number
  bitgoSymbol: string
  name: string
  rank: number
  logoURL: string
  websiteURL: string
  redditURL: string
  twitterURL: string
  digitalAssetType?: InstrumentDigitalAssetType
  digitalAssetDecimalPlaces: number
  digitalAssetSourceCodeURL: string
  digitalAssetExplorerURL: string
  digitalAssetExplorerTransactionURLPattern: string
  digitalAssetPlatformInstrument?: Instrument
  digitalAssetTokenAddress: string
  displayDecimalPlaces: number
  historicalData: Array<InstrumentPrice>
  batchHistoricalData: Array<InstrumentPriceData>
  news: Array<NewsArticle>
  summary?: InstrumentSummary
  isPrivate: boolean
  numAssociatedLineItems: number
  numAssociatedPricingOverrides: number
  ingestionReferenceID: string
}

export interface InstrumentAggregationResult {
  result: Instrument
  count: number
  totalQuantity: number
}

export interface InstrumentAggregations {
  type: Array<StringAggregationResult>
}

export interface InstrumentMapping {
  id: string
  organizationID: string
  userAccountID: string
  portfolioID: string
  instrumentID: string
  alias: string
}

export interface InstrumentPrice {
  time: string
  open: number
  high: number
  low: number
  close: number
  baseVolume: number
  quoteVolume: number
}

export interface InstrumentPriceData {
  source: string
  data: Array<InstrumentPrice>
}

export interface InstrumentResponse {
  affectedRows: number
  returning: Array<Instrument>
}

export interface InstrumentSummary {
  open24h: number
  high24h: number
  low24h: number
  marketCap: number
  percentChange24h: number
  price: number
  priceChange24h: number
  supply?: number
  volume24h: number
  volume24hTo: number
}

export interface InstrumentsQueryResponse {
  aggregations?: InstrumentAggregations
  results: Array<Instrument>
  totalCount: number
}

export interface Integration {
  id: string
  type: IntegrationType
  name: string
  credentials?: Credentials
}

export interface IntegrationResponse {
  affectedRows: number
  returning: Array<Integration>
}

export interface IntegrationsQueryResponse {
  results: Array<Integration>
  totalCount: number
}

export interface InvestorProfile {
  id: string
  type: InvestorProfileType
  identityFirstName: string
  identityLastName: string
  identityDateOfBirth?: string
  countryOfResidence: string
  identityCountryOfResidence: string
  identityCountryOfCitizenship: string
  identityPassportDocument?: File
  identityFrontIDDocuemnt?: File
  identityBackIDDocuemnt?: File
  identityPhone: string
  identityAddress1: string
  identityAddress2: string
  identityCity: string
  identityState: string
  identityPostalCode: string
  businessLegalName: string
  businessStateOfRegistration: string
  countryOfRegistration: string
  businessCountryOfRegistration: string
  businessEin: string
  businessRegistrationNumber: string
  businessFormationDocuments: Array<File>
  businessAddress1: string
  businessAddress2: string
  businessCity: string
  businessState: string
  businessPostalCode: string
  businessCreatorJobTitle: string
  numMajorityOwners: number
  isCreatorMajorityOwner: boolean
  businessIsCreatorMajorityOwner: boolean
  isCreatorTrustee: boolean
  businessIsCreatorControllingOfficer: boolean
  businessIsCreatorAuthorizedSignatory: boolean
  authorizedSignatoryFirstName: string
  authorizedSignatoryLastName: string
  authorizedSignatoryEmail: string
  authorizedSignatoryJobTitle: string
}

export interface InvestorProfileResponse {
  affectedRows: number
  returning: Array<InvestorProfile>
}

export interface LuminaOrganizationAggregationResult {
  result: Organization
  count: number
}

export interface MarginClient {
  organization: Organization
  portfolio: Portfolio
  marginBalance: string
  nopLimit: string
  nopUsed: string
  nopRemaining: string
  nopPotential: string
  unrealizedPnL: string
  collateralValue: string
  collateralRequirement: string
}

export interface MarginPercentageSummary {
  organization: Organization
  portfolio: Portfolio
  marginPercentage: string
  collateralValue: string
  marginRequirement: string
  marginCallAlertTime?: string
  liquidationAlertTime?: string
  nopPercentageAlertTime?: string
  marginPercentageAlertTime?: string
}

export interface MarginPercentageSummaryAggregations {
  organization: Array<StringAggregationResult>
  portfolio: Array<StringAggregationResult>
}

export interface MarginPercentageSummaryQueryResponse {
  aggregations?: MarginPercentageSummaryAggregations
  totalCount: number
  results: Array<MarginPercentageSummary>
}

export interface MarginPortfolioCollateralDetail {
  instrument: Instrument
  balance: string
  price: string
  collateralValue: string
}

export interface MarginPortfolioCollateralDetails {
  collateralDetails: Array<MarginPortfolioCollateralDetail>
  collateralTotalValue: string
}

export interface MarginPortfolioNopCurrencies {
  instrument: Instrument
  position: string
  nopUsedPercentage: string
  unrealizedPnL: string
}

export interface MarginPortfolioOpenPositions {
  nopLimit: string
  nopUsed: string
  unrealizedPnL: string
  currencies: Array<MarginPortfolioNopCurrencies>
}

export interface MarginPortfolioProjectedNop {
  nopLimit: string
  nopUsed: string
  nopProjected: string
}

export interface MarginPortfolioSummary {
  collateral: string
  collateralPercentage: string
  marginBalance: string
  nopLimit: string
  nopUsed: string
  nopRemaining: string
  nopPotential: string
  totalMarginRequirement: string
}

export interface MarginPortfolioTransaction {
  time: string
  transaction: string
  nopChange: string
  nopUsed: string
}

export interface MarginSettings {
  portfolioID?: string
  marginCallPercentage: string
  liquidationPercentage: string
  nopLimit: string
  tiers: Array<MarginSettingsTier>
  marginCallAlertTime?: string
  liquidationAlertTime?: string
}

export interface MarginSettingsTier {
  id?: string
  tier: number
  currencies: Array<Instrument>
  marginRequirementPercentage: string
}

export interface MarginSummariesAggregations {
  name: Array<StringAggregationResult>
}

export interface MarginSummariesQueryResponse {
  aggregations?: MarginSummariesAggregations
  totalCount: number
  results: Array<MarginClient>
}

export interface MarginSummaryCollateralCurrency {
  instrument: Instrument
  totalCollateral: CollateralQuantityValue
  totalCollateralAvailable: CollateralQuantityValue
  totalCollateralShort: CollateralQuantityValue
}

export interface MarginSummaryCollateralValues {
  totalCollateralValue: string
  totalCollateralAvailableValue: string
  totalCollateralShortValue: string
  collateralCurrencies: Array<MarginSummaryCollateralCurrency>
}

export interface MarginSummaryTotalQueryResponse {
  totalRequirement: string
  totalNopUsed: string
  totalNopPotential: string
  collateralValues: MarginSummaryCollateralValues
}

export interface MarginTransferAmountResponse {
  quantity: string
  instrument: Instrument
}

export interface MarginTransferBalancesResponse {
  trading: MarginTransferAmountResponse
  position?: MarginTransferAmountResponse
  collateral?: MarginTransferAmountResponse
}

export interface MarginTransferResponse {
  id: string
  financialAccountID: string
  transferType: MarginTransferType
  amount: MarginTransferAmountResponse
  memo: string
  createdAt: string
  updatedAt: string
  balances?: MarginTransferBalancesResponse
}

export interface MutationResponse {
  affectedRows: number
}

export interface NewsArticle {
  source: any
  author: string
  title: string
  description: string
  url: string
  urlToImage: string
  publishedAt: string
}

export interface Notification {
  portfolio?: Portfolio
  creationDate: string
  status: string
  title: string
}

export interface OpenPositionByInstrumentReportEntry {
  financialAccountConnection?: FinancialAccountConnection
  financialAccount?: FinancialAccount
  instrumentID: string
  instrumentSymbol: string
  instrumentName: string
  averageCost: number
  costBasis: number
  quantity: number
  marketPrice: number
  marketValue: number
  totalPercentReturn: number
  totalReturn: number
}

export interface OpenPositionsByInstrumentReportQueryResponse {
  results: Array<OpenPositionByInstrumentReportEntry>
  totalCount: number
}

export interface OpenPositionsReportQueryResponse {
  results: Array<PositionReportEntry>
  totalCount: number
}

export interface OrderBookAnalysisExchangeEntry {
  exchange: string
  cost: number
  size: number
}

export interface OrderBookAnalysisResponse {
  entries: Array<OrderBookAnalysisResponseEntry>
}

export interface OrderBookAnalysisResponseEntry {
  exchange: string
  cost: number
  size: number
  breakdown: Array<OrderBookAnalysisExchangeEntry>
}

export interface Organization {
  id: string
  creationDate: string
  status: OrganizationStatus
  name: string
  isAtwebEnabled: boolean
  isAdventGenevaEnabled: boolean
  isFirstSyncCompleted: boolean
  locale: string
  onboardingQuestionaire?: FormData
  portfolios: Array<Portfolio>
  defaultTaskPriority: TaskPriority
  version: number
}

export interface OrganizationResponse {
  affectedRows: number
  returning: Array<Organization>
}

export interface PendingApproval {
  id: string
  coin: string
  createDate: string
  info: PendingApprovalInfo
  state: string
  scope: string
  approvalsRequired: number
  singleRunResults: Array<PendingApprovalSingleRunResult>
  resolvers: Array<PendingApprovalResolver>
}

export interface PendingApprovalInfo {
  type: string
  transactionRequest: PendingApprovalTransactionInfo
}

export interface PendingApprovalRecipient {
  id: string
  address: string
}

export interface PendingApprovalResolver {
  date: string
  resolutionType: string
}

export interface PendingApprovalSingleRunResult {
  id: string
  ruleID: string
  triggered: boolean
}

export interface PendingApprovalTransactionInfo {
  comment?: string
  recipients: Array<PendingApprovalRecipient>
  isUnsigned: boolean
}

export interface Portfolio {
  id: string
  bitgoEnterpriseID: string
  name: string
  isPeriodicSyncEnabled: boolean
  isBalanceSyncEnabled: boolean
  createdBy: UserAccount
  creationDate: string
  endOfDayTime: string
  endOfDayTimeZone: string
  functionalCurrency: Instrument
  financialAccounts: Array<FinancialAccount>
  investorProfile?: InvestorProfile
  organization: Organization
  portfolioRoles: Array<UserAccountRole>
  portfolioPricingSource: PortfolioPricingSourceType
  reportingPricingSource: PortfolioReportingPricingSourceType
  reportingFallbackPricingSource: PortfolioReportingFallbackPricingSourceType
  transactionCryptoFiatPricingSource: PortfolioTransactionCryptoFiatPricingSourceType
  transactionFallbackPricingSource: PortfolioTransactionFallbackPricingSourceType
  transactionPricingSource: PortfolioTransactionPricingSourceType
  taxLotComputationStatus: PositionComputationStatusType
  taxLotIDMethod: PortfolioTaxLotIDMethodType
  taxLotIDBy: PortfolioTaxLotIDByType
  historicalEquities: Array<HistoricalEquity>
  positions: PortfolioPosition
  isBlotterEnabled: boolean
  hasTradingWallet: boolean
  countLimit: number
  isAtwebEnabled: boolean
  atwebType: string
  atwebID: string
  isAdventGenevaEnabled: boolean
  adventGenevaInstruments: Array<InstrumentMapping>
  adventGenevaPortfolioName: string
  adventGenevaFundStructure: string
  adventGenevaStrategy: string
  adventGenevaBrokerName: string
  adventGenevaTradeExpensesExpenseNumber: string
  adventGenevaTotalCommission: string
  adventGenevaPriceList: string
  adventGenevaOldFundStructure: string
  adventGenevaTransferType: string
  adventGenevaNewStrategy: string
  adventGenevaQuantityDecimal: number
  adventGenevaNetInvestmentAmountDecimal: number
  adventGenevaNetCounterAmountDecimal: number
  adventGenevaPriceDecimal: number
  isChartOfAccountEnabled: boolean
  chartOfAccounts: Array<ChartOfAccount>
  isAccountAutoClassificationEnabled: boolean
  financialAccountConnections: Array<FinancialAccountConnection>
  isSecurityMasterEnabled: boolean
  files: Array<File>
  conversionFile?: File
  conversionAsOfDate?: string
  shouldIncludeFeesInTransactions: boolean
  shouldSmartReconcileDiscrepancies: boolean
  shouldSmartResolveFeesAsPaidRebatesAsEarned: boolean
  shouldSmartResolveTransfersWithoutTransactionHash: boolean
  shouldSmartResolveSentFunctionalCurrencyAsWithdrawals: boolean
  shouldSmartResolveReceivedFunctionalCurrencyAsDeposits: boolean
  shouldSmartResolveBorrowTransactions: boolean
  shouldSmartResolveLendTransactions: boolean
  shouldSmartResolveSentAsTransferOuts: boolean
  shouldSmartResolveReceivedAsTransferIns: boolean
  blockchainTransferPercentThreshold: number
  isPortfolioProfessionalEnabled: boolean
  isPortfolioInstitutionalEnabled: boolean
  isPortfolioAPIEnabled: boolean
  isTaxEnabled: boolean
  isTradeEnabled: boolean
  isTradeAPIEnabled: boolean
  isMarginTradeEnabled: boolean
  isReactOnly: boolean
  shouldUsersViewAllWallets: boolean
}

export interface PortfolioPosition {
  children: Array<PortfolioPosition>
  account?: FinancialAccount
  instrument: Instrument
  numTransactions: number
  quantity: number
  marketValueWithoutAdjustment: number
  lastDayReturn: number
  lastDayPercentReturn: number
  numUnresolvedLineItems: number
  costBasis: number
  marketPrice: number
  marketValue: number
  averageCost: number
  percentOfPortfolio: number
  totalPercentReturn: number
  totalReturn: number
}

export interface PortfolioResponse {
  affectedRows: number
  returning: Array<Portfolio>
}

export interface Position {
  id: string
  organization: Organization
  createdBy: UserAccount
  creationDate: string
  instrument: Instrument
  acquisitionFinancialTransaction?: FinancialTransaction
  dispositionFinancialTransaction?: FinancialTransaction
  parentPosition?: Position
  type?: PositionType
  costBasis: number
  proceeds?: number
  quantity: number
  acquisitionDateMarketPrice?: number
  term?: PositionTermType
  acquisitionDate: string
  dispositionDate?: string
}

export interface PositionReportEntry {
  type: PositionType
  financialAccountName: string
  instrumentName: string
  instrumentSymbol: string
  transactionID: string
  costBasis: number
  quantity: number
  acquisitionDate: string
  dispositionDate?: string
  acquisitionFinancialTransactionID: string
  dispositionFinancialTransactionID: string
  marketValue: number
  pricePerUnit: number
}

export interface PositionsReportAggregations {
  type: Array<StringAggregationResult>
  financialAccount: Array<FinancialAccountAggregationResult>
  instrument: Array<InstrumentAggregationResult>
}

export interface PositionsReportQueryResponse {
  aggregations?: PositionsReportAggregations
  results: Array<PositionReportEntry>
  totalCount: number
}

export interface PricingOverride {
  id: string
  interval: PriceIntervalType
  baseInstrument: Instrument
  quoteInstrument: Instrument
  time: string
  close: number
  notes: string
}

export interface PricingOverrideAggregations {
  baseInstrument: Array<InstrumentAggregationResult>
}

export interface PricingOverrideResponse {
  affectedRows: number
  returning: Array<PricingOverride>
}

export interface PricingOverridesQueryResponse {
  aggregations?: PricingOverrideAggregations
  results: Array<PricingOverride>
  totalCount: number
}

export interface PrimeTradingFill {
  id: string
  orderID: string
  externalClientOrderID: string
  orderStatus: string
  status: string
  externalOrderID: string
  externalFillID: string
  liquiditySourceOrderID: string
  liquiditySourceFillID: string
  baseAmount: string
  quoteAmount: string
  liquiditySourceAccountID: string
  feeRevenueCurrency: string
  feeExpenseCurrency: string
  isReconciliation: boolean
  feeRevenueAmount: string
  feeExpenseAmount: string
  executionTime: string
  createdAt: string
}

export interface PurchaseSalesJournalAggregations {
  instrument: Array<InstrumentAggregationResult>
}

export interface PurchaseSalesJournalEntry {
  transactionID: string
  transactionType: FinancialTransactionType
  instrumentID: string
  instrumentName: string
  instrumentSymbol: string
  transactionDate: string
  quantity: number
  costBasis: number
  transactionHash: string
  sentAddress: string
  receivedAddress: string
  exchangeProductID: string
}

export interface PurchaseSalesJournalQueryResponse {
  aggregations?: PurchaseSalesJournalAggregations
  results: Array<PurchaseSalesJournalEntry>
  totalCount: number
}

export interface RealizedReportAggregations {
  instrument: Array<InstrumentAggregationResult>
}

export interface RealizedReportEntry {
  institution?: Institution
  financialAccount?: FinancialAccount
  instrumentID: string
  instrumentName: string
  instrumentSymbol: string
  transactionType: FinancialTransactionType
  transactionSubtype: FinancialTransactionSubtype
  transactionNotes: string
  dispositionDate: string
  acquisitionDate: string
  quantity: number
  proceeds: number
  costBasis: number
  realizedReturn: number
  realizedReturnPercentage: number
  dispositionFinancialTransactionID: string
  acquisitionFinancialTransactionID: string
  transactionHash: string
  sentAddress: string
  receivedAddress: string
  exchangeProductID: string
  term?: PositionTermType
}

export interface RealizedReportQueryResponse {
  aggregations?: RealizedReportAggregations
  results: Array<RealizedReportEntry>
  totalCount: number
}

export interface SpreadRateTier {
  id: string
  organization: Organization
  exchangeProduct?: ExchangeProduct
  spreadRate: number
}

export interface StringAggregationResult {
  result: string
  count: number
}

export interface Summary {
  numUnreconciledLineItems: number
}

export interface SystemStatus {
  trade: TradeStatus
}

export interface TradeConnectionBalance {
  instrument: Instrument
  balance: number
  available: number
  held: number
}

export interface TradeProduct {
  id: string
  name: string
  baseInstrument: Instrument
  quoteInstrument: Instrument
  exchanges: Array<Institution>
}

export interface TradeSettings {
  isEnabled: boolean
  modifiedDate: string
}

export interface TradeStatus {
  isEnabled: boolean
  isTradeOpen: boolean
  operatingTimezone: string
  quantityBuffer: number
}

export interface Transfer {
  id: string
  coin: string
  txID: string
  height: number
  heightID: string
  date: string
  type: string
  valueString: string
  baseValueString: string
  feeString?: string
  payGoFeeString: string
  usd: number
  usdRate: number
  state: string
  history: Array<TransferHistory>
  entries: Array<TransferEntry>
}

export interface TransferEntry {
  address: string
  valueString: string
  isPayGo: boolean
  isChange: boolean
  token: string
}

export interface TransferHistory {
  date: string
  action: string
}

export interface TransferWithPendingApprovalQueryResponse {
  Transfer?: Transfer
  PendingApproval?: PendingApproval
}

export interface TrialBalanceEntry {
  classification: string
  type: string
  subtype: string
  typeLabel: string
  subtypeLabel: string
  name: string
  debitValue: number
  creditValue: number
}

export interface UpdateUserResponse {
  affectedRows: number
  returning: Array<User>
}

export interface User {
  id: string
  firstName: string
  lastName: string
  email: string
  inviteCode: string
  accounts: Array<UserAccount>
  defaultUserAccountID: string
  hideTradeDisclaimer: boolean
  isKYCApproved: boolean
  bitgoUserID: string
}

export interface UserAccount {
  id: string
  creationDate: string
  organization: Organization
  firstName: string
  lastName: string
  email: string
  portfolioRoles?: Array<UserAccountRole>
  financialAccountRoles?: Array<UserAccountRole>
  primeSignUpDate?: string
}

export interface UserAccountRole {
  userAccount: UserAccount
  entityID: string
  entityType: EntityType
  entityRole: LegacyUserAccountRole
}

export interface Watchlist {
  id: string
  name: string
  items: Array<WatchlistItem>
}

export interface WatchlistItem {
  isPinned: boolean
  instrument: Instrument
}

export interface WatchlistItemResponse {
  affectedRows: number
  returning: Array<WatchlistItem>
}

export interface WatchlistResponse {
  affectedRows: number
  returning: Array<Watchlist>
}

/// ////////////////////////////////////////////////////////////////////////////
// Inputs
/// ////////////////////////////////////////////////////////////////////////////

export interface AccountingLineItemBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  category?: StringComparisonExpressionInput
  financialAccountID?: UUIDComparisonExpressionInput
  financialAccountConnectionID?: UUIDComparisonExpressionInput
  financialTransactionID?: UUIDComparisonExpressionInput
  portfolioID?: UUIDComparisonExpressionInput
  instrumentID?: UUIDComparisonExpressionInput
  isIgnored?: BooleanComparisonExpressionInput
  isResolved?: BooleanComparisonExpressionInput
  transactionDate?: TimestampComparisonExpressionInput
  type?: StringComparisonExpressionInput
  quantity?: FloatComparisonExpressionInput
  source?: StringComparisonExpressionInput
  transactionHash?: StringComparisonExpressionInput
  sentAddressBook?: AddressBookBoolExpressionInput
  receivedAddressBook?: AddressBookBoolExpressionInput
}

export interface AccountingLineItemInput {
  id?: string
  financialAccount: Edge
  financialAccountConnection?: Edge
  instrument: Edge
  financialTransaction?: Edge
  parentAccountingLineItem?: Edge
  type: AccountingLineItemType
  category?: AccountingLineItemCategory
  isIgnored: boolean
  ignoredReason?: AccountingLineItemIgnoredReason
  description?: string
  quantity: number | string
  transactionDate: string
  source: string
  assetChartOfAccount?: Edge
  liabilityChartOfAccount?: Edge
  equityChartOfAccount?: Edge
  expenseChartOfAccount?: Edge
  revenueChartOfAccount?: Edge
}

export interface AccountingLineItemOrderInput {
  category?: OrderBy
  description?: OrderBy
  financialTransactionID?: OrderBy
  id?: OrderBy
  transactionDate?: OrderBy
  type?: OrderBy
}

export interface AddressBookBoolExpressionInput {
  institution?: InstitutionBoolExpressionInput
}

export interface AddressBookInput {
  blockchainAddress: string
  blockchainInstrumentID: string
}

export interface AggregatePricingReportBoolExpressionInput {
  date?: TimestampComparisonExpressionInput
}

export interface ApplyPortfolioAssetsImpairmentInput {
  fileID: string
}

export interface AssociateFileWithPortfolioConversionInput {
  fileID: string
}

export interface AutoResolveFinancialAccountConnectionInput {
  id: string
}

export interface BlockchainExtendedPublicKey {
  addressPath: string
  parentKey: string
  publicKey: string
  chainCode: string
}

export interface BlockchainMultisigPublicKeys {
  publicKeys: Array<string>
  numRequiredSignatures: number | string
}

export interface BooleanComparisonExpressionInput {
  eq?: boolean
  notEq?: boolean
}

export interface BulkCreateFinancialTransactionsInput {
  type: FinancialTransactionType
  subtype: FinancialTransactionSubtype
  notes?: string
  costBasisAmount?: number | string
  lineItemChartOfAccounts?: Array<Edge>
  lineItemDescription?: string
}

export interface CancelClientOrderInput {
  id?: UUIDComparisonExpressionInput
  status?: StringComparisonExpressionInput
}

export interface CancelOrderInput {
  orderID: string
}

export interface ClientOrderBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  strategyID?: UUIDComparisonExpressionInput
  status?: StringComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  tradeDate?: TimestampComparisonExpressionInput
  postDate?: TimestampComparisonExpressionInput
  baseInstrumentID?: UUIDComparisonExpressionInput
  quoteInstrumentID?: UUIDComparisonExpressionInput
  exchangeProductID?: UUIDComparisonExpressionInput
  userAccountID?: UUIDComparisonExpressionInput
  organizationID?: UUIDComparisonExpressionInput
  instrumentID?: UUIDComparisonExpressionInput
  quantity?: FloatComparisonExpressionInput
  funds?: FloatComparisonExpressionInput
  fillBaseQuantities?: FloatComparisonExpressionInput
  fillQuoteQuantitiesAdjusted?: FloatComparisonExpressionInput
  averageFillPriceAdjusted?: FloatComparisonExpressionInput
  side?: StringComparisonExpressionInput
  source?: StringComparisonExpressionInput
  algoStrategy?: StringComparisonExpressionInput
  collateralType?: StringComparisonExpressionInput
}

export interface ClientOrderOrderInput {
  creationDate?: OrderBy
}

export interface ClientOrderParamsInput {
  aggression?: Aggression
  movePercentage?: number | string
  percentLimitPrice?: number | string
  maxPostSize?: number | string
  orderDuration?: number | string
  intervalLength?: number | string
  tolerancePct?: number | string
  sweepPct?: number | string
  repriceSeconds?: number | string
  repriceRandomizationPct?: number | string
  postExchangeCount?: number | string
  maxOrderCount?: number | string
}

export interface ClientOrderSyncBoolExpressionInput {
  status?: StringComparisonExpressionInput
}

export interface CreateChartOfAccountInput {
  portfolioID: string
  type: ChartOfAccountType
  name: string
  description?: string
  accountNumber: string
}

export interface CreateClientOrderInput {
  bitGoAccountID?: string
  clientOrderID?: string
  side: OrderSide
  productID: string
  funds: number | string
  quantity: number | string
  limitPrice?: number | string
  userIntent: ClientOrderUserIntent
  algoStrategy: AlgoStrategy
  params: ClientOrderParamsInput
  scheduledDate?: string
  source?: SourceType
  collateralType?: CollateralType
}

export interface CreateFileURLInput {
  id: string
}

export interface CreateFinancialAccountConnectionFromCSVInput {
  name?: string
  institution: string
  fileIDs: Array<string>
}

export interface CreateFinancialAccountConnectionInput {
  institution: string
  name?: string
  credentials: CredentialsInput
  financialAccounts?: Array<CreateFinancialAccountInput>
  publicAddress?: string
  isBlockchainFeeLineItemEnabled?: boolean
  isSubAccount: boolean
  parentConnection?: NullableEdge
}

export interface CreateFinancialAccountInput {
  id?: string
  institution: string
  blockchainExtendedPublicKey?: BlockchainExtendedPublicKey
  blockchainAddress?: string
  blockchainMultisigPublicKeys?: BlockchainMultisigPublicKeys
  name?: string
  type: FinancialAccountType
}

export interface CreateFinancialTransactionInput {
  type: FinancialTransactionType
  subtype: FinancialTransactionSubtype
  tradeDate?: string
  lineItems: Array<AccountingLineItemInput>
  notes?: string
  attachments?: Array<Edge>
  acquisitionDate?: string
  blockchainMigrationFromAccount?: Edge
  costBasisAmount?: number | string
  isCostBasisSetToMarketPrice: boolean
  institution?: Edge
}

export interface CreateIntegrationInput {
  type: IntegrationType
  name: string
  credentials: CredentialsInput
}

export interface CreateInvestorProfileInput {
  type: InvestorProfileType
  identityFirstName?: string
  identityLastName?: string
  identityDateOfBirth?: string
  countryOfResidence?: string
  identityCountryOfResidence?: string
  identityCountryOfCitizenship?: string
  identityPassportDocument?: Edge
  identityFrontIDDocuemnt?: Edge
  identityBackIDDocuemnt?: Edge
  identityPhone?: string
  identityAddress1?: string
  identityAddress2?: string
  identityCity?: string
  identityState?: string
  identityPostalCode?: string
  businessLegalName?: string
  businessStateOfRegistration?: string
  countryOfRegistration?: string
  businessCountryOfRegistration?: string
  businessEin?: string
  businessRegistrationNumber?: string
  businessFormationDocuments?: Array<Edge>
  businessAddress1?: string
  businessAddress2?: string
  businessCity?: string
  businessState?: string
  businessPostalCode?: string
  businessCreatorJobTitle?: string
  numMajorityOwners?: number | string
  isCreatorMajorityOwner?: boolean
  businessIsCreatorMajorityOwner?: boolean
  isCreatorTrustee?: boolean
  businessIsCreatorControllingOfficer?: boolean
  businessIsCreatorAuthorizedSignatory?: boolean
  authorizedSignatoryFirstName?: string
  authorizedSignatoryLastName?: string
  authorizedSignatoryEmail?: string
  authorizedSignatoryJobTitle?: string
}

export interface CreateMarginTransferInput {
  financialAccountID: string
  transferType: MarginTransferType
  amount: MarginTransferAmountInput
  memo: string
}

export interface CreatePortfolioInput {
  name: string
  functionalCurrency?: Edge
  isChartOfAccountEnabled: boolean
  isSecurityMasterEnabled: boolean
  isBlotterEnabled: boolean
  endOfDayTime: string
  endOfDayTimeZone: string
}

export interface CreatePricingOverridesFromCSVInput {
  baseInstrument: Edge
  quoteInstrument: Edge
  interval: PriceIntervalType
  fileIDs: Array<string>
}

export interface CreateWatchlistItemInput {
  watchlistID: string
  instrumentID: string
}

export interface CredentialsInput {
  credentialsType: FinancialConnectionCredentialsType
  hostname?: string
  port?: number | string
  apiKey?: string
  apiSecret?: string
  oauthCode?: string
  oauthScope?: string
  passphrase?: string
  password?: string
  userID?: string
  userName?: string
}

export interface DeleteAccountingLineItemInput {
  id: string
}

export interface DeleteChartOfAccountInput {
  id: string
  portfolioID: string
}

export interface DeleteFileInput {
  id: string
}

export interface DeleteFinancialAccountConnectionInput {
  id: string
}

export interface DeleteFinancialAccountDataInput {
  accountID: string
  fileID: string
}

export interface DeleteFinancialTransactionInput {
  id: string
}

export interface DeleteHistoricalDataInput {
  baseSymbol: string
  quoteSymbol: string
  interval: Interval
  institution: string
}

export interface DeleteInstitutionInput {
  id: string
}

export interface DeleteInstrumentInput {
  id: string
}

export interface DeleteIntegrationInput {
  id: string
}

export interface DeletePortfolioConversionFileInput {
  fileID: string
}

export interface DeletePortfolioInput {
  id: string
}

export interface DeletePricingOverrideInput {
  baseInstrument: Edge
  quoteInstrument: Edge
  fileID?: string
}

export interface DeleteWatchlistItemInput {
  watchlistID: string
  instrumentID: string
}

export interface Edge {
  id: string
}

export interface ExchangeFillBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  exchangeTradeDate?: TimestampComparisonExpressionInput
  postDate?: TimestampComparisonExpressionInput
  clientOrderID?: UUIDComparisonExpressionInput
  exchangeID?: UUIDComparisonExpressionInput
  internalExchangeOrderID?: UUIDComparisonExpressionInput
  side?: StringComparisonExpressionInput
  baseInstrumentID?: UUIDComparisonExpressionInput
  quoteInstrumentID?: UUIDComparisonExpressionInput
  organizationID?: UUIDComparisonExpressionInput
  userAccountID?: UUIDComparisonExpressionInput
  baseQuantity?: FloatComparisonExpressionInput
  quoteQuantity?: FloatComparisonExpressionInput
  adjustedPriceWithExchangeFeeAndSpread?: FloatComparisonExpressionInput
  isCorrectedByExchange?: BooleanComparisonExpressionInput
  isDaxFillCorrected?: BooleanComparisonExpressionInput
}

export interface ExchangeFillOrderInput {
  creationDate?: OrderBy
  exchangeTradeDate?: OrderBy
}

export interface ExchangeOrderBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  status?: StringComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  tradeDate?: TimestampComparisonExpressionInput
  postDate?: TimestampComparisonExpressionInput
  modifiedDate?: TimestampComparisonExpressionInput
  baseInstrumentID?: UUIDComparisonExpressionInput
  quoteInstrumentID?: UUIDComparisonExpressionInput
  clientOrderID?: UUIDComparisonExpressionInput
  exchangeID?: UUIDComparisonExpressionInput
  exchangeOrderID?: StringComparisonExpressionInput
  organizationID?: UUIDComparisonExpressionInput
  userAccountID?: UUIDComparisonExpressionInput
  side?: StringComparisonExpressionInput
  type?: StringComparisonExpressionInput
  fillBaseQuantities?: FloatComparisonExpressionInput
  fillQuoteQuantitiesAdjusted?: FloatComparisonExpressionInput
  averageFillPriceAdjusted?: FloatComparisonExpressionInput
  isCorrected?: BooleanComparisonExpressionInput
}

export interface ExchangeOrderOrderInput {
  creationDate?: OrderBy
}

export interface ExchangeProductBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  ingestionReferenceId?: UUIDComparisonExpressionInput
  identifier?: StringComparisonExpressionInput
  isTestProduct?: BooleanComparisonExpressionInput
  isTradeDisabled?: BooleanComparisonExpressionInput
}

export interface ExchangeProductOrderInput {
  identifier?: OrderBy
}

export interface FileBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  name?: StringComparisonExpressionInput
  associatedEntityID?: UUIDComparisonExpressionInput
}

export interface FileOrderInput {
  name?: OrderBy
  size?: OrderBy
}

export interface FinancialAccountBalanceSnapshotBoolExpressionInput {
  financialAccountID?: UUIDComparisonExpressionInput
  financialAccountConnectionID?: UUIDComparisonExpressionInput
  instrumentID?: UUIDComparisonExpressionInput
  time?: TimestampComparisonExpressionInput
}

export interface FinancialAccountBalanceSnapshotOrderInput {
  time?: TimestampComparisonExpressionInput
}

export interface FinancialAccountBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  financialAccountConnectionID?: UUIDComparisonExpressionInput
  bitgoWalletStartDate?: TimestampComparisonExpressionInput
  name?: StringComparisonExpressionInput
  referenceID?: StringComparisonExpressionInput
  type?: StringComparisonExpressionInput
  bitgoWalletType?: StringComparisonExpressionInput
  currencyID?: UUIDComparisonExpressionInput
  isDisabled?: BooleanComparisonExpressionInput
}

export interface FinancialAccountConnectionBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  institutionID?: UUIDComparisonExpressionInput
  parentFinancialAccountConnectionID?: UUIDComparisonExpressionInput
  portfolioID?: UUIDComparisonExpressionInput
  type?: StringComparisonExpressionInput
  isManagedByBitgo?: BooleanComparisonExpressionInput
  name?: StringComparisonExpressionInput
}

export interface FinancialAccountConnectionOrderInput {
  name?: OrderBy
  type?: OrderBy
}

export interface FinancialAccountOrderInput {
  name?: OrderBy
  type?: OrderBy
}

export interface FinancialTransactionBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  institutionID?: UUIDComparisonExpressionInput
  instrumentID?: UUIDComparisonExpressionInput
  portfolioID?: UUIDComparisonExpressionInput
  quantity?: FloatComparisonExpressionInput
  totalAmount?: FloatComparisonExpressionInput
  tradeDate?: TimestampComparisonExpressionInput
  type?: StringComparisonExpressionInput
  subtype?: StringComparisonExpressionInput
  source?: StringComparisonExpressionInput
  transactionHash?: StringComparisonExpressionInput
  accountingLineItem?: AccountingLineItemBoolExpressionInput
  hasClientOrder?: BooleanComparisonExpressionInput
}

export interface FinancialTransactionOrderInput {
  tradeDate?: OrderBy
  type?: OrderBy
}

export interface FloatComparisonExpressionInput {
  eq?: number | string
  gt?: number | string
  gte?: number | string
  isNotNull?: boolean
  isNull?: boolean
  lt?: number | string
  lte?: number | string
  notEq?: number | string
}

export interface HistoricalOrderBookBoolExpressionInput {
  time?: TimestampComparisonExpressionInput
  product?: StringComparisonExpressionInput
  exchange?: StringComparisonExpressionInput
}

export interface HistoricalOrderBookOrderInput {
  time?: OrderBy
  product?: OrderBy
  exchange?: OrderBy
}

export interface IDInput {
  id: string
}

export interface ImportFinancialAccountDataInput {
  accountID: string
  fileIDs: Array<string>
}

export interface ImportManualResolvedFinancialTransactionsInput {
  accountID: string
  fileID: string
}

export interface ImportPortfolioInput {
  fileID: string
}

export interface ImportPortfolioPositionInput {
  conversionAsOfDate: string
  transactions: Array<ImportPortfolioPositionTransactionInput>
  importedInstruments: Array<Edge>
  ignoredInstruments: Array<Edge>
}

export interface ImportPortfolioPositionTransactionInput {
  financialAccount: Edge
  financialAccountConnection: Edge
  instrument: Edge
  acquisitionDate: string
  costBasisAmount: number | string
  quantity: number | string
}

export interface InstitutionBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  name?: StringComparisonExpressionInput
  identifier?: StringComparisonExpressionInput
  type?: StringComparisonExpressionInput
  isPrivate?: BooleanComparisonExpressionInput
  isSupported?: BooleanComparisonExpressionInput
  isTradeEnabled?: BooleanComparisonExpressionInput
  isTradeSupported?: BooleanComparisonExpressionInput
}

export interface InstitutionOrderInput {
  name?: OrderBy
}

export interface InstrumentBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  name?: StringComparisonExpressionInput
  symbol?: StringComparisonExpressionInput
  type?: StringComparisonExpressionInput
  isPrivate?: BooleanComparisonExpressionInput
}

export interface InstrumentMappingInput {
  instrumentID: string
  alias?: string
}

export interface InstrumentOrderInput {
  name?: OrderBy
  symbol?: OrderBy
}

export interface IntegerComparisonExpressionInput {
  eq?: number | string
  gt?: number | string
  gte?: number | string
  isNotNull?: boolean
  isNull?: boolean
  lt?: number | string
  lte?: number | string
  notEq?: number | string
}

export interface InternalClientOrderBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  strategyID?: UUIDComparisonExpressionInput
  status?: StringComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  tradeDate?: TimestampComparisonExpressionInput
  postDate?: TimestampComparisonExpressionInput
  baseInstrumentID?: UUIDComparisonExpressionInput
  quoteInstrumentID?: UUIDComparisonExpressionInput
  exchangeProductID?: UUIDComparisonExpressionInput
  userAccountID?: UUIDComparisonExpressionInput
  organizationID?: UUIDComparisonExpressionInput
  instrumentID?: UUIDComparisonExpressionInput
  quantity?: FloatComparisonExpressionInput
  funds?: FloatComparisonExpressionInput
  fillBaseQuantities?: FloatComparisonExpressionInput
  fillQuoteQuantitiesAdjusted?: FloatComparisonExpressionInput
  averageFillPriceAdjusted?: FloatComparisonExpressionInput
  side?: StringComparisonExpressionInput
  source?: StringComparisonExpressionInput
  algoStrategy?: StringComparisonExpressionInput
  collateralType?: StringComparisonExpressionInput
  topUpAmount?: FloatComparisonExpressionInput
  isCorrected?: BooleanComparisonExpressionInput
  isReconciled?: BooleanComparisonExpressionInput
}

export interface InternalTradeBlockInboundOrderBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  modifiedDate?: TimestampComparisonExpressionInput
  tradeblockID?: StringComparisonExpressionInput
  counterpartyID?: StringComparisonExpressionInput
  tradeblockDate?: TimestampComparisonExpressionInput
  volume?: FloatComparisonExpressionInput
  filledVolume?: FloatComparisonExpressionInput
  price?: FloatComparisonExpressionInput
  status?: StringComparisonExpressionInput
  side?: StringComparisonExpressionInput
  baseCurrency?: StringComparisonExpressionInput
  quoteCurrency?: StringComparisonExpressionInput
}

export interface InternalTradeBlockInboundOrderOrderInput {
  creationDate?: OrderBy
  tradeblockDate?: OrderBy
}

export interface InternalTradeBlockOutboundOrderBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  modifiedDate?: TimestampComparisonExpressionInput
  tradeblockID?: StringComparisonExpressionInput
  counterpartyID?: StringComparisonExpressionInput
  inboundOrderID?: UUIDComparisonExpressionInput
  tradeblockDate?: TimestampComparisonExpressionInput
  volume?: FloatComparisonExpressionInput
  price?: FloatComparisonExpressionInput
  status?: StringComparisonExpressionInput
  side?: StringComparisonExpressionInput
  baseCurrency?: StringComparisonExpressionInput
  quoteCurrency?: StringComparisonExpressionInput
}

export interface InternalTradeBlockOutboundOrderOrderInput {
  creationDate?: OrderBy
  tradeblockDate?: OrderBy
}

export interface LuminaUserBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  firstName?: StringComparisonExpressionInput
  lastName?: StringComparisonExpressionInput
  email?: StringComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  isKYCApproved?: BooleanComparisonExpressionInput
}

export interface LuminaUserOrderInput {
  creationDate?: OrderBy
}

export interface MarginPercentageSummariesBoolExpressionInput {
  organization: string
  portfolio: string
  percentage: number | string
  marginCalled?: string
  nopUtilizationNotified?: string
  collateralValue: number | string
  marginRequirement: number | string
}

export interface MarginPercentageSummariesOrderInput {
  percentage?: OrderBy
}

export interface MarginSummariesBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
}

export interface MarginTransferAmountInput {
  quantity: string
  instrumentID: string
}

export interface MigrateFinancialAccountDeduplicationKeyInput {
  id: string
}

export interface MigrateUnsupportedFinancialAccountConnectionInput {
  id: string
  institution: string
}

export interface MockOrder {
  side: string
  product: string
  totalSize: number | string
  startTime: string
  duration: number | string
  interval: number | string
}

export interface NullableEdge {
  id?: string
}

export interface OrderBookAnalysisInput {
  orders: Array<MockOrder>
  tradeFeeOverrides?: Array<TradeFeeSetting>
}

export interface OrganizationBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  name?: StringComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  status?: StringComparisonExpressionInput
  version?: IntegerComparisonExpressionInput
}

export interface OrganizationOrderInput {
  creationDate?: OrderBy
  name?: OrderBy
}

export interface PortfolioBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  isAtwebEnabled?: BooleanComparisonExpressionInput
  organizationID?: UUIDComparisonExpressionInput
  name?: StringComparisonExpressionInput
  isPortfolioProfessionalEnabled?: BooleanComparisonExpressionInput
  isPortfolioInstitutionalEnabled?: BooleanComparisonExpressionInput
  isTaxEnabled?: BooleanComparisonExpressionInput
  isTradeEnabled?: BooleanComparisonExpressionInput
  isTradeAPIEnabled?: BooleanComparisonExpressionInput
  isReactOnly?: BooleanComparisonExpressionInput
  shouldUsersViewAllWallets?: BooleanComparisonExpressionInput
}

export interface PortfolioOrderInput {
  creationDate?: OrderBy
}

export interface PositionBoolExpressionInput {
  instrumentID?: UUIDComparisonExpressionInput
  financialAccountID?: UUIDComparisonExpressionInput
  financialAccountConnectionID?: UUIDComparisonExpressionInput
  acquisitionDate?: TimestampComparisonExpressionInput
  dispositionDate?: TimestampComparisonExpressionInput
  quantity?: FloatComparisonExpressionInput
  costBasis?: FloatComparisonExpressionInput
  type?: StringComparisonExpressionInput
}

export interface PricingOverrideBoolExpressionInput {
  interval?: StringComparisonExpressionInput
  baseInstrumentID?: UUIDComparisonExpressionInput
  quoteInstrumentID?: UUIDComparisonExpressionInput
  time?: TimestampComparisonExpressionInput
}

export interface PricingOverrideInput {
  id?: string
  interval: PriceIntervalType
  time: string
  close: number | string
  notes?: string
}

export interface PricingOverrideOrderInput {
  time?: OrderBy
}

export interface PurchaseSalesJournalBoolExpressionInput {
  transactionType?: StringComparisonExpressionInput
  instrumentID?: UUIDComparisonExpressionInput
  transactionDate?: TimestampComparisonExpressionInput
  quantity?: FloatComparisonExpressionInput
  costBasis?: FloatComparisonExpressionInput
}

export interface RealizedReportBoolExpressionInput {
  transactionType?: StringComparisonExpressionInput
  instrumentID?: UUIDComparisonExpressionInput
  acquisitionDate?: TimestampComparisonExpressionInput
  dispositionDate?: TimestampComparisonExpressionInput
  quantity?: FloatComparisonExpressionInput
  costBasis?: FloatComparisonExpressionInput
  proceeds?: FloatComparisonExpressionInput
  realizedReturn?: FloatComparisonExpressionInput
  realizedReturnPercentage?: FloatComparisonExpressionInput
}

export interface ReconcileFinancialAccountDiscrepanciesInput {
  accountID: string
  inputs: Array<ReconcileFinancialAccountPositionDiscrepanciesInput>
}

export interface ReconcileFinancialAccountPositionDiscrepanciesInput {
  instrumentID: string
  lineItems: Array<AccountingLineItemInput>
}

export interface SetUserTradeDisclaimerFlagInput {
  hideTradeDisclaimer: boolean
}

export interface StringComparisonExpressionInput {
  eq?: string
  gt?: string
  gte?: string
  iLike?: string
  in?: Array<string>
  isNotNull?: boolean
  isNull?: boolean
  like?: string
  lt?: string
  lte?: string
  notEq?: string
  notILike?: string
  notIn?: Array<string>
  notlike?: string
  notSimilar?: string
  similar?: string
}

export interface SyncFinancialAccountConnectionInput {
  ids: Array<string>
  shouldResetConnection: boolean
}

export interface SyncFinancialAccountInput {
  connectionID: string
  accountID: string
  shouldResetAccount: boolean
}

export interface TaskBoolExpressionInput {
  id?: UUIDComparisonExpressionInput
  organizationID?: UUIDComparisonExpressionInput
  handler?: StringComparisonExpressionInput
  status?: StringComparisonExpressionInput
  source?: StringComparisonExpressionInput
  duration_millis?: IntegerComparisonExpressionInput
  creationDate?: TimestampComparisonExpressionInput
  scheduledDate?: TimestampComparisonExpressionInput
  modifiedDate?: TimestampComparisonExpressionInput
  startTime?: TimestampComparisonExpressionInput
}

export interface TaskOrderInput {
  scheduledDate?: OrderBy
}

export interface TimestampComparisonExpressionInput {
  eq?: string
  gt?: string
  gte?: string
  isNotNull?: boolean
  isNull?: boolean
  lt?: string
  lte?: string
  notEq?: string
}

export interface TradeBalanceExpressionInput {
  baseInstrumentID?: string
  quoteInstrumentID?: string
}

export interface TradeFeeSetting {
  exchange: string
  feeRate: number | string
}

export interface UUIDComparisonExpressionInput {
  eq?: string
  in?: Array<string>
  isNotNull?: boolean
  isNull?: boolean
  notEq?: string
  notIn?: Array<string>
}

export interface UpdateAccountingLineItemInput {
  isIgnored?: boolean
  assetChartOfAccountID?: string
  liabilityChartOfAccountID?: string
  equityChartOfAccountID?: string
  expenseChartOfAccountID?: string
  revenueChartOfAccountID?: string
}

export interface UpdateChartOfAccountInput {
  id: string
  portfolioID: string
  type: ChartOfAccountType
  name: string
  description?: string
  accountNumber: string
}

export interface UpdateFileInput {
  id: string
  associatedEntityType: EntityType
  associatedEntityID: string
}

export interface UpdateFinancialAccountConnectionInput {
  id: string
  credentials?: CredentialsInput
  name?: string
  isAutoUpdateEnabled?: boolean
  isTradeEnabled?: boolean
  financialAccounts?: Array<UpdateFinancialAccountInput>
  isBlockchainFeeLineItemEnabled?: boolean
  isSubAccount?: boolean
  parentConnection?: NullableEdge
}

export interface UpdateFinancialAccountInput {
  id: string
  name?: string
  isDisabled: boolean
  shouldHideCSVUploadPrompt?: boolean
  adventGenevaName?: string
  syncVersion?: number | string
  lastBalancedSyncTime?: string
  isBitgoPaygWallet?: boolean
}

export interface UpdateFinancialTransactionInput {
  id: string
  notes?: string
  attachments?: Array<Edge>
}

export interface UpdateOrganizationInput {
  id: string
  name: string
  isAtwebEnabled: boolean
  isAdventGenevaEnabled: boolean
  status: OrganizationStatus
  defaultTaskPriority?: TaskPriority
}

export interface UpdatePortfolioInput {
  id: string
  name: string
  functionalCurrency: Edge
  isPeriodicSyncEnabled: boolean
  isBalanceSyncEnabled: boolean
  endOfDayTime: string
  endOfDayTimeZone: string
  portfolioPricingSource: PortfolioPricingSourceType
  reportingPricingSource: PortfolioReportingPricingSourceType
  reportingFallbackPricingSource: PortfolioReportingFallbackPricingSourceType
  transactionCryptoFiatPricingSource: PortfolioTransactionCryptoFiatPricingSourceType
  transactionFallbackPricingSource: PortfolioTransactionFallbackPricingSourceType
  transactionPricingSource: PortfolioTransactionPricingSourceType
  taxLotIDMethod: PortfolioTaxLotIDMethodType
  taxLotIDBy: PortfolioTaxLotIDByType
  isSecurityMasterEnabled: boolean
  isBlotterEnabled: boolean
  countLimit?: number | string
  isAtwebEnabled: boolean
  atwebType?: string
  atwebID?: string
  isAdventGenevaEnabled: boolean
  adventGenevaPortfolioName?: string
  adventGenevaFundStructure?: string
  adventGenevaStrategy?: string
  adventGenevaBrokerName?: string
  adventGenevaTradeExpensesExpenseNumber?: string
  adventGenevaTotalCommission?: string
  adventGenevaPriceList?: string
  adventGenevaOldFundStructure?: string
  adventGenevaTransferType?: string
  adventGenevaNewStrategy?: string
  adventGenevaQuantityDecimal: number | string
  adventGenevaNetInvestmentAmountDecimal: number | string
  adventGenevaNetCounterAmountDecimal: number | string
  adventGenevaPriceDecimal: number | string
  conversionAsOfDate?: string
  isChartOfAccountEnabled: boolean
  isAccountAutoClassificationEnabled: boolean
  shouldIncludeFeesInTransactions: boolean
  shouldSmartReconcileDiscrepancies: boolean
  shouldSmartResolveFeesAsPaidRebatesAsEarned: boolean
  shouldSmartResolveTransfersWithoutTransactionHash: boolean
  shouldSmartResolveSentFunctionalCurrencyAsWithdrawals: boolean
  shouldSmartResolveReceivedFunctionalCurrencyAsDeposits: boolean
  shouldSmartResolveBorrowTransactions: boolean
  shouldSmartResolveLendTransactions: boolean
  shouldSmartResolveSentAsTransferOuts: boolean
  shouldSmartResolveReceivedAsTransferIns: boolean
  blockchainTransferPercentThreshold: number | string
}

export interface UpdatePricingOverrideInput {
  baseInstrument: Edge
  quoteInstrument: Edge
  pricingOverrides: Array<PricingOverrideInput>
}

export interface UpdateUserInput {
  id: string
  firstName?: string
  lastName?: string
  inviteCode?: string
  isKYCApproved?: boolean
}

export interface UpdateWatchlistInput {
  id: string
  instrumentIDs: Array<string>
}

export interface UpsertInstitutionInput {
  id?: string
  name: string
  notes?: string
  addressBook: Array<AddressBookInput>
}

export interface UpsertInstrumentInput {
  id?: string
  type: InstrumentType
  symbol: string
  name: string
  logoURL?: string
  websiteURL?: string
  redditURL?: string
  twitterURL?: string
  digitalAssetType?: InstrumentDigitalAssetType
  digitalAssetSourceCodeURL?: string
  digitalAssetExplorerURL?: string
  digitalAssetExplorerTransactionURLPattern?: string
  digitalAssetPlatformInstrument?: Edge
  digitalAssetTokenAddress?: string
}

export interface UpsertOnboardingFinancialAccountExchangeConnectionInput {
  id?: string
  name: string
  credentials: CredentialsInput
  institution: string
}

export interface UpsertOnboardingFinancialAccountExchangeConnectionsInput {
  shouldSaveProgress: boolean
  shouldIgnoreInputs: boolean
  inputs: Array<UpsertOnboardingFinancialAccountExchangeConnectionInput>
  inputIndices: Array<number | string>
}

export interface UserAccountRoleBoolExpressionInput {
  entityID?: UUIDComparisonExpressionInput
  entityType?: StringComparisonExpressionInput
}

export interface UserInvitationBoolExpressionInput {
  invitationStatus?: StringComparisonExpressionInput
}

export interface VerifiyFinancialAccountConnectionInput {
  id: string
}

export const AccountingLineItemBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  category: {
    isArray: false,
    label: 'category',
    type: 'StringComparisonExpressionInput',
  },
  financialAccountID: {
    isArray: false,
    label: 'financial account id',
    type: 'UUIDComparisonExpressionInput',
  },
  financialAccountConnectionID: {
    isArray: false,
    label: 'financial account connection id',
    type: 'UUIDComparisonExpressionInput',
  },
  financialTransactionID: {
    isArray: false,
    label: 'financial transaction id',
    type: 'UUIDComparisonExpressionInput',
  },
  portfolioID: {
    isArray: false,
    label: 'portfolio id',
    type: 'UUIDComparisonExpressionInput',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  isIgnored: {
    isArray: false,
    label: 'is ignored',
    type: 'BooleanComparisonExpressionInput',
  },
  isResolved: {
    isArray: false,
    label: 'is resolved',
    type: 'BooleanComparisonExpressionInput',
  },
  transactionDate: {
    isArray: false,
    label: 'transaction date',
    type: 'TimestampComparisonExpressionInput',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'StringComparisonExpressionInput',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'FloatComparisonExpressionInput',
  },
  source: {
    isArray: false,
    label: 'source',
    type: 'StringComparisonExpressionInput',
  },
  transactionHash: {
    isArray: false,
    label: 'transaction hash',
    type: 'StringComparisonExpressionInput',
  },
  sentAddressBook: {
    isArray: false,
    label: 'sent address book',
    type: 'AddressBookBoolExpressionInput',
  },
  receivedAddressBook: {
    isArray: false,
    label: 'received address book',
    type: 'AddressBookBoolExpressionInput',
  },
}

export const AccountingLineItemInputProperties = {
  id: {
    isArray: false,
    label: 'ID',
    type: 'string',
  },
  financialAccount: {
    isArray: false,
    label: 'Account',
    type: 'Edge',
  },
  financialAccountConnection: {
    isArray: false,
    label: 'Account Connection',
    type: 'Edge',
  },
  instrument: {
    isArray: false,
    label: 'Instrument',
    type: 'Edge',
  },
  financialTransaction: {
    isArray: false,
    label: 'Transaction',
    type: 'Edge',
  },
  parentAccountingLineItem: {
    isArray: false,
    label: 'Parent Line Item',
    type: 'Edge',
  },
  type: {
    isArray: false,
    label: 'Type',
    type: 'AccountingLineItemType',
  },
  category: {
    isArray: false,
    label: 'Category',
    type: 'AccountingLineItemCategory',
  },
  isIgnored: {
    isArray: false,
    label: 'Is Ignored',
    type: 'boolean',
  },
  ignoredReason: {
    isArray: false,
    label: 'Ignored Reason',
    type: 'AccountingLineItemIgnoredReason',
  },
  description: {
    isArray: false,
    label: 'Description',
    type: 'string',
  },
  quantity: {
    isArray: false,
    label: 'Quantity',
    type: 'number | string',
  },
  transactionDate: {
    isArray: false,
    label: 'Transaction Date',
    type: 'string',
  },
  source: {
    isArray: false,
    label: 'Source',
    type: 'string',
  },
  assetChartOfAccount: {
    isArray: false,
    label: 'Asset Chart Of Account',
    type: 'Edge',
  },
  liabilityChartOfAccount: {
    isArray: false,
    label: 'Liability Chart Of Account',
    type: 'Edge',
  },
  equityChartOfAccount: {
    isArray: false,
    label: 'Equity Chart Of Account',
    type: 'Edge',
  },
  expenseChartOfAccount: {
    isArray: false,
    label: 'Expense Chart Of Account',
    type: 'Edge',
  },
  revenueChartOfAccount: {
    isArray: false,
    label: 'Revenue Chart Of Account',
    type: 'Edge',
  },
}

export const AccountingLineItemOrderInputProperties = {
  category: {
    isArray: false,
    label: 'category',
    type: 'OrderBy',
  },
  description: {
    isArray: false,
    label: 'description',
    type: 'OrderBy',
  },
  financialTransactionID: {
    isArray: false,
    label: 'financial transaction id',
    type: 'OrderBy',
  },
  id: {
    isArray: false,
    label: 'id',
    type: 'OrderBy',
  },
  transactionDate: {
    isArray: false,
    label: 'transaction date',
    type: 'OrderBy',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'OrderBy',
  },
}

export const AddressBookBoolExpressionInputProperties = {
  institution: {
    isArray: false,
    label: 'institution',
    type: 'InstitutionBoolExpressionInput',
  },
}

export const AddressBookInputProperties = {
  blockchainAddress: {
    isArray: false,
    label: 'blockchain address',
    type: 'string',
  },
  blockchainInstrumentID: {
    isArray: false,
    label: 'blockchain instrument id',
    type: 'string',
  },
}

export const AggregatePricingReportBoolExpressionInputProperties = {
  date: {
    isArray: false,
    label: 'date',
    type: 'TimestampComparisonExpressionInput',
  },
}

export const ApplyPortfolioAssetsImpairmentInputProperties = {
  fileID: {
    isArray: false,
    label: 'file id',
    type: 'string',
  },
}

export const AssociateFileWithPortfolioConversionInputProperties = {
  fileID: {
    isArray: false,
    label: 'file id',
    type: 'string',
  },
}

export const AutoResolveFinancialAccountConnectionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const BlockchainExtendedPublicKeyProperties = {
  addressPath: {
    isArray: false,
    label: 'BIP44 Path',
    type: 'string',
  },
  parentKey: {
    isArray: false,
    label: 'Parent Key',
    type: 'string',
  },
  publicKey: {
    isArray: false,
    label: 'Public Key',
    type: 'string',
  },
  chainCode: {
    isArray: false,
    label: 'Chain Code',
    type: 'string',
  },
}

export const BlockchainMultisigPublicKeysProperties = {
  publicKeys: {
    isArray: true,
    label: 'Extended Public Keys (XPubs)',
    type: 'string',
  },
  numRequiredSignatures: {
    isArray: false,
    label: 'Number Of Required Signatures',
    type: 'number | string',
  },
}

export const BooleanComparisonExpressionInputProperties = {
  eq: {
    isArray: false,
    label: 'eq',
    type: 'boolean',
  },
  notEq: {
    isArray: false,
    label: 'not eq',
    type: 'boolean',
  },
}

export const BulkCreateFinancialTransactionsInputProperties = {
  type: {
    isArray: false,
    label: 'type',
    type: 'FinancialTransactionType',
  },
  subtype: {
    isArray: false,
    label: 'subtype',
    type: 'FinancialTransactionSubtype',
  },
  notes: {
    isArray: false,
    label: 'notes',
    type: 'string',
  },
  costBasisAmount: {
    isArray: false,
    label: 'cost basis amount',
    type: 'number | string',
  },
  lineItemChartOfAccounts: {
    isArray: true,
    label: 'line item chart of accounts',
    type: 'Edge',
  },
  lineItemDescription: {
    isArray: false,
    label: 'line item description',
    type: 'string',
  },
}

export const CancelClientOrderInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
}

export const CancelOrderInputProperties = {
  orderID: {
    isArray: false,
    label: 'order id',
    type: 'string',
  },
}

export const ClientOrderBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  strategyID: {
    isArray: false,
    label: 'strategy id',
    type: 'UUIDComparisonExpressionInput',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  tradeDate: {
    isArray: false,
    label: 'trade date',
    type: 'TimestampComparisonExpressionInput',
  },
  postDate: {
    isArray: false,
    label: 'post date',
    type: 'TimestampComparisonExpressionInput',
  },
  baseInstrumentID: {
    isArray: false,
    label: 'base instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  quoteInstrumentID: {
    isArray: false,
    label: 'quote instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  exchangeProductID: {
    isArray: false,
    label: 'exchange product id',
    type: 'UUIDComparisonExpressionInput',
  },
  userAccountID: {
    isArray: false,
    label: 'user account id',
    type: 'UUIDComparisonExpressionInput',
  },
  organizationID: {
    isArray: false,
    label: 'organization id',
    type: 'UUIDComparisonExpressionInput',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'FloatComparisonExpressionInput',
  },
  funds: {
    isArray: false,
    label: 'funds',
    type: 'FloatComparisonExpressionInput',
  },
  fillBaseQuantities: {
    isArray: false,
    label: 'fill base quantities',
    type: 'FloatComparisonExpressionInput',
  },
  fillQuoteQuantitiesAdjusted: {
    isArray: false,
    label: 'fill quote quantities adjusted',
    type: 'FloatComparisonExpressionInput',
  },
  averageFillPriceAdjusted: {
    isArray: false,
    label: 'average fill price adjusted',
    type: 'FloatComparisonExpressionInput',
  },
  side: {
    isArray: false,
    label: 'side',
    type: 'StringComparisonExpressionInput',
  },
  source: {
    isArray: false,
    label: 'source',
    type: 'StringComparisonExpressionInput',
  },
  algoStrategy: {
    isArray: false,
    label: 'algo strategy',
    type: 'StringComparisonExpressionInput',
  },
  collateralType: {
    isArray: false,
    label: 'collateral type',
    type: 'StringComparisonExpressionInput',
  },
}

export const ClientOrderOrderInputProperties = {
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'OrderBy',
  },
}

export const ClientOrderParamsInputProperties = {
  aggression: {
    isArray: false,
    label: 'aggression',
    type: 'Aggression',
  },
  movePercentage: {
    isArray: false,
    label: 'move percentage',
    type: 'number | string',
  },
  percentLimitPrice: {
    isArray: false,
    label: 'percent limit price',
    type: 'number | string',
  },
  maxPostSize: {
    isArray: false,
    label: 'max post size',
    type: 'number | string',
  },
  orderDuration: {
    isArray: false,
    label: 'order duration',
    type: 'number | string',
  },
  intervalLength: {
    isArray: false,
    label: 'interval length',
    type: 'number | string',
  },
  tolerancePct: {
    isArray: false,
    label: 'tolerance pct',
    type: 'number | string',
  },
  sweepPct: {
    isArray: false,
    label: 'sweep pct',
    type: 'number | string',
  },
  repriceSeconds: {
    isArray: false,
    label: 'reprice seconds',
    type: 'number | string',
  },
  repriceRandomizationPct: {
    isArray: false,
    label: 'reprice randomization pct',
    type: 'number | string',
  },
  postExchangeCount: {
    isArray: false,
    label: 'post exchange count',
    type: 'number | string',
  },
  maxOrderCount: {
    isArray: false,
    label: 'max order count',
    type: 'number | string',
  },
}

export const ClientOrderSyncBoolExpressionInputProperties = {
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
}

export const CreateChartOfAccountInputProperties = {
  portfolioID: {
    isArray: false,
    label: 'portfolio id',
    type: 'string',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'ChartOfAccountType',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'string',
  },
  description: {
    isArray: false,
    label: 'description',
    type: 'string',
  },
  accountNumber: {
    isArray: false,
    label: 'account number',
    type: 'string',
  },
}

export const CreateClientOrderInputProperties = {
  bitGoAccountID: {
    isArray: false,
    label: 'bit go account id',
    type: 'string',
  },
  clientOrderID: {
    isArray: false,
    label: 'client order id',
    type: 'string',
  },
  side: {
    isArray: false,
    label: 'side',
    type: 'OrderSide',
  },
  productID: {
    isArray: false,
    label: 'product id',
    type: 'string',
  },
  funds: {
    isArray: false,
    label: 'funds',
    type: 'number | string',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'number | string',
  },
  limitPrice: {
    isArray: false,
    label: 'limit price',
    type: 'number | string',
  },
  userIntent: {
    isArray: false,
    label: 'user intent',
    type: 'ClientOrderUserIntent',
  },
  algoStrategy: {
    isArray: false,
    label: 'algo strategy',
    type: 'AlgoStrategy',
  },
  params: {
    isArray: false,
    label: 'params',
    type: 'ClientOrderParamsInput',
  },
  scheduledDate: {
    isArray: false,
    label: 'scheduled date',
    type: 'string',
  },
  source: {
    isArray: false,
    label: 'source',
    type: 'SourceType',
  },
  collateralType: {
    isArray: false,
    label: 'collateral type',
    type: 'CollateralType',
  },
}

export const CreateFileURLInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const CreateFinancialAccountConnectionFromCSVInputProperties = {
  name: {
    isArray: false,
    label: 'Name',
    type: 'string',
  },
  institution: {
    isArray: false,
    label: 'Institution',
    type: 'string',
  },
  fileIDs: {
    isArray: true,
    label: 'File',
    type: 'string',
  },
}

export const CreateFinancialAccountConnectionInputProperties = {
  institution: {
    isArray: false,
    label: 'Institution',
    type: 'string',
  },
  name: {
    isArray: false,
    label: 'Name',
    type: 'string',
  },
  credentials: {
    isArray: false,
    label: 'Credentials',
    type: 'CredentialsInput',
  },
  financialAccounts: {
    isArray: true,
    label: 'Accounts',
    type: 'CreateFinancialAccountInput',
  },
  publicAddress: {
    isArray: false,
    label: 'Public Address',
    type: 'string',
  },
  isBlockchainFeeLineItemEnabled: {
    isArray: false,
    label: 'Separate Blockchain Fee Line Item Enabled',
    type: 'boolean',
  },
  isSubAccount: {
    isArray: false,
    label: 'Is Sub Account',
    type: 'boolean',
  },
  parentConnection: {
    isArray: false,
    label: 'Parent Connection',
    type: 'NullableEdge',
  },
}

export const CreateFinancialAccountInputProperties = {
  id: {
    isArray: false,
    label: 'ID',
    type: 'string',
  },
  institution: {
    isArray: false,
    label: 'Institution',
    type: 'string',
  },
  blockchainExtendedPublicKey: {
    isArray: false,
    label: 'Extended Public Key (XPub)',
    type: 'BlockchainExtendedPublicKey',
  },
  blockchainAddress: {
    isArray: false,
    label: 'Address',
    type: 'string',
  },
  blockchainMultisigPublicKeys: {
    isArray: false,
    label: 'Multisig Account',
    type: 'BlockchainMultisigPublicKeys',
  },
  name: {
    isArray: false,
    label: 'Name',
    type: 'string',
  },
  type: {
    isArray: false,
    label: 'Type',
    type: 'FinancialAccountType',
  },
}

export const CreateFinancialTransactionInputProperties = {
  type: {
    isArray: false,
    label: 'Type',
    type: 'FinancialTransactionType',
  },
  subtype: {
    isArray: false,
    label: 'Subtype',
    type: 'FinancialTransactionSubtype',
  },
  tradeDate: {
    isArray: false,
    label: 'Trade Date',
    type: 'string',
  },
  lineItems: {
    isArray: true,
    label: 'Line Items',
    type: 'AccountingLineItemInput',
  },
  notes: {
    isArray: false,
    label: 'Notes',
    type: 'string',
  },
  attachments: {
    isArray: true,
    label: 'Attachments',
    type: 'Edge',
  },
  acquisitionDate: {
    isArray: false,
    label: 'Acquisition date',
    type: 'string',
  },
  blockchainMigrationFromAccount: {
    isArray: false,
    label: 'Account For Blockchain Migration',
    type: 'Edge',
  },
  costBasisAmount: {
    isArray: false,
    label: 'Cost Basis Amount',
    type: 'number | string',
  },
  isCostBasisSetToMarketPrice: {
    isArray: false,
    label: 'Is Mark To Market Price',
    type: 'boolean',
  },
  institution: {
    isArray: false,
    label: 'Institution ID',
    type: 'Edge',
  },
}

export const CreateIntegrationInputProperties = {
  type: {
    isArray: false,
    label: 'Integration type',
    type: 'IntegrationType',
  },
  name: {
    isArray: false,
    label: 'Name',
    type: 'string',
  },
  credentials: {
    isArray: false,
    label: 'Credentials',
    type: 'CredentialsInput',
  },
}

export const CreateInvestorProfileInputProperties = {
  type: {
    isArray: false,
    label: 'investor type',
    type: 'InvestorProfileType',
  },
  identityFirstName: {
    isArray: false,
    label: 'first name',
    type: 'string',
  },
  identityLastName: {
    isArray: false,
    label: 'last name',
    type: 'string',
  },
  identityDateOfBirth: {
    isArray: false,
    label: 'date of birth',
    type: 'string',
  },
  countryOfResidence: {
    isArray: false,
    label: 'country of residence',
    type: 'string',
  },
  identityCountryOfResidence: {
    isArray: false,
    label: 'country of residence',
    type: 'string',
  },
  identityCountryOfCitizenship: {
    isArray: false,
    label: 'country of citizenship',
    type: 'string',
  },
  identityPassportDocument: {
    isArray: false,
    label: 'passport',
    type: 'Edge',
  },
  identityFrontIDDocuemnt: {
    isArray: false,
    label: 'front ID',
    type: 'Edge',
  },
  identityBackIDDocuemnt: {
    isArray: false,
    label: 'back ID',
    type: 'Edge',
  },
  identityPhone: {
    isArray: false,
    label: 'phone number',
    type: 'string',
  },
  identityAddress1: {
    isArray: false,
    label: 'address line 1',
    type: 'string',
  },
  identityAddress2: {
    isArray: false,
    label: 'address line 2',
    type: 'string',
  },
  identityCity: {
    isArray: false,
    label: 'city',
    type: 'string',
  },
  identityState: {
    isArray: false,
    label: 'state',
    type: 'string',
  },
  identityPostalCode: {
    isArray: false,
    label: 'postal code',
    type: 'string',
  },
  businessLegalName: {
    isArray: false,
    label: 'legal business name',
    type: 'string',
  },
  businessStateOfRegistration: {
    isArray: false,
    label: 'state of registration',
    type: 'string',
  },
  countryOfRegistration: {
    isArray: false,
    label: 'country of registration',
    type: 'string',
  },
  businessCountryOfRegistration: {
    isArray: false,
    label: 'country of registration',
    type: 'string',
  },
  businessEin: {
    isArray: false,
    label: 'employer identification number',
    type: 'string',
  },
  businessRegistrationNumber: {
    isArray: false,
    label: 'registration number',
    type: 'string',
  },
  businessFormationDocuments: {
    isArray: true,
    label: 'business formation documents',
    type: 'Edge',
  },
  businessAddress1: {
    isArray: false,
    label: 'address line 1',
    type: 'string',
  },
  businessAddress2: {
    isArray: false,
    label: 'address line 2',
    type: 'string',
  },
  businessCity: {
    isArray: false,
    label: 'city',
    type: 'string',
  },
  businessState: {
    isArray: false,
    label: 'state',
    type: 'string',
  },
  businessPostalCode: {
    isArray: false,
    label: 'postal code',
    type: 'string',
  },
  businessCreatorJobTitle: {
    isArray: false,
    label: 'job title',
    type: 'string',
  },
  numMajorityOwners: {
    isArray: false,
    label: 'number of majority owners',
    type: 'number | string',
  },
  isCreatorMajorityOwner: {
    isArray: false,
    label: 'value of whether you own 20% or more equity in the business',
    type: 'boolean',
  },
  businessIsCreatorMajorityOwner: {
    isArray: false,
    label: 'value of whether you own 20% or more equity in the business',
    type: 'boolean',
  },
  isCreatorTrustee: {
    isArray: false,
    label: 'value of whether you are a trustee in the trust',
    type: 'boolean',
  },
  businessIsCreatorControllingOfficer: {
    isArray: false,
    label: 'value of whether you are a controlling officer in the business',
    type: 'boolean',
  },
  businessIsCreatorAuthorizedSignatory: {
    isArray: false,
    label: 'value of whether you are an authorized signatory in the business',
    type: 'boolean',
  },
  authorizedSignatoryFirstName: {
    isArray: false,
    label: 'authorized signatory first name',
    type: 'string',
  },
  authorizedSignatoryLastName: {
    isArray: false,
    label: 'authorized signatory last name',
    type: 'string',
  },
  authorizedSignatoryEmail: {
    isArray: false,
    label: 'authorized signatory email address',
    type: 'string',
  },
  authorizedSignatoryJobTitle: {
    isArray: false,
    label: 'authorized signatory job title',
    type: 'string',
  },
}

export const CreateMarginTransferInputProperties = {
  financialAccountID: {
    isArray: false,
    label: 'financial account id',
    type: 'string',
  },
  transferType: {
    isArray: false,
    label: 'transfer type',
    type: 'MarginTransferType',
  },
  amount: {
    isArray: false,
    label: 'amount',
    type: 'MarginTransferAmountInput',
  },
  memo: {
    isArray: false,
    label: 'memo',
    type: 'string',
  },
}

export const CreatePortfolioInputProperties = {
  name: {
    isArray: false,
    label: 'name',
    type: 'string',
  },
  functionalCurrency: {
    isArray: false,
    label: 'functional currency',
    type: 'Edge',
  },
  isChartOfAccountEnabled: {
    isArray: false,
    label: 'is chart of account enabled',
    type: 'boolean',
  },
  isSecurityMasterEnabled: {
    isArray: false,
    label: 'is security master enabled',
    type: 'boolean',
  },
  isBlotterEnabled: {
    isArray: false,
    label: 'is blotter enabled',
    type: 'boolean',
  },
  endOfDayTime: {
    isArray: false,
    label: 'end of day time',
    type: 'string',
  },
  endOfDayTimeZone: {
    isArray: false,
    label: 'end of day time zone',
    type: 'string',
  },
}

export const CreatePricingOverridesFromCSVInputProperties = {
  baseInstrument: {
    isArray: false,
    label: 'base instrument',
    type: 'Edge',
  },
  quoteInstrument: {
    isArray: false,
    label: 'quote instrument',
    type: 'Edge',
  },
  interval: {
    isArray: false,
    label: 'interval',
    type: 'PriceIntervalType',
  },
  fileIDs: {
    isArray: true,
    label: 'file id s',
    type: 'string',
  },
}

export const CreateWatchlistItemInputProperties = {
  watchlistID: {
    isArray: false,
    label: 'watchlist id',
    type: 'string',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'string',
  },
}

export const CredentialsInputProperties = {
  credentialsType: {
    isArray: false,
    label: 'Credentials Type',
    type: 'FinancialConnectionCredentialsType',
  },
  hostname: {
    isArray: false,
    label: 'Hostname',
    type: 'string',
  },
  port: {
    isArray: false,
    label: 'Port',
    type: 'number | string',
  },
  apiKey: {
    isArray: false,
    label: 'API key',
    type: 'string',
  },
  apiSecret: {
    isArray: false,
    label: 'API secret',
    type: 'string',
  },
  oauthCode: {
    isArray: false,
    label: 'OAuth code',
    type: 'string',
  },
  oauthScope: {
    isArray: false,
    label: 'OAuth scope',
    type: 'string',
  },
  passphrase: {
    isArray: false,
    label: 'Passphrase',
    type: 'string',
  },
  password: {
    isArray: false,
    label: 'Password',
    type: 'string',
  },
  userID: {
    isArray: false,
    label: 'User ID',
    type: 'string',
  },
  userName: {
    isArray: false,
    label: 'User Name',
    type: 'string',
  },
}

export const DeleteAccountingLineItemInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const DeleteChartOfAccountInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  portfolioID: {
    isArray: false,
    label: 'portfolio id',
    type: 'string',
  },
}

export const DeleteFileInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const DeleteFinancialAccountConnectionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const DeleteFinancialAccountDataInputProperties = {
  accountID: {
    isArray: false,
    label: 'account id',
    type: 'string',
  },
  fileID: {
    isArray: false,
    label: 'file id',
    type: 'string',
  },
}

export const DeleteFinancialTransactionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const DeleteHistoricalDataInputProperties = {
  baseSymbol: {
    isArray: false,
    label: 'base symbol',
    type: 'string',
  },
  quoteSymbol: {
    isArray: false,
    label: 'quote symbol',
    type: 'string',
  },
  interval: {
    isArray: false,
    label: 'interval',
    type: 'Interval',
  },
  institution: {
    isArray: false,
    label: 'institution',
    type: 'string',
  },
}

export const DeleteInstitutionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const DeleteInstrumentInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const DeleteIntegrationInputProperties = {
  id: {
    isArray: false,
    label: 'ID',
    type: 'string',
  },
}

export const DeletePortfolioConversionFileInputProperties = {
  fileID: {
    isArray: false,
    label: 'file id',
    type: 'string',
  },
}

export const DeletePortfolioInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const DeletePricingOverrideInputProperties = {
  baseInstrument: {
    isArray: false,
    label: 'base instrument',
    type: 'Edge',
  },
  quoteInstrument: {
    isArray: false,
    label: 'quote instrument',
    type: 'Edge',
  },
  fileID: {
    isArray: false,
    label: 'file id',
    type: 'string',
  },
}

export const DeleteWatchlistItemInputProperties = {
  watchlistID: {
    isArray: false,
    label: 'watchlist id',
    type: 'string',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'string',
  },
}

export const EdgeProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const ExchangeFillBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  exchangeTradeDate: {
    isArray: false,
    label: 'exchange trade date',
    type: 'TimestampComparisonExpressionInput',
  },
  postDate: {
    isArray: false,
    label: 'post date',
    type: 'TimestampComparisonExpressionInput',
  },
  clientOrderID: {
    isArray: false,
    label: 'client order id',
    type: 'UUIDComparisonExpressionInput',
  },
  exchangeID: {
    isArray: false,
    label: 'exchange id',
    type: 'UUIDComparisonExpressionInput',
  },
  internalExchangeOrderID: {
    isArray: false,
    label: 'internal exchange order id',
    type: 'UUIDComparisonExpressionInput',
  },
  side: {
    isArray: false,
    label: 'side',
    type: 'StringComparisonExpressionInput',
  },
  baseInstrumentID: {
    isArray: false,
    label: 'base instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  quoteInstrumentID: {
    isArray: false,
    label: 'quote instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  organizationID: {
    isArray: false,
    label: 'organization id',
    type: 'UUIDComparisonExpressionInput',
  },
  userAccountID: {
    isArray: false,
    label: 'user account id',
    type: 'UUIDComparisonExpressionInput',
  },
  baseQuantity: {
    isArray: false,
    label: 'base quantity',
    type: 'FloatComparisonExpressionInput',
  },
  quoteQuantity: {
    isArray: false,
    label: 'quote quantity',
    type: 'FloatComparisonExpressionInput',
  },
  adjustedPriceWithExchangeFeeAndSpread: {
    isArray: false,
    label: 'adjusted price with exchange fee and spread',
    type: 'FloatComparisonExpressionInput',
  },
  isCorrectedByExchange: {
    isArray: false,
    label: 'is corrected by exchange',
    type: 'BooleanComparisonExpressionInput',
  },
  isDaxFillCorrected: {
    isArray: false,
    label: 'is dax fill corrected',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const ExchangeFillOrderInputProperties = {
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'OrderBy',
  },
  exchangeTradeDate: {
    isArray: false,
    label: 'exchange trade date',
    type: 'OrderBy',
  },
}

export const ExchangeOrderBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  tradeDate: {
    isArray: false,
    label: 'trade date',
    type: 'TimestampComparisonExpressionInput',
  },
  postDate: {
    isArray: false,
    label: 'post date',
    type: 'TimestampComparisonExpressionInput',
  },
  modifiedDate: {
    isArray: false,
    label: 'modified date',
    type: 'TimestampComparisonExpressionInput',
  },
  baseInstrumentID: {
    isArray: false,
    label: 'base instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  quoteInstrumentID: {
    isArray: false,
    label: 'quote instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  clientOrderID: {
    isArray: false,
    label: 'client order id',
    type: 'UUIDComparisonExpressionInput',
  },
  exchangeID: {
    isArray: false,
    label: 'exchange id',
    type: 'UUIDComparisonExpressionInput',
  },
  exchangeOrderID: {
    isArray: false,
    label: 'exchange order id',
    type: 'StringComparisonExpressionInput',
  },
  organizationID: {
    isArray: false,
    label: 'organization id',
    type: 'UUIDComparisonExpressionInput',
  },
  userAccountID: {
    isArray: false,
    label: 'user account id',
    type: 'UUIDComparisonExpressionInput',
  },
  side: {
    isArray: false,
    label: 'side',
    type: 'StringComparisonExpressionInput',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'StringComparisonExpressionInput',
  },
  fillBaseQuantities: {
    isArray: false,
    label: 'fill base quantities',
    type: 'FloatComparisonExpressionInput',
  },
  fillQuoteQuantitiesAdjusted: {
    isArray: false,
    label: 'fill quote quantities adjusted',
    type: 'FloatComparisonExpressionInput',
  },
  averageFillPriceAdjusted: {
    isArray: false,
    label: 'average fill price adjusted',
    type: 'FloatComparisonExpressionInput',
  },
  isCorrected: {
    isArray: false,
    label: 'is corrected',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const ExchangeOrderOrderInputProperties = {
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'OrderBy',
  },
}

export const ExchangeProductBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  ingestionReferenceId: {
    isArray: false,
    label: 'ingestion reference id',
    type: 'UUIDComparisonExpressionInput',
  },
  identifier: {
    isArray: false,
    label: 'identifier',
    type: 'StringComparisonExpressionInput',
  },
  isTestProduct: {
    isArray: false,
    label: 'is test product',
    type: 'BooleanComparisonExpressionInput',
  },
  isTradeDisabled: {
    isArray: false,
    label: 'is trade disabled',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const ExchangeProductOrderInputProperties = {
  identifier: {
    isArray: false,
    label: 'identifier',
    type: 'OrderBy',
  },
}

export const FileBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'StringComparisonExpressionInput',
  },
  associatedEntityID: {
    isArray: false,
    label: 'associated entity id',
    type: 'UUIDComparisonExpressionInput',
  },
}

export const FileOrderInputProperties = {
  name: {
    isArray: false,
    label: 'name',
    type: 'OrderBy',
  },
  size: {
    isArray: false,
    label: 'size',
    type: 'OrderBy',
  },
}

export const FinancialAccountBalanceSnapshotBoolExpressionInputProperties = {
  financialAccountID: {
    isArray: false,
    label: 'financial account id',
    type: 'UUIDComparisonExpressionInput',
  },
  financialAccountConnectionID: {
    isArray: false,
    label: 'financial account connection id',
    type: 'UUIDComparisonExpressionInput',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  time: {
    isArray: false,
    label: 'time',
    type: 'TimestampComparisonExpressionInput',
  },
}

export const FinancialAccountBalanceSnapshotOrderInputProperties = {
  time: {
    isArray: false,
    label: 'time',
    type: 'TimestampComparisonExpressionInput',
  },
}

export const FinancialAccountBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  financialAccountConnectionID: {
    isArray: false,
    label: 'financial account connection id',
    type: 'UUIDComparisonExpressionInput',
  },
  bitgoWalletStartDate: {
    isArray: false,
    label: 'bitgo wallet start date',
    type: 'TimestampComparisonExpressionInput',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'StringComparisonExpressionInput',
  },
  referenceID: {
    isArray: false,
    label: 'reference id',
    type: 'StringComparisonExpressionInput',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'StringComparisonExpressionInput',
  },
  bitgoWalletType: {
    isArray: false,
    label: 'bitgo wallet type',
    type: 'StringComparisonExpressionInput',
  },
  currencyID: {
    isArray: false,
    label: 'currency id',
    type: 'UUIDComparisonExpressionInput',
  },
  isDisabled: {
    isArray: false,
    label: 'is disabled',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const FinancialAccountConnectionBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  institutionID: {
    isArray: false,
    label: 'institution id',
    type: 'UUIDComparisonExpressionInput',
  },
  parentFinancialAccountConnectionID: {
    isArray: false,
    label: 'parent financial account connection id',
    type: 'UUIDComparisonExpressionInput',
  },
  portfolioID: {
    isArray: false,
    label: 'portfolio id',
    type: 'UUIDComparisonExpressionInput',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'StringComparisonExpressionInput',
  },
  isManagedByBitgo: {
    isArray: false,
    label: 'is managed by bitgo',
    type: 'BooleanComparisonExpressionInput',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'StringComparisonExpressionInput',
  },
}

export const FinancialAccountConnectionOrderInputProperties = {
  name: {
    isArray: false,
    label: 'name',
    type: 'OrderBy',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'OrderBy',
  },
}

export const FinancialAccountOrderInputProperties = {
  name: {
    isArray: false,
    label: 'name',
    type: 'OrderBy',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'OrderBy',
  },
}

export const FinancialTransactionBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  institutionID: {
    isArray: false,
    label: 'institution id',
    type: 'UUIDComparisonExpressionInput',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  portfolioID: {
    isArray: false,
    label: 'portfolio id',
    type: 'UUIDComparisonExpressionInput',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'FloatComparisonExpressionInput',
  },
  totalAmount: {
    isArray: false,
    label: 'total amount',
    type: 'FloatComparisonExpressionInput',
  },
  tradeDate: {
    isArray: false,
    label: 'trade date',
    type: 'TimestampComparisonExpressionInput',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'StringComparisonExpressionInput',
  },
  subtype: {
    isArray: false,
    label: 'subtype',
    type: 'StringComparisonExpressionInput',
  },
  source: {
    isArray: false,
    label: 'source',
    type: 'StringComparisonExpressionInput',
  },
  transactionHash: {
    isArray: false,
    label: 'transaction hash',
    type: 'StringComparisonExpressionInput',
  },
  accountingLineItem: {
    isArray: false,
    label: 'accounting line item',
    type: 'AccountingLineItemBoolExpressionInput',
  },
  hasClientOrder: {
    isArray: false,
    label: 'has client order',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const FinancialTransactionOrderInputProperties = {
  tradeDate: {
    isArray: false,
    label: 'trade date',
    type: 'OrderBy',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'OrderBy',
  },
}

export const FloatComparisonExpressionInputProperties = {
  eq: {
    isArray: false,
    label: 'eq',
    type: 'number | string',
  },
  gt: {
    isArray: false,
    label: 'gt',
    type: 'number | string',
  },
  gte: {
    isArray: false,
    label: 'gte',
    type: 'number | string',
  },
  isNotNull: {
    isArray: false,
    label: 'is not null',
    type: 'boolean',
  },
  isNull: {
    isArray: false,
    label: 'is null',
    type: 'boolean',
  },
  lt: {
    isArray: false,
    label: 'lt',
    type: 'number | string',
  },
  lte: {
    isArray: false,
    label: 'lte',
    type: 'number | string',
  },
  notEq: {
    isArray: false,
    label: 'not eq',
    type: 'number | string',
  },
}

export const HistoricalOrderBookBoolExpressionInputProperties = {
  time: {
    isArray: false,
    label: 'time',
    type: 'TimestampComparisonExpressionInput',
  },
  product: {
    isArray: false,
    label: 'product',
    type: 'StringComparisonExpressionInput',
  },
  exchange: {
    isArray: false,
    label: 'exchange',
    type: 'StringComparisonExpressionInput',
  },
}

export const HistoricalOrderBookOrderInputProperties = {
  time: {
    isArray: false,
    label: 'time',
    type: 'OrderBy',
  },
  product: {
    isArray: false,
    label: 'product',
    type: 'OrderBy',
  },
  exchange: {
    isArray: false,
    label: 'exchange',
    type: 'OrderBy',
  },
}

export const IDInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const ImportFinancialAccountDataInputProperties = {
  accountID: {
    isArray: false,
    label: 'account id',
    type: 'string',
  },
  fileIDs: {
    isArray: true,
    label: 'file id s',
    type: 'string',
  },
}

export const ImportManualResolvedFinancialTransactionsInputProperties = {
  accountID: {
    isArray: false,
    label: 'account id',
    type: 'string',
  },
  fileID: {
    isArray: false,
    label: 'file id',
    type: 'string',
  },
}

export const ImportPortfolioInputProperties = {
  fileID: {
    isArray: false,
    label: 'file id',
    type: 'string',
  },
}

export const ImportPortfolioPositionInputProperties = {
  conversionAsOfDate: {
    isArray: false,
    label: 'conversion as of date',
    type: 'string',
  },
  transactions: {
    isArray: true,
    label: 'transactions',
    type: 'ImportPortfolioPositionTransactionInput',
  },
  importedInstruments: {
    isArray: true,
    label: 'imported instruments',
    type: 'Edge',
  },
  ignoredInstruments: {
    isArray: true,
    label: 'ignored instruments',
    type: 'Edge',
  },
}

export const ImportPortfolioPositionTransactionInputProperties = {
  financialAccount: {
    isArray: false,
    label: 'financial account',
    type: 'Edge',
  },
  financialAccountConnection: {
    isArray: false,
    label: 'financial account connection',
    type: 'Edge',
  },
  instrument: {
    isArray: false,
    label: 'instrument',
    type: 'Edge',
  },
  acquisitionDate: {
    isArray: false,
    label: 'acquisition date',
    type: 'string',
  },
  costBasisAmount: {
    isArray: false,
    label: 'cost basis amount',
    type: 'number | string',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'number | string',
  },
}

export const InstitutionBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'StringComparisonExpressionInput',
  },
  identifier: {
    isArray: false,
    label: 'identifier',
    type: 'StringComparisonExpressionInput',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'StringComparisonExpressionInput',
  },
  isPrivate: {
    isArray: false,
    label: 'is private',
    type: 'BooleanComparisonExpressionInput',
  },
  isSupported: {
    isArray: false,
    label: 'is supported',
    type: 'BooleanComparisonExpressionInput',
  },
  isTradeEnabled: {
    isArray: false,
    label: 'is trade enabled',
    type: 'BooleanComparisonExpressionInput',
  },
  isTradeSupported: {
    isArray: false,
    label: 'is trade supported',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const InstitutionOrderInputProperties = {
  name: {
    isArray: false,
    label: 'name',
    type: 'OrderBy',
  },
}

export const InstrumentBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'StringComparisonExpressionInput',
  },
  symbol: {
    isArray: false,
    label: 'symbol',
    type: 'StringComparisonExpressionInput',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'StringComparisonExpressionInput',
  },
  isPrivate: {
    isArray: false,
    label: 'is private',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const InstrumentMappingInputProperties = {
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'string',
  },
  alias: {
    isArray: false,
    label: 'alias',
    type: 'string',
  },
}

export const InstrumentOrderInputProperties = {
  name: {
    isArray: false,
    label: 'name',
    type: 'OrderBy',
  },
  symbol: {
    isArray: false,
    label: 'symbol',
    type: 'OrderBy',
  },
}

export const IntegerComparisonExpressionInputProperties = {
  eq: {
    isArray: false,
    label: 'eq',
    type: 'number | string',
  },
  gt: {
    isArray: false,
    label: 'gt',
    type: 'number | string',
  },
  gte: {
    isArray: false,
    label: 'gte',
    type: 'number | string',
  },
  isNotNull: {
    isArray: false,
    label: 'is not null',
    type: 'boolean',
  },
  isNull: {
    isArray: false,
    label: 'is null',
    type: 'boolean',
  },
  lt: {
    isArray: false,
    label: 'lt',
    type: 'number | string',
  },
  lte: {
    isArray: false,
    label: 'lte',
    type: 'number | string',
  },
  notEq: {
    isArray: false,
    label: 'not eq',
    type: 'number | string',
  },
}

export const InternalClientOrderBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  strategyID: {
    isArray: false,
    label: 'strategy id',
    type: 'UUIDComparisonExpressionInput',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  tradeDate: {
    isArray: false,
    label: 'trade date',
    type: 'TimestampComparisonExpressionInput',
  },
  postDate: {
    isArray: false,
    label: 'post date',
    type: 'TimestampComparisonExpressionInput',
  },
  baseInstrumentID: {
    isArray: false,
    label: 'base instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  quoteInstrumentID: {
    isArray: false,
    label: 'quote instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  exchangeProductID: {
    isArray: false,
    label: 'exchange product id',
    type: 'UUIDComparisonExpressionInput',
  },
  userAccountID: {
    isArray: false,
    label: 'user account id',
    type: 'UUIDComparisonExpressionInput',
  },
  organizationID: {
    isArray: false,
    label: 'organization id',
    type: 'UUIDComparisonExpressionInput',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'FloatComparisonExpressionInput',
  },
  funds: {
    isArray: false,
    label: 'funds',
    type: 'FloatComparisonExpressionInput',
  },
  fillBaseQuantities: {
    isArray: false,
    label: 'fill base quantities',
    type: 'FloatComparisonExpressionInput',
  },
  fillQuoteQuantitiesAdjusted: {
    isArray: false,
    label: 'fill quote quantities adjusted',
    type: 'FloatComparisonExpressionInput',
  },
  averageFillPriceAdjusted: {
    isArray: false,
    label: 'average fill price adjusted',
    type: 'FloatComparisonExpressionInput',
  },
  side: {
    isArray: false,
    label: 'side',
    type: 'StringComparisonExpressionInput',
  },
  source: {
    isArray: false,
    label: 'source',
    type: 'StringComparisonExpressionInput',
  },
  algoStrategy: {
    isArray: false,
    label: 'algo strategy',
    type: 'StringComparisonExpressionInput',
  },
  collateralType: {
    isArray: false,
    label: 'collateral type',
    type: 'StringComparisonExpressionInput',
  },
  topUpAmount: {
    isArray: false,
    label: 'top up amount',
    type: 'FloatComparisonExpressionInput',
  },
  isCorrected: {
    isArray: false,
    label: 'is corrected',
    type: 'BooleanComparisonExpressionInput',
  },
  isReconciled: {
    isArray: false,
    label: 'is reconciled',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const InternalTradeBlockInboundOrderBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  modifiedDate: {
    isArray: false,
    label: 'modified date',
    type: 'TimestampComparisonExpressionInput',
  },
  tradeblockID: {
    isArray: false,
    label: 'tradeblock id',
    type: 'StringComparisonExpressionInput',
  },
  counterpartyID: {
    isArray: false,
    label: 'counterparty id',
    type: 'StringComparisonExpressionInput',
  },
  tradeblockDate: {
    isArray: false,
    label: 'tradeblock date',
    type: 'TimestampComparisonExpressionInput',
  },
  volume: {
    isArray: false,
    label: 'volume',
    type: 'FloatComparisonExpressionInput',
  },
  filledVolume: {
    isArray: false,
    label: 'filled volume',
    type: 'FloatComparisonExpressionInput',
  },
  price: {
    isArray: false,
    label: 'price',
    type: 'FloatComparisonExpressionInput',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
  side: {
    isArray: false,
    label: 'side',
    type: 'StringComparisonExpressionInput',
  },
  baseCurrency: {
    isArray: false,
    label: 'base currency',
    type: 'StringComparisonExpressionInput',
  },
  quoteCurrency: {
    isArray: false,
    label: 'quote currency',
    type: 'StringComparisonExpressionInput',
  },
}

export const InternalTradeBlockInboundOrderOrderInputProperties = {
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'OrderBy',
  },
  tradeblockDate: {
    isArray: false,
    label: 'tradeblock date',
    type: 'OrderBy',
  },
}

export const InternalTradeBlockOutboundOrderBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  modifiedDate: {
    isArray: false,
    label: 'modified date',
    type: 'TimestampComparisonExpressionInput',
  },
  tradeblockID: {
    isArray: false,
    label: 'tradeblock id',
    type: 'StringComparisonExpressionInput',
  },
  counterpartyID: {
    isArray: false,
    label: 'counterparty id',
    type: 'StringComparisonExpressionInput',
  },
  inboundOrderID: {
    isArray: false,
    label: 'inbound order id',
    type: 'UUIDComparisonExpressionInput',
  },
  tradeblockDate: {
    isArray: false,
    label: 'tradeblock date',
    type: 'TimestampComparisonExpressionInput',
  },
  volume: {
    isArray: false,
    label: 'volume',
    type: 'FloatComparisonExpressionInput',
  },
  price: {
    isArray: false,
    label: 'price',
    type: 'FloatComparisonExpressionInput',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
  side: {
    isArray: false,
    label: 'side',
    type: 'StringComparisonExpressionInput',
  },
  baseCurrency: {
    isArray: false,
    label: 'base currency',
    type: 'StringComparisonExpressionInput',
  },
  quoteCurrency: {
    isArray: false,
    label: 'quote currency',
    type: 'StringComparisonExpressionInput',
  },
}

export const InternalTradeBlockOutboundOrderOrderInputProperties = {
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'OrderBy',
  },
  tradeblockDate: {
    isArray: false,
    label: 'tradeblock date',
    type: 'OrderBy',
  },
}

export const LuminaUserBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  firstName: {
    isArray: false,
    label: 'first name',
    type: 'StringComparisonExpressionInput',
  },
  lastName: {
    isArray: false,
    label: 'last name',
    type: 'StringComparisonExpressionInput',
  },
  email: {
    isArray: false,
    label: 'email',
    type: 'StringComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  isKYCApproved: {
    isArray: false,
    label: 'is k y c approved',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const LuminaUserOrderInputProperties = {
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'OrderBy',
  },
}

export const MarginPercentageSummariesBoolExpressionInputProperties = {
  organization: {
    isArray: false,
    label: 'organization',
    type: 'string',
  },
  portfolio: {
    isArray: false,
    label: 'portfolio',
    type: 'string',
  },
  percentage: {
    isArray: false,
    label: 'percentage',
    type: 'number | string',
  },
  marginCalled: {
    isArray: false,
    label: 'margin called',
    type: 'string',
  },
  nopUtilizationNotified: {
    isArray: false,
    label: 'nop utilization notified',
    type: 'string',
  },
  collateralValue: {
    isArray: false,
    label: 'collateral value',
    type: 'number | string',
  },
  marginRequirement: {
    isArray: false,
    label: 'margin requirement',
    type: 'number | string',
  },
}

export const MarginPercentageSummariesOrderInputProperties = {
  percentage: {
    isArray: false,
    label: 'percentage',
    type: 'OrderBy',
  },
}

export const MarginSummariesBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
}

export const MarginTransferAmountInputProperties = {
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'string',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'string',
  },
}

export const MigrateFinancialAccountDeduplicationKeyInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const MigrateUnsupportedFinancialAccountConnectionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  institution: {
    isArray: false,
    label: 'institution',
    type: 'string',
  },
}

export const MockOrderProperties = {
  side: {
    isArray: false,
    label: 'side',
    type: 'string',
  },
  product: {
    isArray: false,
    label: 'product',
    type: 'string',
  },
  totalSize: {
    isArray: false,
    label: 'total size',
    type: 'number | string',
  },
  startTime: {
    isArray: false,
    label: 'start time',
    type: 'string',
  },
  duration: {
    isArray: false,
    label: 'duration',
    type: 'number | string',
  },
  interval: {
    isArray: false,
    label: 'interval',
    type: 'number | string',
  },
}

export const NullableEdgeProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const OrderBookAnalysisInputProperties = {
  orders: {
    isArray: true,
    label: 'orders',
    type: 'MockOrder',
  },
  tradeFeeOverrides: {
    isArray: true,
    label: 'trade fee overrides',
    type: 'TradeFeeSetting',
  },
}

export const OrganizationBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'StringComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
  version: {
    isArray: false,
    label: 'version',
    type: 'IntegerComparisonExpressionInput',
  },
}

export const OrganizationOrderInputProperties = {
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'OrderBy',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'OrderBy',
  },
}

export const PortfolioBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  isAtwebEnabled: {
    isArray: false,
    label: 'is atweb enabled',
    type: 'BooleanComparisonExpressionInput',
  },
  organizationID: {
    isArray: false,
    label: 'organization id',
    type: 'UUIDComparisonExpressionInput',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'StringComparisonExpressionInput',
  },
  isPortfolioProfessionalEnabled: {
    isArray: false,
    label: 'is portfolio professional enabled',
    type: 'BooleanComparisonExpressionInput',
  },
  isPortfolioInstitutionalEnabled: {
    isArray: false,
    label: 'is portfolio institutional enabled',
    type: 'BooleanComparisonExpressionInput',
  },
  isTaxEnabled: {
    isArray: false,
    label: 'is tax enabled',
    type: 'BooleanComparisonExpressionInput',
  },
  isTradeEnabled: {
    isArray: false,
    label: 'is trade enabled',
    type: 'BooleanComparisonExpressionInput',
  },
  isTradeAPIEnabled: {
    isArray: false,
    label: 'is trade api enabled',
    type: 'BooleanComparisonExpressionInput',
  },
  isReactOnly: {
    isArray: false,
    label: 'is react only',
    type: 'BooleanComparisonExpressionInput',
  },
  shouldUsersViewAllWallets: {
    isArray: false,
    label: 'should users view all wallets',
    type: 'BooleanComparisonExpressionInput',
  },
}

export const PortfolioOrderInputProperties = {
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'OrderBy',
  },
}

export const PositionBoolExpressionInputProperties = {
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  financialAccountID: {
    isArray: false,
    label: 'financial account id',
    type: 'UUIDComparisonExpressionInput',
  },
  financialAccountConnectionID: {
    isArray: false,
    label: 'financial account connection id',
    type: 'UUIDComparisonExpressionInput',
  },
  acquisitionDate: {
    isArray: false,
    label: 'acquisition date',
    type: 'TimestampComparisonExpressionInput',
  },
  dispositionDate: {
    isArray: false,
    label: 'disposition date',
    type: 'TimestampComparisonExpressionInput',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'FloatComparisonExpressionInput',
  },
  costBasis: {
    isArray: false,
    label: 'cost basis',
    type: 'FloatComparisonExpressionInput',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'StringComparisonExpressionInput',
  },
}

export const PricingOverrideBoolExpressionInputProperties = {
  interval: {
    isArray: false,
    label: 'interval',
    type: 'StringComparisonExpressionInput',
  },
  baseInstrumentID: {
    isArray: false,
    label: 'base instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  quoteInstrumentID: {
    isArray: false,
    label: 'quote instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  time: {
    isArray: false,
    label: 'time',
    type: 'TimestampComparisonExpressionInput',
  },
}

export const PricingOverrideInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  interval: {
    isArray: false,
    label: 'interval',
    type: 'PriceIntervalType',
  },
  time: {
    isArray: false,
    label: 'time',
    type: 'string',
  },
  close: {
    isArray: false,
    label: 'close',
    type: 'number | string',
  },
  notes: {
    isArray: false,
    label: 'notes',
    type: 'string',
  },
}

export const PricingOverrideOrderInputProperties = {
  time: {
    isArray: false,
    label: 'time',
    type: 'OrderBy',
  },
}

export const PurchaseSalesJournalBoolExpressionInputProperties = {
  transactionType: {
    isArray: false,
    label: 'transaction type',
    type: 'StringComparisonExpressionInput',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  transactionDate: {
    isArray: false,
    label: 'transaction date',
    type: 'TimestampComparisonExpressionInput',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'FloatComparisonExpressionInput',
  },
  costBasis: {
    isArray: false,
    label: 'cost basis',
    type: 'FloatComparisonExpressionInput',
  },
}

export const RealizedReportBoolExpressionInputProperties = {
  transactionType: {
    isArray: false,
    label: 'transaction type',
    type: 'StringComparisonExpressionInput',
  },
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'UUIDComparisonExpressionInput',
  },
  acquisitionDate: {
    isArray: false,
    label: 'acquisition date',
    type: 'TimestampComparisonExpressionInput',
  },
  dispositionDate: {
    isArray: false,
    label: 'disposition date',
    type: 'TimestampComparisonExpressionInput',
  },
  quantity: {
    isArray: false,
    label: 'quantity',
    type: 'FloatComparisonExpressionInput',
  },
  costBasis: {
    isArray: false,
    label: 'cost basis',
    type: 'FloatComparisonExpressionInput',
  },
  proceeds: {
    isArray: false,
    label: 'proceeds',
    type: 'FloatComparisonExpressionInput',
  },
  realizedReturn: {
    isArray: false,
    label: 'realized return',
    type: 'FloatComparisonExpressionInput',
  },
  realizedReturnPercentage: {
    isArray: false,
    label: 'realized return percentage',
    type: 'FloatComparisonExpressionInput',
  },
}

export const ReconcileFinancialAccountDiscrepanciesInputProperties = {
  accountID: {
    isArray: false,
    label: 'account id',
    type: 'string',
  },
  inputs: {
    isArray: true,
    label: 'inputs',
    type: 'ReconcileFinancialAccountPositionDiscrepanciesInput',
  },
}

export const ReconcileFinancialAccountPositionDiscrepanciesInputProperties = {
  instrumentID: {
    isArray: false,
    label: 'instrument id',
    type: 'string',
  },
  lineItems: {
    isArray: true,
    label: 'line items',
    type: 'AccountingLineItemInput',
  },
}

export const SetUserTradeDisclaimerFlagInputProperties = {
  hideTradeDisclaimer: {
    isArray: false,
    label: 'hide trade disclaimer',
    type: 'boolean',
  },
}

export const StringComparisonExpressionInputProperties = {
  eq: {
    isArray: false,
    label: 'eq',
    type: 'string',
  },
  gt: {
    isArray: false,
    label: 'gt',
    type: 'string',
  },
  gte: {
    isArray: false,
    label: 'gte',
    type: 'string',
  },
  iLike: {
    isArray: false,
    label: 'i like',
    type: 'string',
  },
  in: {
    isArray: true,
    label: 'in',
    type: 'string',
  },
  isNotNull: {
    isArray: false,
    label: 'is not null',
    type: 'boolean',
  },
  isNull: {
    isArray: false,
    label: 'is null',
    type: 'boolean',
  },
  like: {
    isArray: false,
    label: 'like',
    type: 'string',
  },
  lt: {
    isArray: false,
    label: 'lt',
    type: 'string',
  },
  lte: {
    isArray: false,
    label: 'lte',
    type: 'string',
  },
  notEq: {
    isArray: false,
    label: 'not eq',
    type: 'string',
  },
  notILike: {
    isArray: false,
    label: 'not i like',
    type: 'string',
  },
  notIn: {
    isArray: true,
    label: 'not in',
    type: 'string',
  },
  notlike: {
    isArray: false,
    label: 'notlike',
    type: 'string',
  },
  notSimilar: {
    isArray: false,
    label: 'not similar',
    type: 'string',
  },
  similar: {
    isArray: false,
    label: 'similar',
    type: 'string',
  },
}

export const SyncFinancialAccountConnectionInputProperties = {
  ids: {
    isArray: true,
    label: 'ids',
    type: 'string',
  },
  shouldResetConnection: {
    isArray: false,
    label: 'should reset connection',
    type: 'boolean',
  },
}

export const SyncFinancialAccountInputProperties = {
  connectionID: {
    isArray: false,
    label: 'connection id',
    type: 'string',
  },
  accountID: {
    isArray: false,
    label: 'account id',
    type: 'string',
  },
  shouldResetAccount: {
    isArray: false,
    label: 'should reset account',
    type: 'boolean',
  },
}

export const TaskBoolExpressionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'UUIDComparisonExpressionInput',
  },
  organizationID: {
    isArray: false,
    label: 'organization id',
    type: 'UUIDComparisonExpressionInput',
  },
  handler: {
    isArray: false,
    label: 'handler',
    type: 'StringComparisonExpressionInput',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'StringComparisonExpressionInput',
  },
  source: {
    isArray: false,
    label: 'source',
    type: 'StringComparisonExpressionInput',
  },
  duration_millis: {
    isArray: false,
    label: 'duration millis',
    type: 'IntegerComparisonExpressionInput',
  },
  creationDate: {
    isArray: false,
    label: 'creation date',
    type: 'TimestampComparisonExpressionInput',
  },
  scheduledDate: {
    isArray: false,
    label: 'scheduled date',
    type: 'TimestampComparisonExpressionInput',
  },
  modifiedDate: {
    isArray: false,
    label: 'modified date',
    type: 'TimestampComparisonExpressionInput',
  },
  startTime: {
    isArray: false,
    label: 'start time',
    type: 'TimestampComparisonExpressionInput',
  },
}

export const TaskOrderInputProperties = {
  scheduledDate: {
    isArray: false,
    label: 'scheduled date',
    type: 'OrderBy',
  },
}

export const TimestampComparisonExpressionInputProperties = {
  eq: {
    isArray: false,
    label: 'eq',
    type: 'string',
  },
  gt: {
    isArray: false,
    label: 'gt',
    type: 'string',
  },
  gte: {
    isArray: false,
    label: 'gte',
    type: 'string',
  },
  isNotNull: {
    isArray: false,
    label: 'is not null',
    type: 'boolean',
  },
  isNull: {
    isArray: false,
    label: 'is null',
    type: 'boolean',
  },
  lt: {
    isArray: false,
    label: 'lt',
    type: 'string',
  },
  lte: {
    isArray: false,
    label: 'lte',
    type: 'string',
  },
  notEq: {
    isArray: false,
    label: 'not eq',
    type: 'string',
  },
}

export const TradeBalanceExpressionInputProperties = {
  baseInstrumentID: {
    isArray: false,
    label: 'base instrument id',
    type: 'string',
  },
  quoteInstrumentID: {
    isArray: false,
    label: 'quote instrument id',
    type: 'string',
  },
}

export const TradeFeeSettingProperties = {
  exchange: {
    isArray: false,
    label: 'exchange',
    type: 'string',
  },
  feeRate: {
    isArray: false,
    label: 'fee rate',
    type: 'number | string',
  },
}

export const UUIDComparisonExpressionInputProperties = {
  eq: {
    isArray: false,
    label: 'eq',
    type: 'string',
  },
  in: {
    isArray: true,
    label: 'in',
    type: 'string',
  },
  isNotNull: {
    isArray: false,
    label: 'is not null',
    type: 'boolean',
  },
  isNull: {
    isArray: false,
    label: 'is null',
    type: 'boolean',
  },
  notEq: {
    isArray: false,
    label: 'not eq',
    type: 'string',
  },
  notIn: {
    isArray: true,
    label: 'not in',
    type: 'string',
  },
}

export const UpdateAccountingLineItemInputProperties = {
  isIgnored: {
    isArray: false,
    label: 'is ignored',
    type: 'boolean',
  },
  assetChartOfAccountID: {
    isArray: false,
    label: 'asset chart of account id',
    type: 'string',
  },
  liabilityChartOfAccountID: {
    isArray: false,
    label: 'liability chart of account id',
    type: 'string',
  },
  equityChartOfAccountID: {
    isArray: false,
    label: 'equity chart of account id',
    type: 'string',
  },
  expenseChartOfAccountID: {
    isArray: false,
    label: 'expense chart of account id',
    type: 'string',
  },
  revenueChartOfAccountID: {
    isArray: false,
    label: 'revenue chart of account id',
    type: 'string',
  },
}

export const UpdateChartOfAccountInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  portfolioID: {
    isArray: false,
    label: 'portfolio id',
    type: 'string',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'ChartOfAccountType',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'string',
  },
  description: {
    isArray: false,
    label: 'description',
    type: 'string',
  },
  accountNumber: {
    isArray: false,
    label: 'account number',
    type: 'string',
  },
}

export const UpdateFileInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  associatedEntityType: {
    isArray: false,
    label: 'associated entity type',
    type: 'EntityType',
  },
  associatedEntityID: {
    isArray: false,
    label: 'associated entity id',
    type: 'string',
  },
}

export const UpdateFinancialAccountConnectionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  credentials: {
    isArray: false,
    label: 'Credentials',
    type: 'CredentialsInput',
  },
  name: {
    isArray: false,
    label: 'Name',
    type: 'string',
  },
  isAutoUpdateEnabled: {
    isArray: false,
    label: 'Is Auto Update Enabled',
    type: 'boolean',
  },
  isTradeEnabled: {
    isArray: false,
    label: 'Trade Enabled',
    type: 'boolean',
  },
  financialAccounts: {
    isArray: true,
    label: 'Financial Accounts',
    type: 'UpdateFinancialAccountInput',
  },
  isBlockchainFeeLineItemEnabled: {
    isArray: false,
    label: 'Separate Blockchain Fee Line Item Enabled',
    type: 'boolean',
  },
  isSubAccount: {
    isArray: false,
    label: 'Is Sub Account',
    type: 'boolean',
  },
  parentConnection: {
    isArray: false,
    label: 'Parent Connection',
    type: 'NullableEdge',
  },
}

export const UpdateFinancialAccountInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'string',
  },
  isDisabled: {
    isArray: false,
    label: 'is disabled',
    type: 'boolean',
  },
  shouldHideCSVUploadPrompt: {
    isArray: false,
    label: 'should hide c s v upload prompt',
    type: 'boolean',
  },
  adventGenevaName: {
    isArray: false,
    label: 'advent geneva name',
    type: 'string',
  },
  syncVersion: {
    isArray: false,
    label: 'sync version',
    type: 'number | string',
  },
  lastBalancedSyncTime: {
    isArray: false,
    label: 'last balanced sync time',
    type: 'string',
  },
  isBitgoPaygWallet: {
    isArray: false,
    label: 'is bitgo payg wallet',
    type: 'boolean',
  },
}

export const UpdateFinancialTransactionInputProperties = {
  id: {
    isArray: false,
    label: 'ID',
    type: 'string',
  },
  notes: {
    isArray: false,
    label: 'Notes',
    type: 'string',
  },
  attachments: {
    isArray: true,
    label: 'Attachments',
    type: 'Edge',
  },
}

export const UpdateOrganizationInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'string',
  },
  isAtwebEnabled: {
    isArray: false,
    label: 'is atweb enabled',
    type: 'boolean',
  },
  isAdventGenevaEnabled: {
    isArray: false,
    label: 'is advent geneva enabled',
    type: 'boolean',
  },
  status: {
    isArray: false,
    label: 'status',
    type: 'OrganizationStatus',
  },
  defaultTaskPriority: {
    isArray: false,
    label: 'default task priority',
    type: 'TaskPriority',
  },
}

export const UpdatePortfolioInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'string',
  },
  functionalCurrency: {
    isArray: false,
    label: 'functional currency',
    type: 'Edge',
  },
  isPeriodicSyncEnabled: {
    isArray: false,
    label: 'is periodic sync enabled',
    type: 'boolean',
  },
  isBalanceSyncEnabled: {
    isArray: false,
    label: 'is balance sync enabled',
    type: 'boolean',
  },
  endOfDayTime: {
    isArray: false,
    label: 'end of day time',
    type: 'string',
  },
  endOfDayTimeZone: {
    isArray: false,
    label: 'end of day time zone',
    type: 'string',
  },
  portfolioPricingSource: {
    isArray: false,
    label: 'portfolio pricing source',
    type: 'PortfolioPricingSourceType',
  },
  reportingPricingSource: {
    isArray: false,
    label: 'reporting pricing source',
    type: 'PortfolioReportingPricingSourceType',
  },
  reportingFallbackPricingSource: {
    isArray: false,
    label: 'reporting fallback pricing source',
    type: 'PortfolioReportingFallbackPricingSourceType',
  },
  transactionCryptoFiatPricingSource: {
    isArray: false,
    label: 'transaction crypto fiat pricing source',
    type: 'PortfolioTransactionCryptoFiatPricingSourceType',
  },
  transactionFallbackPricingSource: {
    isArray: false,
    label: 'transaction fallback pricing source',
    type: 'PortfolioTransactionFallbackPricingSourceType',
  },
  transactionPricingSource: {
    isArray: false,
    label: 'transaction pricing source',
    type: 'PortfolioTransactionPricingSourceType',
  },
  taxLotIDMethod: {
    isArray: false,
    label: 'tax lot id method',
    type: 'PortfolioTaxLotIDMethodType',
  },
  taxLotIDBy: {
    isArray: false,
    label: 'tax lot id by',
    type: 'PortfolioTaxLotIDByType',
  },
  isSecurityMasterEnabled: {
    isArray: false,
    label: 'is security master enabled',
    type: 'boolean',
  },
  isBlotterEnabled: {
    isArray: false,
    label: 'is blotter enabled',
    type: 'boolean',
  },
  countLimit: {
    isArray: false,
    label: 'count limit',
    type: 'number | string',
  },
  isAtwebEnabled: {
    isArray: false,
    label: 'is atweb enabled',
    type: 'boolean',
  },
  atwebType: {
    isArray: false,
    label: 'atweb type',
    type: 'string',
  },
  atwebID: {
    isArray: false,
    label: 'atweb id',
    type: 'string',
  },
  isAdventGenevaEnabled: {
    isArray: false,
    label: 'is advent geneva enabled',
    type: 'boolean',
  },
  adventGenevaPortfolioName: {
    isArray: false,
    label: 'advent geneva portfolio name',
    type: 'string',
  },
  adventGenevaFundStructure: {
    isArray: false,
    label: 'advent geneva fund structure',
    type: 'string',
  },
  adventGenevaStrategy: {
    isArray: false,
    label: 'advent geneva strategy',
    type: 'string',
  },
  adventGenevaBrokerName: {
    isArray: false,
    label: 'advent geneva broker name',
    type: 'string',
  },
  adventGenevaTradeExpensesExpenseNumber: {
    isArray: false,
    label: 'advent geneva trade expenses expense number',
    type: 'string',
  },
  adventGenevaTotalCommission: {
    isArray: false,
    label: 'advent geneva total commission',
    type: 'string',
  },
  adventGenevaPriceList: {
    isArray: false,
    label: 'advent geneva price list',
    type: 'string',
  },
  adventGenevaOldFundStructure: {
    isArray: false,
    label: 'advent geneva old fund structure',
    type: 'string',
  },
  adventGenevaTransferType: {
    isArray: false,
    label: 'advent geneva transfer type',
    type: 'string',
  },
  adventGenevaNewStrategy: {
    isArray: false,
    label: 'advent geneva new strategy',
    type: 'string',
  },
  adventGenevaQuantityDecimal: {
    isArray: false,
    label: 'advent geneva quantity decimal',
    type: 'number | string',
  },
  adventGenevaNetInvestmentAmountDecimal: {
    isArray: false,
    label: 'advent geneva net investment amount decimal',
    type: 'number | string',
  },
  adventGenevaNetCounterAmountDecimal: {
    isArray: false,
    label: 'advent geneva net counter amount decimal',
    type: 'number | string',
  },
  adventGenevaPriceDecimal: {
    isArray: false,
    label: 'advent geneva price decimal',
    type: 'number | string',
  },
  conversionAsOfDate: {
    isArray: false,
    label: 'conversion as of date',
    type: 'string',
  },
  isChartOfAccountEnabled: {
    isArray: false,
    label: 'is chart of account enabled',
    type: 'boolean',
  },
  isAccountAutoClassificationEnabled: {
    isArray: false,
    label: 'is account auto classification enabled',
    type: 'boolean',
  },
  shouldIncludeFeesInTransactions: {
    isArray: false,
    label: 'should include fees in transactions',
    type: 'boolean',
  },
  shouldSmartReconcileDiscrepancies: {
    isArray: false,
    label: 'should smart reconcile discrepancies',
    type: 'boolean',
  },
  shouldSmartResolveFeesAsPaidRebatesAsEarned: {
    isArray: false,
    label: 'should smart resolve fees as paid rebates as earned',
    type: 'boolean',
  },
  shouldSmartResolveTransfersWithoutTransactionHash: {
    isArray: false,
    label: 'should smart resolve transfers without transaction hash',
    type: 'boolean',
  },
  shouldSmartResolveSentFunctionalCurrencyAsWithdrawals: {
    isArray: false,
    label: 'should smart resolve sent functional currency as withdrawals',
    type: 'boolean',
  },
  shouldSmartResolveReceivedFunctionalCurrencyAsDeposits: {
    isArray: false,
    label: 'should smart resolve received functional currency as deposits',
    type: 'boolean',
  },
  shouldSmartResolveBorrowTransactions: {
    isArray: false,
    label: 'should smart resolve borrow transactions',
    type: 'boolean',
  },
  shouldSmartResolveLendTransactions: {
    isArray: false,
    label: 'should smart resolve lend transactions',
    type: 'boolean',
  },
  shouldSmartResolveSentAsTransferOuts: {
    isArray: false,
    label: 'should smart resolve sent as transfer outs',
    type: 'boolean',
  },
  shouldSmartResolveReceivedAsTransferIns: {
    isArray: false,
    label: 'should smart resolve received as transfer ins',
    type: 'boolean',
  },
  blockchainTransferPercentThreshold: {
    isArray: false,
    label: 'blockchain transfer percent threshold',
    type: 'number | string',
  },
}

export const UpdatePricingOverrideInputProperties = {
  baseInstrument: {
    isArray: false,
    label: 'base instrument',
    type: 'Edge',
  },
  quoteInstrument: {
    isArray: false,
    label: 'quote instrument',
    type: 'Edge',
  },
  pricingOverrides: {
    isArray: true,
    label: 'pricing overrides',
    type: 'PricingOverrideInput',
  },
}

export const UpdateUserInputProperties = {
  id: {
    isArray: false,
    label: 'ID',
    type: 'string',
  },
  firstName: {
    isArray: false,
    label: 'First Name',
    type: 'string',
  },
  lastName: {
    isArray: false,
    label: 'Last Name',
    type: 'string',
  },
  inviteCode: {
    isArray: false,
    label: 'Invite Code',
    type: 'string',
  },
  isKYCApproved: {
    isArray: false,
    label: 'KYC Approved',
    type: 'boolean',
  },
}

export const UpdateWatchlistInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  instrumentIDs: {
    isArray: true,
    label: 'instrument id s',
    type: 'string',
  },
}

export const UpsertInstitutionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'string',
  },
  notes: {
    isArray: false,
    label: 'notes',
    type: 'string',
  },
  addressBook: {
    isArray: true,
    label: 'address book',
    type: 'AddressBookInput',
  },
}

export const UpsertInstrumentInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
  type: {
    isArray: false,
    label: 'type',
    type: 'InstrumentType',
  },
  symbol: {
    isArray: false,
    label: 'symbol',
    type: 'string',
  },
  name: {
    isArray: false,
    label: 'name',
    type: 'string',
  },
  logoURL: {
    isArray: false,
    label: 'logo url',
    type: 'string',
  },
  websiteURL: {
    isArray: false,
    label: 'website url',
    type: 'string',
  },
  redditURL: {
    isArray: false,
    label: 'reddit url',
    type: 'string',
  },
  twitterURL: {
    isArray: false,
    label: 'twitter url',
    type: 'string',
  },
  digitalAssetType: {
    isArray: false,
    label: 'digital asset type',
    type: 'InstrumentDigitalAssetType',
  },
  digitalAssetSourceCodeURL: {
    isArray: false,
    label: 'digital asset source code url',
    type: 'string',
  },
  digitalAssetExplorerURL: {
    isArray: false,
    label: 'digital asset explorer url',
    type: 'string',
  },
  digitalAssetExplorerTransactionURLPattern: {
    isArray: false,
    label: 'digital asset explorer transaction url pattern',
    type: 'string',
  },
  digitalAssetPlatformInstrument: {
    isArray: false,
    label: 'digital asset platform instrument',
    type: 'Edge',
  },
  digitalAssetTokenAddress: {
    isArray: false,
    label: 'digital asset token address',
    type: 'string',
  },
}

export const UpsertOnboardingFinancialAccountExchangeConnectionInputProperties = {
  id: {
    isArray: false,
    label: 'ID',
    type: 'string',
  },
  name: {
    isArray: false,
    label: 'Name',
    type: 'string',
  },
  credentials: {
    isArray: false,
    label: 'Credentials',
    type: 'CredentialsInput',
  },
  institution: {
    isArray: false,
    label: 'Institution',
    type: 'string',
  },
}

export const UpsertOnboardingFinancialAccountExchangeConnectionsInputProperties = {
  shouldSaveProgress: {
    isArray: false,
    label: 'should save progress',
    type: 'boolean',
  },
  shouldIgnoreInputs: {
    isArray: false,
    label: 'should ignore inputs',
    type: 'boolean',
  },
  inputs: {
    isArray: true,
    label: 'inputs',
    type: 'UpsertOnboardingFinancialAccountExchangeConnectionInput',
  },
  inputIndices: {
    isArray: true,
    label: 'input indices',
    type: 'number | string',
  },
}

export const UserAccountRoleBoolExpressionInputProperties = {
  entityID: {
    isArray: false,
    label: 'entity id',
    type: 'UUIDComparisonExpressionInput',
  },
  entityType: {
    isArray: false,
    label: 'entity type',
    type: 'StringComparisonExpressionInput',
  },
}

export const UserInvitationBoolExpressionInputProperties = {
  invitationStatus: {
    isArray: false,
    label: 'invitation status',
    type: 'StringComparisonExpressionInput',
  },
}

export const VerifiyFinancialAccountConnectionInputProperties = {
  id: {
    isArray: false,
    label: 'id',
    type: 'string',
  },
}

export const MutationInputMapping = {
  AccountingLineItemBoolExpressionInput: AccountingLineItemBoolExpressionInputProperties,
  AccountingLineItemInput: AccountingLineItemInputProperties,
  AccountingLineItemOrderInput: AccountingLineItemOrderInputProperties,
  AddressBookBoolExpressionInput: AddressBookBoolExpressionInputProperties,
  AddressBookInput: AddressBookInputProperties,
  AggregatePricingReportBoolExpressionInput: AggregatePricingReportBoolExpressionInputProperties,
  ApplyPortfolioAssetsImpairmentInput: ApplyPortfolioAssetsImpairmentInputProperties,
  AssociateFileWithPortfolioConversionInput: AssociateFileWithPortfolioConversionInputProperties,
  AutoResolveFinancialAccountConnectionInput: AutoResolveFinancialAccountConnectionInputProperties,
  BlockchainExtendedPublicKey: BlockchainExtendedPublicKeyProperties,
  BlockchainMultisigPublicKeys: BlockchainMultisigPublicKeysProperties,
  BooleanComparisonExpressionInput: BooleanComparisonExpressionInputProperties,
  BulkCreateFinancialTransactionsInput: BulkCreateFinancialTransactionsInputProperties,
  CancelClientOrderInput: CancelClientOrderInputProperties,
  CancelOrderInput: CancelOrderInputProperties,
  ClientOrderBoolExpressionInput: ClientOrderBoolExpressionInputProperties,
  ClientOrderOrderInput: ClientOrderOrderInputProperties,
  ClientOrderParamsInput: ClientOrderParamsInputProperties,
  ClientOrderSyncBoolExpressionInput: ClientOrderSyncBoolExpressionInputProperties,
  CreateChartOfAccountInput: CreateChartOfAccountInputProperties,
  CreateClientOrderInput: CreateClientOrderInputProperties,
  CreateFileURLInput: CreateFileURLInputProperties,
  CreateFinancialAccountConnectionFromCSVInput: CreateFinancialAccountConnectionFromCSVInputProperties,
  CreateFinancialAccountConnectionInput: CreateFinancialAccountConnectionInputProperties,
  CreateFinancialAccountInput: CreateFinancialAccountInputProperties,
  CreateFinancialTransactionInput: CreateFinancialTransactionInputProperties,
  CreateIntegrationInput: CreateIntegrationInputProperties,
  CreateInvestorProfileInput: CreateInvestorProfileInputProperties,
  CreateMarginTransferInput: CreateMarginTransferInputProperties,
  CreatePortfolioInput: CreatePortfolioInputProperties,
  CreatePricingOverridesFromCSVInput: CreatePricingOverridesFromCSVInputProperties,
  CreateWatchlistItemInput: CreateWatchlistItemInputProperties,
  CredentialsInput: CredentialsInputProperties,
  DeleteAccountingLineItemInput: DeleteAccountingLineItemInputProperties,
  DeleteChartOfAccountInput: DeleteChartOfAccountInputProperties,
  DeleteFileInput: DeleteFileInputProperties,
  DeleteFinancialAccountConnectionInput: DeleteFinancialAccountConnectionInputProperties,
  DeleteFinancialAccountDataInput: DeleteFinancialAccountDataInputProperties,
  DeleteFinancialTransactionInput: DeleteFinancialTransactionInputProperties,
  DeleteHistoricalDataInput: DeleteHistoricalDataInputProperties,
  DeleteInstitutionInput: DeleteInstitutionInputProperties,
  DeleteInstrumentInput: DeleteInstrumentInputProperties,
  DeleteIntegrationInput: DeleteIntegrationInputProperties,
  DeletePortfolioConversionFileInput: DeletePortfolioConversionFileInputProperties,
  DeletePortfolioInput: DeletePortfolioInputProperties,
  DeletePricingOverrideInput: DeletePricingOverrideInputProperties,
  DeleteWatchlistItemInput: DeleteWatchlistItemInputProperties,
  Edge: EdgeProperties,
  ExchangeFillBoolExpressionInput: ExchangeFillBoolExpressionInputProperties,
  ExchangeFillOrderInput: ExchangeFillOrderInputProperties,
  ExchangeOrderBoolExpressionInput: ExchangeOrderBoolExpressionInputProperties,
  ExchangeOrderOrderInput: ExchangeOrderOrderInputProperties,
  ExchangeProductBoolExpressionInput: ExchangeProductBoolExpressionInputProperties,
  ExchangeProductOrderInput: ExchangeProductOrderInputProperties,
  FileBoolExpressionInput: FileBoolExpressionInputProperties,
  FileOrderInput: FileOrderInputProperties,
  FinancialAccountBalanceSnapshotBoolExpressionInput: FinancialAccountBalanceSnapshotBoolExpressionInputProperties,
  FinancialAccountBalanceSnapshotOrderInput: FinancialAccountBalanceSnapshotOrderInputProperties,
  FinancialAccountBoolExpressionInput: FinancialAccountBoolExpressionInputProperties,
  FinancialAccountConnectionBoolExpressionInput: FinancialAccountConnectionBoolExpressionInputProperties,
  FinancialAccountConnectionOrderInput: FinancialAccountConnectionOrderInputProperties,
  FinancialAccountOrderInput: FinancialAccountOrderInputProperties,
  FinancialTransactionBoolExpressionInput: FinancialTransactionBoolExpressionInputProperties,
  FinancialTransactionOrderInput: FinancialTransactionOrderInputProperties,
  FloatComparisonExpressionInput: FloatComparisonExpressionInputProperties,
  HistoricalOrderBookBoolExpressionInput: HistoricalOrderBookBoolExpressionInputProperties,
  HistoricalOrderBookOrderInput: HistoricalOrderBookOrderInputProperties,
  IDInput: IDInputProperties,
  ImportFinancialAccountDataInput: ImportFinancialAccountDataInputProperties,
  ImportManualResolvedFinancialTransactionsInput: ImportManualResolvedFinancialTransactionsInputProperties,
  ImportPortfolioInput: ImportPortfolioInputProperties,
  ImportPortfolioPositionInput: ImportPortfolioPositionInputProperties,
  ImportPortfolioPositionTransactionInput: ImportPortfolioPositionTransactionInputProperties,
  InstitutionBoolExpressionInput: InstitutionBoolExpressionInputProperties,
  InstitutionOrderInput: InstitutionOrderInputProperties,
  InstrumentBoolExpressionInput: InstrumentBoolExpressionInputProperties,
  InstrumentMappingInput: InstrumentMappingInputProperties,
  InstrumentOrderInput: InstrumentOrderInputProperties,
  IntegerComparisonExpressionInput: IntegerComparisonExpressionInputProperties,
  InternalClientOrderBoolExpressionInput: InternalClientOrderBoolExpressionInputProperties,
  InternalTradeBlockInboundOrderBoolExpressionInput: InternalTradeBlockInboundOrderBoolExpressionInputProperties,
  InternalTradeBlockInboundOrderOrderInput: InternalTradeBlockInboundOrderOrderInputProperties,
  InternalTradeBlockOutboundOrderBoolExpressionInput: InternalTradeBlockOutboundOrderBoolExpressionInputProperties,
  InternalTradeBlockOutboundOrderOrderInput: InternalTradeBlockOutboundOrderOrderInputProperties,
  LuminaUserBoolExpressionInput: LuminaUserBoolExpressionInputProperties,
  LuminaUserOrderInput: LuminaUserOrderInputProperties,
  MarginPercentageSummariesBoolExpressionInput: MarginPercentageSummariesBoolExpressionInputProperties,
  MarginPercentageSummariesOrderInput: MarginPercentageSummariesOrderInputProperties,
  MarginSummariesBoolExpressionInput: MarginSummariesBoolExpressionInputProperties,
  MarginTransferAmountInput: MarginTransferAmountInputProperties,
  MigrateFinancialAccountDeduplicationKeyInput: MigrateFinancialAccountDeduplicationKeyInputProperties,
  MigrateUnsupportedFinancialAccountConnectionInput: MigrateUnsupportedFinancialAccountConnectionInputProperties,
  MockOrder: MockOrderProperties,
  NullableEdge: NullableEdgeProperties,
  OrderBookAnalysisInput: OrderBookAnalysisInputProperties,
  OrganizationBoolExpressionInput: OrganizationBoolExpressionInputProperties,
  OrganizationOrderInput: OrganizationOrderInputProperties,
  PortfolioBoolExpressionInput: PortfolioBoolExpressionInputProperties,
  PortfolioOrderInput: PortfolioOrderInputProperties,
  PositionBoolExpressionInput: PositionBoolExpressionInputProperties,
  PricingOverrideBoolExpressionInput: PricingOverrideBoolExpressionInputProperties,
  PricingOverrideInput: PricingOverrideInputProperties,
  PricingOverrideOrderInput: PricingOverrideOrderInputProperties,
  PurchaseSalesJournalBoolExpressionInput: PurchaseSalesJournalBoolExpressionInputProperties,
  RealizedReportBoolExpressionInput: RealizedReportBoolExpressionInputProperties,
  ReconcileFinancialAccountDiscrepanciesInput: ReconcileFinancialAccountDiscrepanciesInputProperties,
  ReconcileFinancialAccountPositionDiscrepanciesInput: ReconcileFinancialAccountPositionDiscrepanciesInputProperties,
  SetUserTradeDisclaimerFlagInput: SetUserTradeDisclaimerFlagInputProperties,
  StringComparisonExpressionInput: StringComparisonExpressionInputProperties,
  SyncFinancialAccountConnectionInput: SyncFinancialAccountConnectionInputProperties,
  SyncFinancialAccountInput: SyncFinancialAccountInputProperties,
  TaskBoolExpressionInput: TaskBoolExpressionInputProperties,
  TaskOrderInput: TaskOrderInputProperties,
  TimestampComparisonExpressionInput: TimestampComparisonExpressionInputProperties,
  TradeBalanceExpressionInput: TradeBalanceExpressionInputProperties,
  TradeFeeSetting: TradeFeeSettingProperties,
  UUIDComparisonExpressionInput: UUIDComparisonExpressionInputProperties,
  UpdateAccountingLineItemInput: UpdateAccountingLineItemInputProperties,
  UpdateChartOfAccountInput: UpdateChartOfAccountInputProperties,
  UpdateFileInput: UpdateFileInputProperties,
  UpdateFinancialAccountConnectionInput: UpdateFinancialAccountConnectionInputProperties,
  UpdateFinancialAccountInput: UpdateFinancialAccountInputProperties,
  UpdateFinancialTransactionInput: UpdateFinancialTransactionInputProperties,
  UpdateOrganizationInput: UpdateOrganizationInputProperties,
  UpdatePortfolioInput: UpdatePortfolioInputProperties,
  UpdatePricingOverrideInput: UpdatePricingOverrideInputProperties,
  UpdateUserInput: UpdateUserInputProperties,
  UpdateWatchlistInput: UpdateWatchlistInputProperties,
  UpsertInstitutionInput: UpsertInstitutionInputProperties,
  UpsertInstrumentInput: UpsertInstrumentInputProperties,
  UpsertOnboardingFinancialAccountExchangeConnectionInput:
    UpsertOnboardingFinancialAccountExchangeConnectionInputProperties,
  UpsertOnboardingFinancialAccountExchangeConnectionsInput:
    UpsertOnboardingFinancialAccountExchangeConnectionsInputProperties,
  UserAccountRoleBoolExpressionInput: UserAccountRoleBoolExpressionInputProperties,
  UserInvitationBoolExpressionInput: UserInvitationBoolExpressionInputProperties,
  VerifiyFinancialAccountConnectionInput: VerifiyFinancialAccountConnectionInputProperties,
}
/// ////////////////////////////////////////////////////////////////////////////
// Queries
/// ////////////////////////////////////////////////////////////////////////////

export interface CurrentUserQueryData {
  currentUser: User
}

export interface AccountingLineItemsQueryData {
  accountingLineItems: AccountingLineItemsAggregationResponse
}

export interface BackingTransferWithPendingApprovalQueryData {
  backingTransferWithPendingApproval: TransferWithPendingApprovalQueryResponse
}

export interface ChartOfAccountsQueryData {
  chartOfAccounts: Array<ChartOfAccount>
}

export interface ChartOfAccountTypeReferencesQueryData {
  chartOfAccountTypeReferences: Array<ChartOfAccountTypeReference>
}

export interface FilesQueryData {
  files: FilesQueryResponse
}

export interface FinancialAccountConnectionsQueryData {
  financialAccountConnections: FinancialAccountConnectionsQueryResponse
}

export interface FinancialAccountsQueryData {
  financialAccounts: FinancialAccountsQueryResponse
}

export interface FinancialAccountBalanceSnapshotsQueryData {
  financialAccountBalanceSnapshots: FinancialAccountBalanceSnapshotQueryResponse
}

export interface FinancialTransactionsQueryData {
  financialTransactions: FinancialTransactionsAggregationResponse
}

export interface IntegrationsQueryData {
  integrations: IntegrationsQueryResponse
}

export interface InstrumentsQueryData {
  instruments: InstrumentsQueryResponse
}

export interface InstitutionsQueryData {
  institutions: InstitutionsQueryResponse
}

export interface NotificationsQueryData {
  notifications: Array<Notification>
}

export interface OrganizationQueryData {
  organization: Organization
}

export interface PortfoliosQueryData {
  portfolios: Array<Portfolio>
}

export interface PricingOverridesQueryData {
  pricingOverrides: PricingOverridesQueryResponse
}

export interface WatchlistsQueryData {
  watchlists: Array<Watchlist>
}

export interface DisabledExchangeProductsQueryData {
  disabledExchangeProducts: Array<ExchangeProduct>
}

export interface MarginPortfolioSummaryQueryData {
  marginPortfolioSummary: MarginPortfolioSummary
}

export interface MarginPortfolioOpenPositionsQueryData {
  marginPortfolioOpenPositions: MarginPortfolioOpenPositions
}

export interface MarginPortfolioCollateralDetailQueryData {
  marginPortfolioCollateralDetail: MarginPortfolioCollateralDetails
}

export interface MarginPortfolioSettingsQueryData {
  marginPortfolioSettings: MarginSettings
}

export interface MarginPortfolioTransactionQueryData {
  marginPortfolioTransaction: Array<MarginPortfolioTransaction>
}

export interface MarginPortfolioProjectedNopQueryData {
  marginPortfolioProjectedNop: MarginPortfolioProjectedNop
}

export interface HoldingsReportQueryData {
  holdingsReport: HoldingsReportQueryResponse
}

export interface PositionsReportQueryData {
  positionsReport: PositionsReportQueryResponse
}

export interface OpenPositionsReportQueryData {
  openPositionsReport: OpenPositionsReportQueryResponse
}

export interface OpenPositionsByInstrumentReportQueryData {
  openPositionsByInstrumentReport: OpenPositionsByInstrumentReportQueryResponse
}

export interface PurchaseSalesJournalQueryData {
  purchaseSalesJournal: PurchaseSalesJournalQueryResponse
}

export interface RealizedReportQueryData {
  realizedReport: RealizedReportQueryResponse
}

export interface AggregatePricingReportQueryData {
  aggregatePricingReport: Array<AggregatePricingEntry>
}

export interface AtwebTransactionsReportQueryData {
  atwebTransactionsReport: AtwebTransactionsQueryResponse
}

export interface AdventGenevaTransactionsReportQueryData {
  adventGenevaTransactionsReport: AdventGenevaTransactionsQueryResponse
}

export interface AdventGenevaPricingReportQueryData {
  adventGenevaPricingReport: Array<AdventGenevaPricingEntry>
}

export interface AdventGenevaTransfersReportQueryData {
  adventGenevaTransfersReport: AdventGenevaTransfersQueryResponse
}

export interface BalanceSheetQueryData {
  balanceSheet: Array<FinancialStatementEntry>
}

export interface IncomeStatementQueryData {
  incomeStatement: Array<FinancialStatementEntry>
}

export interface TrialBalanceQueryData {
  trialBalance: Array<TrialBalanceEntry>
}

export interface ClientOrdersQueryData {
  clientOrders: ClientOrdersAggregationResponse
}

export interface ExchangeOrdersQueryData {
  exchangeOrders: ExchangeOrdersAggregationResponse
}

export interface ExchangeFillsQueryData {
  exchangeFills: ExchangeFillsAggregationResponse
}

export interface TradeConnectionBalancesQueryData {
  tradeConnectionBalances: Array<TradeConnectionBalance>
}

export interface TradeProductsQueryData {
  tradeProducts: Array<TradeProduct>
}

export interface TradeSettingsQueryData {
  tradeSettings: TradeSettings
}

export interface SystemStatusQueryData {
  systemStatus: SystemStatus
}

/// ////////////////////////////////////////////////////////////////////////////
// Mutations
/// ////////////////////////////////////////////////////////////////////////////

export interface UpdateAccountingLineItemsMutationData {
  updateAccountingLineItems: AccountingLineItemResponse
}

export interface UpdateAccountingLineItemsMutationVariable {
  input: UpdateAccountingLineItemInput
}

export interface DeleteManualResolutionAccountingLineItemMutationData {
  deleteManualResolutionAccountingLineItem: AccountingLineItemResponse
}

export interface DeleteManualResolutionAccountingLineItemMutationVariable {
  input: DeleteAccountingLineItemInput
}

export interface DeleteAccountingLineItemsMutationData {
  deleteAccountingLineItems: AccountingLineItemResponse
}

export interface CreateChartOfAccountMutationData {
  createChartOfAccount: ChartOfAccount
}

export interface CreateChartOfAccountMutationVariable {
  input: CreateChartOfAccountInput
}

export interface UpdateChartOfAccountMutationData {
  updateChartOfAccount: ChartOfAccount
}

export interface UpdateChartOfAccountMutationVariable {
  input: UpdateChartOfAccountInput
}

export interface DeleteChartOfAccountMutationData {
  deleteChartOfAccount: ChartOfAccount
}

export interface DeleteChartOfAccountMutationVariable {
  input: DeleteChartOfAccountInput
}

export interface UpdateFileMutationData {
  updateFile: File
}

export interface UpdateFileMutationVariable {
  input: UpdateFileInput
}

export interface DeleteFileMutationData {
  deleteFile: File
}

export interface DeleteFileMutationVariable {
  input: DeleteFileInput
}

export interface CreateFileURLMutationData {
  createFileURL: CreateFileURLResponse
}

export interface CreateFileURLMutationVariable {
  input: CreateFileURLInput
}

export interface ImportFinancialAccountDataMutationData {
  importFinancialAccountData: FinancialAccountResponse
}

export interface ImportFinancialAccountDataMutationVariable {
  input: ImportFinancialAccountDataInput
}

export interface DeleteFinancialAccountDataMutationData {
  deleteFinancialAccountData: FinancialAccountResponse
}

export interface DeleteFinancialAccountDataMutationVariable {
  input: DeleteFinancialAccountDataInput
}

export interface UpdateFinancialAccountMutationData {
  updateFinancialAccount: FinancialAccountResponse
}

export interface UpdateFinancialAccountMutationVariable {
  input: UpdateFinancialAccountInput
}

export interface UpdateFinancialAccountsMutationData {
  updateFinancialAccounts: FinancialAccountResponse
}

export interface UpdateFinancialAccountsMutationVariable {
  input: UpdateFinancialAccountInput[]
}

export interface ReconcileFinancialAccountDiscrepanciesMutationData {
  reconcileFinancialAccountDiscrepancies: AccountingLineItemResponse
}

export interface ReconcileFinancialAccountDiscrepanciesMutationVariable {
  input: ReconcileFinancialAccountDiscrepanciesInput
}

export interface CreateFinancialAccountConnectionMutationData {
  createFinancialAccountConnection: FinancialAccountConnectionResponse
}

export interface CreateFinancialAccountConnectionMutationVariable {
  input: CreateFinancialAccountConnectionInput
}

export interface CreateFinancialAccountConnectionFromCSVMutationData {
  createFinancialAccountConnectionFromCSV: FinancialAccountConnectionResponse
}

export interface CreateFinancialAccountConnectionFromCSVMutationVariable {
  input: CreateFinancialAccountConnectionFromCSVInput
}

export interface DeleteFinancialAccountConnectionMutationData {
  deleteFinancialAccountConnection: FinancialAccountConnectionResponse
}

export interface DeleteFinancialAccountConnectionMutationVariable {
  input: DeleteFinancialAccountConnectionInput
}

export interface UpdateFinancialAccountConnectionMutationData {
  updateFinancialAccountConnection: FinancialAccountConnectionResponse
}

export interface UpdateFinancialAccountConnectionMutationVariable {
  input: UpdateFinancialAccountConnectionInput
}

export interface UpsertOnboardingFinancialAccountExchangeConnectionsMutationData {
  upsertOnboardingFinancialAccountExchangeConnections: FinancialAccountConnectionResponse
}

export interface UpsertOnboardingFinancialAccountExchangeConnectionsMutationVariable {
  input: UpsertOnboardingFinancialAccountExchangeConnectionsInput
}

export interface SyncFinancialAccountConnectionsMutationData {
  syncFinancialAccountConnections: FinancialAccountConnectionResponse
}

export interface SyncFinancialAccountConnectionsMutationVariable {
  input: SyncFinancialAccountConnectionInput
}

export interface SyncFinancialAccountMutationData {
  syncFinancialAccount: FinancialAccountResponse
}

export interface SyncFinancialAccountMutationVariable {
  input: SyncFinancialAccountInput
}

export interface SyncFinancialAccountConnectionsBalancesMutationData {
  syncFinancialAccountConnectionsBalances: PortfolioResponse
}

export interface BulkCreateFinancialTransactionsMutationData {
  bulkCreateFinancialTransactions: FinancialTransactionResponse
}

export interface BulkCreateFinancialTransactionsMutationVariable {
  input: BulkCreateFinancialTransactionsInput
}

export interface BulkDeleteManualResolvedFinancialTransactionsMutationData {
  bulkDeleteManualResolvedFinancialTransactions: FinancialTransactionResponse
}

export interface CreateFinancialTransactionMutationData {
  createFinancialTransaction: FinancialTransactionResponse
}

export interface CreateFinancialTransactionMutationVariable {
  input: CreateFinancialTransactionInput
}

export interface DeleteFinancialTransactionMutationData {
  deleteFinancialTransaction: FinancialTransactionResponse
}

export interface DeleteFinancialTransactionMutationVariable {
  input: DeleteFinancialTransactionInput
}

export interface UpdateFinancialTransactionMutationData {
  updateFinancialTransaction: FinancialTransactionResponse
}

export interface UpdateFinancialTransactionMutationVariable {
  input: UpdateFinancialTransactionInput
}

export interface ImportPortfolioPositionMutationData {
  importPortfolioPosition: FinancialTransactionResponse
}

export interface ImportPortfolioPositionMutationVariable {
  input: ImportPortfolioPositionInput
}

export interface CreateClientOrderMutationData {
  createClientOrder: ClientOrderResponse
}

export interface CreateClientOrderMutationVariable {
  input: CreateClientOrderInput
}

export interface CancelClientOrderMutationData {
  cancelClientOrder: ClientOrderResponse
}

export interface CancelClientOrderMutationVariable {
  input: CancelClientOrderInput
}

export interface CreateIntegrationMutationData {
  createIntegration: IntegrationResponse
}

export interface CreateIntegrationMutationVariable {
  input: CreateIntegrationInput
}

export interface DeleteIntegrationMutationData {
  deleteIntegration: IntegrationResponse
}

export interface DeleteIntegrationMutationVariable {
  input: DeleteIntegrationInput
}

export interface UpsertInstitutionMutationData {
  upsertInstitution: InstitutionResponse
}

export interface UpsertInstitutionMutationVariable {
  input: UpsertInstitutionInput
}

export interface DeleteInstitutionMutationData {
  deleteInstitution: InstitutionResponse
}

export interface DeleteInstitutionMutationVariable {
  input: DeleteInstitutionInput
}

export interface UpsertInstrumentMutationData {
  upsertInstrument: InstrumentResponse
}

export interface UpsertInstrumentMutationVariable {
  input: UpsertInstrumentInput
}

export interface DeleteInstrumentMutationData {
  deleteInstrument: InstrumentResponse
}

export interface DeleteInstrumentMutationVariable {
  input: DeleteInstrumentInput
}

export interface UpdateOrganizationMutationData {
  updateOrganization: OrganizationResponse
}

export interface UpdateOrganizationMutationVariable {
  input: UpdateOrganizationInput
}

export interface DeletePortfolioMutationData {
  deletePortfolio: PortfolioResponse
}

export interface DeletePortfolioMutationVariable {
  input: DeletePortfolioInput
}

export interface UpdatePortfolioMutationData {
  updatePortfolio: PortfolioResponse
}

export interface UpdatePortfolioMutationVariable {
  input: UpdatePortfolioInput
}

export interface CreateInvestorProfileMutationData {
  createInvestorProfile: InvestorProfileResponse
}

export interface CreateInvestorProfileMutationVariable {
  input: CreateInvestorProfileInput
}

export interface AssociateFileWithPortfolioConversionMutationData {
  associateFileWithPortfolioConversion: AssociateFileWithPortfolioConversionResponse
}

export interface AssociateFileWithPortfolioConversionMutationVariable {
  input: AssociateFileWithPortfolioConversionInput
}

export interface DeletePortfolioConversionFileMutationData {
  deletePortfolioConversionFile: DeletePortfolioConversionFileResponse
}

export interface DeletePortfolioConversionFileMutationVariable {
  input: DeletePortfolioConversionFileInput
}

export interface RunSmartResolutionMutationData {
  runSmartResolution: PortfolioResponse
}

export interface RevertSmartResolutionMutationData {
  revertSmartResolution: PortfolioResponse
}

export interface RecomputePortfolioTransactionsMutationData {
  recomputePortfolioTransactions: PortfolioResponse
}

export interface RecomputePortfolioPositionsMutationData {
  recomputePortfolioPositions: PortfolioResponse
}

export interface ApplyPortfolioAssetsImpairmentMutationData {
  applyPortfolioAssetsImpairment: PortfolioResponse
}

export interface ApplyPortfolioAssetsImpairmentMutationVariable {
  input: ApplyPortfolioAssetsImpairmentInput
}

export interface AutoClassifyPortfolioMutationData {
  autoClassifyPortfolio: PortfolioResponse
}

export interface UnclassifyPortfolioMutationData {
  unclassifyPortfolio: PortfolioResponse
}

export interface UpdatePricingOverridesMutationData {
  updatePricingOverrides: PricingOverrideResponse
}

export interface UpdatePricingOverridesMutationVariable {
  input: UpdatePricingOverrideInput
}

export interface CreatePricingOverridesFromCSVMutationData {
  createPricingOverridesFromCSV: PricingOverrideResponse
}

export interface CreatePricingOverridesFromCSVMutationVariable {
  input: CreatePricingOverridesFromCSVInput
}

export interface DeletePricingOverridesMutationData {
  deletePricingOverrides: PricingOverrideResponse
}

export interface DeletePricingOverridesMutationVariable {
  input: DeletePricingOverrideInput
}

export interface UpdateInstrumentMappingMutationData {
  updateInstrumentMapping: Array<InstrumentMapping>
}

export interface UpdateInstrumentMappingMutationVariable {
  input: InstrumentMappingInput[]
}

export interface SetUserTradeDisclaimerFlagMutationData {
  setUserTradeDisclaimerFlag: UpdateUserResponse
}

export interface SetUserTradeDisclaimerFlagMutationVariable {
  input: SetUserTradeDisclaimerFlagInput
}

export interface CreateWatchlistItemMutationData {
  createWatchlistItem: WatchlistItemResponse
}

export interface CreateWatchlistItemMutationVariable {
  input: CreateWatchlistItemInput
}

export interface DeleteWatchlistItemMutationData {
  deleteWatchlistItem: WatchlistItemResponse
}

export interface DeleteWatchlistItemMutationVariable {
  input: DeleteWatchlistItemInput
}

export interface UpdateWatchlistMutationData {
  updateWatchlist: WatchlistResponse
}

export interface UpdateWatchlistMutationVariable {
  input: UpdateWatchlistInput
}

export interface CreateMarginTransferMutationData {
  createMarginTransfer: MarginTransferResponse
}

export interface CreateMarginTransferMutationVariable {
  input: CreateMarginTransferInput
}

/// ////////////////////////////////////////////////////////////////////////////
// Subscriptions
/// ////////////////////////////////////////////////////////////////////////////
